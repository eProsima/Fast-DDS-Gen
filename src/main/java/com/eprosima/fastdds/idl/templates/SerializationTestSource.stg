// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

group ProtocolHeader;

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx,  file=[ctx.filename, "SerializationTest.cpp"], description=["This file contains serialization test code."])$

#include "$ctx.filename$PubSubTypes.h"
#include "$ctx.filename$Serialization.h"
#include <fastcdr/Cdr.h>
#include <fastrtps/rtps/common/SerializedPayload.h>

#include <stdint.h>
#include <inttypes.h>
#include <string.h>
#include <functional>
#include <vector>

using TestLambda = std::function<bool()>;

std::vector<TestLambda> functions_to_run;

int main(void)
{
    srand((unsigned) time(NULL));
    bool ret_value = true;

    $definitions; separator="\n"$

    for (auto& fc : functions_to_run)
    {
        ret_value &= fc();
    }
    return ret_value ? 0 : 1;
}

>>

struct_type(ctx, parent, struct) ::= <<
functions_to_run.emplace_back([]() -> bool
{
    printf("\n========================================Testing $struct.name$ ========================================\n");
    using eprosima::fastrtps::rtps::SerializedPayload_t;
    $if(struct.hasScope)$    using namespace $struct.scope$;$endif$

    $struct.name$ $struct.name$_serialization_topic;
    $struct.name$ $struct.name$_deserialization_topic;

    initialize$struct.name$(&$struct.name$_serialization_topic);

    $struct.name$PubSubType pst;
    uint32_t payloadSize = static_cast<uint32_t>(pst.getSerializedSizeProvider(&$struct.name$_serialization_topic)());

    SerializedPayload_t payload(payloadSize);
    if (pst.serialize(&$struct.name$_serialization_topic, &payload) == 0)
    {
        return false;
    }

    if (pst.deserialize(&payload, &$struct.name$_deserialization_topic) == 0)
    {
        return false;
    }

    uint32_t payloadOutSize = static_cast<uint32_t>(pst.getSerializedSizeProvider(&$struct.name$_deserialization_topic)());

    //int topic_equal = memcmp(&$struct.name$_serialization_topic, &$struct.name$_deserialization_topic, sizeof(&$struct.name$)) == 0;
    int topic_equal = compare$struct.name$(&$struct.name$_serialization_topic, &$struct.name$_deserialization_topic);
    int size_equal = payloadOutSize == payloadSize;

    printf("\n");
    printf("===== Before serialize: =====\n");
    print$struct.name$(&$struct.name$_serialization_topic);
    printf("\n");
    printf("===== After deserialize: =====\n");
    print$struct.name$(&$struct.name$_deserialization_topic);
    printf("\n");
    printf("SerializedPayload_t: \n");
    printf("length: %d - %d\n", payloadSize, payload.length);
    printf("data: ");
    for(uint32_t i = 0; i < payloadSize; ++i)
    {
        printf("%02X ", payload.data[i]);
    }
    printf("\n\n");

    uint32_t type_size = sizeof($struct.name$);
    printf("Topic $struct.name$ size: %s => payloadIn: %d, payloadOut: %d, type: %d\n", size_equal ? "OK" : "ERROR", payloadSize, payloadOutSize, type_size);
    printf("Topic $struct.name$ comparation: %s\n", topic_equal ? "OK" : "ERROR");

    $if((ctx.generateTypesC))$
    free_string$struct.name$(&$struct.name$_serialization_topic);
    $endif$

    if (!topic_equal)
    {
        return false;
    }

    return payload.length == payloadSize;
});
>>

union_type(ctx, parent, union) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<>>

bitmask_type(ctx, parent, bitmask) ::= <<>>

bitset_type(ctx, parent, bitset) ::= <<>>

annotation(ctx, annotation) ::= <<>>

module(ctx, parent, module, definition_list) ::= <<>>

definition_list(definitions) ::= <<>>
