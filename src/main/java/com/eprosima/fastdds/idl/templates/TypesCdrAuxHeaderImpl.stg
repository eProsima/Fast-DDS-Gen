// Copyright 2023 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

group TypesCdrAuxHeader;

import "eprosima.stg"

main(ctx, definitions, extensions) ::= <<
$fileHeader(ctx=ctx, file=[ctx.filename, "CdrAux.ipp"], description=["This source file contains some declarations of CDR related functions."])$

#ifndef _FAST_DDS_GENERATED_$ctx.headerGuardName$CDRAUX_IPP_
#define _FAST_DDS_GENERATED_$ctx.headerGuardName$CDRAUX_IPP_

#include "$ctx.filename$CdrAux.hpp"

$if(ctx.cdr)$
#include <fastcdr/Cdr.h>
#include <fastcdr/CdrSizeCalculator.hpp>

$endif$

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

namespace eprosima {
namespace fastcdr {

$definitions; separator="\n"$

} // namespace fastcdr
} // namespace eprosima

#endif // _FAST_DDS_GENERATED_$ctx.headerGuardName$CDRAUX_IPP_
$"\n"$
>>

module(ctx, parent, module, definition_list) ::= <<
$definition_list$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$

>>

annotation(ctx, annotation) ::= <<>>

interface(ctx, parent, interface, export_list) ::= <<
$export_list$
>>

export_list(exports) ::= <<
$exports; separator="\n"$

>>

fwd_decl(ctx, parent, type) ::= <<>>

exception(ctx, parent, exception) ::= <<>>

operation(ctx, parent, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, parent, const) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<>>

struct_type(ctx, parent, struct, extensions) ::= <<
$if(ctx.anyCdr)$
template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const $struct.scopedname$& data,
        size_t& current_alignment)
{
    $if(!struct.scope.empty)$
    using namespace $struct.scope$;
    $endif$

    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                $if(struct.annotationFinal)$eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR2$elseif(struct.annotationAppendable)$eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2$elseif(struct.annotationMutable)$eprosima::fastcdr::EncodingAlgorithmFlag::PL_CDR2$endif$ :
                                $if(struct.annotationFinal || struct.annotationAppendable)$eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR$elseif(struct.annotationMutable)$eprosima::fastcdr::EncodingAlgorithmFlag::PL_CDR$endif$,
                                current_alignment)};


    $struct.allIdentifiedMembers : { member | $if(!member.value.annotationNonSerialized)$
    calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId($member.key$),
            data.$member.value.name$(), current_alignment);
    $endif$}; separator="\n"$

    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}
$endif$

$if(ctx.cdr)$
template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const $struct.scopedname$& data)
{
    $if(!struct.scope.empty)$
    using namespace $struct.scope$;
    $endif$

    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            $if(struct.annotationFinal)$eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR2$elseif(struct.annotationAppendable)$eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2$elseif(struct.annotationMutable)$eprosima::fastcdr::EncodingAlgorithmFlag::PL_CDR2$endif$ :
            $if(struct.annotationFinal || struct.annotationAppendable)$eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR$elseif(struct.annotationMutable)$eprosima::fastcdr::EncodingAlgorithmFlag::PL_CDR$endif$);

    $if(struct.allIdentifiedMembers)$
    scdr$struct.allIdentifiedMembers : { member | $if(!member.value.annotationNonSerialized)$
        << eprosima::fastcdr::MemberId($member.key$) << data.$member.value.name$()
    $endif$
    }; separator=""$;
    $else$
    static_cast<void>(data);
    $endif$

    scdr.end_serialize_type(current_state);
}

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        $struct.scopedname$& data)
{
    $if(!struct.scope.empty)$
    using namespace $struct.scope$;
    $endif$

    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            $if(struct.annotationFinal)$eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR2$elseif(struct.annotationAppendable)$eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2$elseif(struct.annotationMutable)$eprosima::fastcdr::EncodingAlgorithmFlag::PL_CDR2$endif$ :
            $if(struct.annotationFinal || struct.annotationAppendable)$eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR$elseif(struct.annotationMutable)$eprosima::fastcdr::EncodingAlgorithmFlag::PL_CDR$endif$,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                    $if(!struct.allIdentifiedMembers)$
                    static_cast<void>(dcdr);
                    $endif$
                    $struct.allIdentifiedMembers : { member |
                    case $member.key$:
                        $if(!member.value.annotationNonSerialized)$
                            dcdr \>> data.$member.value.name$();
                        $endif$
                        break;
                    }; separator="\n"$
                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const $struct.scopedname$& data)
{
    $if(!struct.scope.empty)$
    using namespace $struct.scope$;
    $endif$

    static_cast<void>(scdr);
    static_cast<void>(data);
    $if(struct.hasKey)$
        $struct.members : { member |
            $if(member.annotationKey)$
                $if(member.typecode.isStructType)$
                    $if(member.typecode.hasKey)$
                        serialize_key(scdr, data.$member.name$());
                    $else$
                        scdr << data.$member.name$();
                    $endif$
                $else$
                    scdr << data.$member.name$();
                $endif$
            $endif$
        }; separator="\n"$
    $endif$
}

$endif$

>>

bitset_type(ctx, parent, bitset) ::= <<
$if(ctx.anyCdr)$
template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const $bitset.scopedname$& data,
        size_t& current_alignment)
{
    $if(!bitset.scope.empty)$
    using namespace $bitset.scope$;
    $endif$

    return calculator.calculate_serialized_size(data.bitset(), current_alignment);
}
$endif$

$if(ctx.cdr)$
template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const $bitset.scopedname$& data)
{
    $if(!bitset.scope.empty)$
    using namespace $bitset.scope$;
    $endif$

    scdr << data.bitset();
}

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& dcdr,
        $bitset.scopedname$& data)
{
    $if(!bitset.scope.empty)$
    using namespace $bitset.scope$;
    $endif$

    std::bitset<$bitset.fullBitSize$> bitset;
    dcdr \>> bitset;
    data.bitset(bitset);
}
$endif$
>>

public_bitfield_definition(member) ::= <<>>

union_type(ctx, parent, union) ::= <<
$if(ctx.anyCdr)$
template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const $union.scopedname$& data,
        size_t& current_alignment)
{
    $if(!union.scope.empty)$
    using namespace $union.scope$;
    $endif$

    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                $if(union.annotationFinal)$eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR2$elseif(union.annotationAppendable)$eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2$elseif(union.annotationMutable)$eprosima::fastcdr::EncodingAlgorithmFlag::PL_CDR2 $endif$ :
                                $if(union.annotationFinal || union.annotationAppendable)$eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR$elseif(union.annotationMutable)$eprosima::fastcdr::EncodingAlgorithmFlag::PL_CDR $endif$,
                                current_alignment)};

    calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0), data._d(),
                    current_alignment);

    switch (data._d())
    {
        $union.identifiedMembers:{ member | $if(member.value.printable)$$member.value.labels:{ label |case $label$:}; separator="\n"$
        $if(member.value.default)$default:$endif$
            calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId($member.key$),
                        data.$member.value.name$(), current_alignment);
            break;
        $endif$
        }; separator="\n"$
        $if(!union.defaultMember)$
        default:
            break;
        $endif$
    }

    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

$endif$

$if(ctx.cdr)$
template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const $union.scopedname$& data)
{
    $if(!union.scope.empty)$
    using namespace $union.scope$;
    $endif$

    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            $if(union.annotationFinal)$eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR2$elseif(union.annotationAppendable)$eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2$elseif(union.annotationMutable)$eprosima::fastcdr::EncodingAlgorithmFlag::PL_CDR2$endif$ :
            $if(union.annotationFinal || union.annotationAppendable)$eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR$elseif(union.annotationMutable)$eprosima::fastcdr::EncodingAlgorithmFlag::PL_CDR$endif$);

    scdr << eprosima::fastcdr::MemberId(0) << data._d();

    switch (data._d())
    {
        $union.identifiedMembers:{ member | $if(member.value.printable)$
        $member.value.labels:{ label |case $label$:}; separator="\n"$
        $if(member.value.default)$default:$endif$
            scdr << eprosima::fastcdr::MemberId($member.key$) << data.$member.value.name$();
            break;
        $endif$
        }; separator="\n"$
        $if(!union.defaultMember)$
        default:
            break;
        $endif$
    }

    scdr.end_serialize_type(current_state);
}

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        $union.scopedname$& data)
{
    $if(!union.scope.empty)$
    using namespace $union.scope$;
    $endif$

    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            $if(union.annotationFinal)$eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR2$elseif(union.annotationAppendable)$eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2$elseif(union.annotationMutable)$eprosima::fastcdr::EncodingAlgorithmFlag::PL_CDR2$endif$ :
            $if(union.annotationFinal || union.annotationAppendable)$eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR$elseif(union.annotationMutable)$eprosima::fastcdr::EncodingAlgorithmFlag::PL_CDR$endif$,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                    case 0:
                        dcdr \>> data._d();
                        break;
                    default:
                        switch (data._d())
                        {
                            $union.identifiedMembers:{ member | $if(member.value.printable)$
                            $member.value.labels:{ label |case $label$:}; separator="\n"$
                            $if(member.value.default)$default:$endif$
                                dcdr \>> data.$member.value.name$();
                                break;
                            $endif$
                            }; separator="\n"$
                            $if(!union.defaultMember)$
                            default:
                                break;
                            $endif$
                        }
                        $if(!union.annotationMutable)$ret_value = false;$endif$
                        break;
                }
                return ret_value;
            });
}
$endif$
>>

enum_type(ctx, parent, enum) ::= <<>>

bitmask_type(ctx, parent, bitmask) ::= <<>>
