// Copyright 2025 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

group ProtocolHeader;

import "eprosima.stg"
import "com/eprosima/fastcdr/idl/templates/FastCdrCommon.stg"

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx,  file=[ctx.filename, "Server.hpp"], description=["Server implementation for interfaces"])$

#ifndef FAST_DDS_GENERATED__$ctx.headerGuardName$_SERVER_HPP
#define FAST_DDS_GENERATED__$ctx.headerGuardName$_SERVER_HPP

#include <memory>

#include <fastdds/dds/domain/DomainParticipant.hpp>
#include <fastdds/dds/domain/qos/ReplierQos.hpp>
#include <fastdds/dds/rpc/exceptions.hpp>
#include <fastdds/dds/rpc/interfaces.hpp>
#include <fastdds/rtps/common/Guid.hpp>
#include <fastdds/rtps/common/RemoteLocators.hpp>

#include "$ctx.filename$.hpp"

$definitions; separator="\n"$

#endif  // FAST_DDS_GENERATED__$ctx.headerGuardName$_CLIENT_HPP

>>

module(ctx, parent, module, definition_list) ::= <<
namespace $module.name$ {

$definition_list$

} // namespace $module.name$

>>

interface(ctx, parent, interface, export_list) ::= <<
struct $interface.name$Server
{
    /**
     * @brief Context for a client request.
     */
    struct ClientContext
    {
        virtual ~ClientContext() = default;

        /**
         * @brief Get the GUID of the client that made the request.
         *
         * @return The GUID of the client that made the request.
         */
        virtual const eprosima::fastdds::rtps::GUID_t& get_client_id() const = 0;

        /**
         * @brief Get the locators of the client that made the request.
         *
         * @return The locators of the client that made the request.
         */
        virtual const eprosima::fastdds::rtps::RemoteLocatorList& get_client_locators() const = 0;
    };

    struct IServerImplementation
    {
        virtual ~IServerImplementation() = default;

        $interface.all_operations:{op | $operation_prototype(op)$}; separator="\n\n"$
    };

    virtual ~$interface.name$Server() = default;

    /**
     * @brief Run the server.
     *
     * This method starts the server and begins processing requests.
     * The method will block until the server is stopped.
     */
    virtual void run() = 0;

    /**
     * @brief Stop the server.
     *
     * This method stops the server and releases all resources.
     * It will cancel all pending requests, and wait for all processing threads to finish before returning.
     */
    virtual void stop() = 0;

};

/**
 * @brief Create a $interface.name$Server instance.
 *
 * @param part             The DomainParticipant to use for the server.
 * @param service_name     The name of the service.
 * @param qos              The QoS settings for the server.
 * @param thread_pool_size The size of the thread pool to use for processing requests.
 *                         When set to 0, a new thread will be created when no threads are available.
 * @param implementation   The implementation of the server interface.
 */
extern $ctx.fileNameUpper$_DllAPI std::shared_ptr<$interface.name$Server> create_$interface.name$Server(
        eprosima::fastdds::dds::DomainParticipant& part,
        const char* service_name,
        const eprosima::fastdds::dds::ReplierQos& qos,
        size_t thread_pool_size,
        std::shared_ptr<$interface.name$Server::IServerImplementation> implementation);
>>

operation_prototype(op) ::= <<
$if(op.annotationFeed)$
virtual void $op.name$(
        const ClientContext& info,
$if(op.parameters)$
        $operation_parameters(op.parameters)$,
$endif$
        /*result*/ eprosima::fastdds::dds::rpc::RpcServerWriter<$paramRetType(op.rettype)$>& result_writer) = 0;
$else$
$if(op.parameters)$
virtual $paramRetType(op.rettype)$ $op.name$(
        const ClientContext& info,
        $operation_parameters(op.parameters)$) = 0;
$else$
virtual $paramRetType(op.rettype)$ $op.name$(
        const ClientContext& info) = 0;
$endif$
$endif$
>>

operation_parameters(params) ::= <<
$params : {param | /*$param.comment$*/ $if(param.output)$$paramTypeByRef(typecode=param.typecode)$$else$$paramTypeByValue(typecode=param.typecode, feed=param.annotationFeed, is_server=true)$$endif$ $param.name$}; anchor, separator=",\n"$
>>
