// Copyright 2025 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

group ProtocolHeader;

import "eprosima.stg"

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx,  file=[ctx.filename, "Server.hpp"], description=["Server implementation for interfaces"])$

#ifndef FAST_DDS_GENERATED__$ctx.headerGuardName$_SERVER_HPP
#define FAST_DDS_GENERATED__$ctx.headerGuardName$_SERVER_HPP

#include <memory>

#include <fastdds/dds/domain/DomainParticipant.hpp>
#include <fastdds/dds/domain/qos/ReplierQos.hpp>

#include "$ctx.filename$.hpp"

$definitions; separator="\n"$

#endif  // FAST_DDS_GENERATED__$ctx.headerGuardName$_CLIENT_HPP

>>

module(ctx, parent, module, definition_list) ::= <<
namespace $module.name$ {

$definition_list$

} // namespace $module.name$

>>

interface(ctx, parent, interface, export_list) ::= <<
struct $interface.name$Server
{
    virtual ~$interface.name$Server() = default;

    /**
     * @brief Run the server.
     *
     * This method starts the server and begins processing requests.
     * The method will block until the server is stopped.
     */
    virtual void run() = 0;

    /**
     * @brief Stop the server.
     *
     * This method stops the server and releases all resources.
     * It will cancel all pending requests, and wait for all processing threads to finish before returning.
     */
    virtual void stop() = 0;

};

/**
 * @brief Create a $interface.name$Server instance.
 *
 * @param part             The DomainParticipant to use for the server.
 * @param service_name     The name of the service.
 * @param qos              The QoS settings for the server.
 * @param thread_pool_size The size of the thread pool to use for processing requests.
 *                         When set to 0, a new thread will be created when no threads are available.
 */
extern $ctx.fileNameUpper$_DllAPI std::shared_ptr<$interface.name$Server> create_$interface.name$Server(
        eprosima::fastdds::dds::DomainParticipant& part,
        const char* service_name,
        const eprosima::fastdds::dds::ReplierQos& qos,
        size_t thread_pool_size);
>>
