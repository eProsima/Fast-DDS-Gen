// Copyright 2018 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

group TypeObjectHeader;

import "eprosima.stg"

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx, file=[ctx.filename, "TypeObject.h"], description=["This header file contains the declaration of the described types in the IDL file."])$

#ifndef _FAST_DDS_GENERATED_$ctx.headerGuardName$_TYPE_OBJECT_H_
#define _FAST_DDS_GENERATED_$ctx.headerGuardName$_TYPE_OBJECT_H_

$ctx.directIncludeDependencies : {include | #include "$include$TypeObject.h"}; separator="\n"$

#include <fastrtps/types/TypeObject.h>
#include <map>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined($ctx.filename;format="toUpper"$_SOURCE)
#define $ctx.filename;format="toUpper"$_DllAPI __declspec( dllexport )
#else
#define $ctx.filename;format="toUpper"$_DllAPI __declspec( dllimport )
#endif // $ctx.filename;format="toUpper"$_SOURCE
#else
#define $ctx.filename;format="toUpper"$_DllAPI
#endif
#else
#define $ctx.filename;format="toUpper"$_DllAPI
#endif // _WIN32

using namespace eprosima::fastrtps::types;

eProsima_user_DllExport void register$ctx.filename$Types();

$definitions; separator="\n"$

#endif // _FAST_DDS_GENERATED_$ctx.headerGuardName$_TYPE_OBJECT_H_
>>

typedef_decl(ctx, parent, typedefs, typedefs_type, declarator_type) ::= <<
$declarator_type$
$typedefs_type$
eProsima_user_DllExport const TypeIdentifier* Get$typedefs.name$Identifier(bool complete = false);
eProsima_user_DllExport const TypeObject* Get$typedefs.name$Object(bool complete = false);
eProsima_user_DllExport const TypeObject* GetMinimal$typedefs.name$Object();
eProsima_user_DllExport const TypeObject* GetComplete$typedefs.name$Object();

>>

enum_type(ctx, parent, enum) ::= <<
eProsima_user_DllExport const TypeIdentifier* Get$enum.name$Identifier(bool complete = false);
eProsima_user_DllExport const TypeObject* Get$enum.name$Object(bool complete = false);
eProsima_user_DllExport const TypeObject* GetMinimal$enum.name$Object();
eProsima_user_DllExport const TypeObject* GetComplete$enum.name$Object();

>>

bitmask_type(ctx, parent, bitmask) ::= <<
eProsima_user_DllExport const TypeIdentifier* Get$bitmask.name$Identifier(bool complete = false);
eProsima_user_DllExport const TypeObject* Get$bitmask.name$Object(bool complete = false);
eProsima_user_DllExport const TypeObject* GetMinimal$bitmask.name$Object();
eProsima_user_DllExport const TypeObject* GetComplete$bitmask.name$Object();

>>

struct_type(ctx, parent, struct, extensions, member_list) ::= <<
$member_list$
eProsima_user_DllExport const TypeIdentifier* Get$struct.name$Identifier(bool complete = false);
eProsima_user_DllExport const TypeObject* Get$struct.name$Object(bool complete = false);
eProsima_user_DllExport const TypeObject* GetMinimal$struct.name$Object();
eProsima_user_DllExport const TypeObject* GetComplete$struct.name$Object();

>>

member_type(ctx, member, type_member, declarators) ::= <<

$type_member$
$declarators$

>>

union_type(ctx, parent, union, extensions, switch_type) ::= <<
$switch_type$
eProsima_user_DllExport const TypeIdentifier* Get$union.name$Identifier(bool complete = false);
eProsima_user_DllExport const TypeObject* Get$union.name$Object(bool complete = false);
eProsima_user_DllExport const TypeObject* GetMinimal$union.name$Object();
eProsima_user_DllExport const TypeObject* GetComplete$union.name$Object();

>>

element_type(ctx, element, type_element, declarator) ::= <<

$type_element$
$declarator$

>>

bitset_type(ctx, parent, bitset, extensions) ::= <<
eProsima_user_DllExport const TypeIdentifier* Get$bitset.name$Identifier(bool complete = false);
eProsima_user_DllExport const TypeObject* Get$bitset.name$Object(bool complete = false);
eProsima_user_DllExport const TypeObject* GetMinimal$bitset.name$Object();
eProsima_user_DllExport const TypeObject* GetComplete$bitset.name$Object();

>>

annotation(ctx, annotation) ::= <<
eProsima_user_DllExport const TypeIdentifier* Get$annotation.name$Identifier(bool complete = false);
eProsima_user_DllExport const TypeObject* Get$annotation.name$Object(bool complete = false);
eProsima_user_DllExport const TypeObject* GetMinimal$annotation.name$Object();
eProsima_user_DllExport const TypeObject* GetComplete$annotation.name$Object();

namespace $annotation.name$
{
$annotation.enums : { it | $enum_type(ctx=ctx, parent=annotation, enum=it)$}; separator="\n"$

$annotation.typeDefs : { it | $typedef_decl(ctx=ctx, parent=annotation, typedefs=it)$}; separator="\n"$
}

>>

module(ctx, parent, module, definition_list) ::= <<
namespace $module.name$ {
    $definition_list$
} // namespace $module.name$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

const_decl(ctx, parent, const, const_type) ::= <<

$const_type$

>>

fwd_decl(ctx, parent, type) ::= <<>>

sequence_type(ctx, sequence, type_sequence) ::= <<

$type_sequence$
$get_type_identifier_doxydoc(ctx=ctx, param=sequence)$
const TypeIdentifier* get_$anonymous_sequence_name(sequence=sequence, type=type_seq)$_identifier(
        bool complete = false);
$get_type_object_doxydoc(ctx=ctx, param=sequence)$
const TypeObject* get_$anonymous_sequence_name(sequence=sequence, type=type_seq)$_object(
        bool complete = false);
$get_minimal_type_object_doxydoc(ctx=ctx, param=sequence)$
const TypeObject* get_minimal_$anonymous_sequence_name(sequence=sequence, type=type_seq)$_object();
$get_complete_type_object_doxydoc(ctx=ctx, param=sequence)$
const TypeObject* get_complete_$anonymous_sequence_name(sequence=sequence, type=type_seq)$_object();

>>

anonymous_sequence_name(sequence, type) ::= <%
$if(sequence.name)$$sequence.name$$else$anonymous_sequence_$type_seq.cppTypename$$if(sequence.actualMaxsize)$_$sequence.actualMaxsize$$endif$$endif$
%>

map_type(ctx, map, key_type, value_type) ::= <<

$key_type$
$value_type$
$get_type_identifier_doxydoc(ctx=ctx, param=map)$
const TypeIdentifier* get_$map.name$_identifier(
        bool complete = false);
$get_type_object_doxydoc(ctx=ctx, param=map)$
const TypeObject* get_$map.name$_object(
        bool complete = false);
$get_minimal_type_object_doxydoc(ctx=ctx, param=map)$
const TypeObject* get_minimal_$map.name$_object();
$get_complete_type_object_doxydoc(ctx=ctx, param=map)$
const TypeObject* get_complete_$map.name$_object();

>>

string_type(ctx, string) ::= <<
// TODO(jlbueno) Anonymous Doxydoc. PENDING: TypeObjectFactory redesign.
$get_type_identifier_doxydoc(ctx=ctx, param=string)$
const TypeIdentifier* get_$anonymous_string_name(string=string)$_identifier(
        bool complete = false);
$get_type_object_doxydoc(ctx=ctx, param=string)$
const TypeObject* get_$anonymous_string_name(string=string)$_object(
        bool complete = false);
$get_minimal_type_object_doxydoc(ctx=ctx, param=string)$
const TypeObject* get_minimal_$anonymous_string_name(string=string)$_object();
$get_complete_type_object_doxydoc(ctx=ctx, param=string)$
const TypeObject* get_complete_$anonymous_string_name(string=string)$_object();

>>

anonymous_string_name(string) ::= <<
$if(string.name)$$string.name$$else$anonymous_string_$string.maxsize$$endif$
>>

wide_string_type(ctx, wstring) ::= <<
$get_type_identifier_doxydoc(ctx=ctx, param=wstring)$
const TypeIdentifier* get_$anonymous_wstring_name(wstring=wstring)$_identifier(
        bool complete = false);
$get_type_object_doxydoc(ctx=ctx, param=wstring)$
const TypeObject* get_$anonymous_wstring_name(wstring=wstring)$_object(
        bool complete = false);
$get_minimal_type_object_doxydoc(ctx=ctx, param=wstring)$
const TypeObject* get_minimal_$anonymous_wstring_name(wstring=wstring)$_object();
$get_complete_type_object_doxydoc(ctx=ctx, param=wstring)$
const TypeObject* get_complete_$anonymous_wstring_name(wstring=wstring)$_object();

>>

anonymous_wstring_name(wstring) ::= <<
$if(wstring.name)$$wstring.name$$else$anonymous_wstring_$wstring.maxsize$$endif$
>>

array_declarator(ctx, array, array_type) ::= <<
$get_type_identifier_doxydoc(ctx=ctx, param=array)$
const TypeIdentifier* get_$anonymous_array_name(array=array, type=array_type)$_identifier(
        bool complete = false);
$get_type_object_doxydoc(ctx=ctx, param=array)$
const TypeObject* get_$anonymous_array_name(array=array, type=array_type)$_object(
        bool complete = false);
$get_minimal_type_object_doxydoc(ctx=ctx, param=array)$
const TypeObject* get_minimal_$anonymous_array_name(array=array, type=array_type)$_object();
$get_complete_type_object_doxydoc(ctx=ctx, param=array)$
const TypeObject* get_complete_$anonymous_array_name(array=array, type=array_type)$_object();

>>

anonymous_array_name(array, type) ::= <<
$if(array.name)$$array.name$$else$anonymous_array_$type$$array.dimensions:{dimension|_$dimension$};separator=""$$endif$
>>

/***** Utils *****/
