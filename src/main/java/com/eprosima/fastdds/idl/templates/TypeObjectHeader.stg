// Copyright 2018 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

group TypeObjectHeader;

import "eprosima.stg"

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx, file=[ctx.filename, "TypeObject.h"], description=["Header file containing the API required to register the TypeObject representation of the described types in the IDL file"])$

#ifndef _FAST_DDS_GENERATED_$ctx.headerGuardName$_TYPE_OBJECT_H_
#define _FAST_DDS_GENERATED_$ctx.headerGuardName$_TYPE_OBJECT_H_

/* *INDENT-OFF* */

#include <fastrtps/types/TypeIdentifier.h>
#include <fastrtps/types/TypeObject.h>

$ctx.directIncludeDependencies : {include | #include "$include$TypeObject.h"}; separator="\n"$

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

using namespace eprosima::fastrtps::types;

/**
 * @brief Register every TypeObject representation defined in the IDL file in the TypeObjectFactory.
 */
eProsima_user_DllExport void register$ctx.filename$Types();

$definitions; separator="\n"$
/* *INDENT-ON* */

#endif // _FAST_DDS_GENERATED_$ctx.headerGuardName$_TYPE_OBJECT_H_

>>

typedef_decl(ctx, parent, typedefs) ::= <<
$get_type_identifier_doxydoc(ctx=ctx, param=typedefs)$
eProsima_user_DllExport const TypeIdentifier* get_$typedefs.name$_identifier(
        bool complete = false);
$get_type_object_doxydoc(ctx=ctx, param=typedefs)$
eProsima_user_DllExport const TypeObject* get_$typedefs.name$_object(
        bool complete = false);
$get_minimal_type_object_doxydoc(ctx=ctx, param=typedefs)$
eProsima_user_DllExport const TypeObject* get_minimal_$typedefs.name$_object();
$get_complete_type_object_doxydoc(ctx=ctx, param=typedefs)$
eProsima_user_DllExport const TypeObject* get_complete_$typedefs.name$_object();

>>

enum_type(ctx, parent, enum) ::= <<
$get_type_identifier_doxydoc(ctx=ctx, param=enum)$
eProsima_user_DllExport const TypeIdentifier* get_$enum.name$_identifier(
        bool complete = false);
$get_type_object_doxydoc(ctx=ctx, param=enum)$
eProsima_user_DllExport const TypeObject* get_$enum.name$_object(
        bool complete = false);
$get_minimal_type_object_doxydoc(ctx=ctx, param=enum)$
eProsima_user_DllExport const TypeObject* get_minimal_$enum.name$_object();
$get_complete_type_object_doxydoc(ctx=ctx, param=enum)$
eProsima_user_DllExport const TypeObject* get_complete_$enum.name$_object();

>>

bitmask_type(ctx, parent, bitmask) ::= <<
$get_type_identifier_doxydoc(ctx=ctx, param=bitmask)$
eProsima_user_DllExport const TypeIdentifier* get_$bitmask.name$_identifier(
        bool complete = false);
$get_type_object_doxydoc(ctx=ctx, param=bitmask)$
eProsima_user_DllExport const TypeObject* get_$bitmask.name$_object(
        bool complete = false);
$get_minimal_type_object_doxydoc(ctx=ctx, param=bitmask)$
eProsima_user_DllExport const TypeObject* get_minimal_$bitmask.name$_object();
$get_complete_type_object_doxydoc(ctx=ctx, param=bitmask)$
eProsima_user_DllExport const TypeObject* get_complete_$bitmask.name$_object();

>>

struct_type(ctx, parent, struct, extensions) ::= <<
$get_type_identifier_doxydoc(ctx=ctx, param=struct)$
eProsima_user_DllExport const TypeIdentifier* get_$struct.name$_identifier(
        bool complete = false);
$get_type_object_doxydoc(ctx=ctx, param=struct)$
eProsima_user_DllExport const TypeObject* get_$struct.name$_object(
        bool complete = false);
$get_minimal_type_object_doxydoc(ctx=ctx, param=struct)$
eProsima_user_DllExport const TypeObject* get_minimal_$struct.name$_object();
$get_complete_type_object_doxydoc(ctx=ctx, param=struct)$
eProsima_user_DllExport const TypeObject* get_complete_$struct.name$_object();

>>

union_type(ctx, parent, union, extensions) ::= <<
$get_type_identifier_doxydoc(ctx=ctx, param=union)$
eProsima_user_DllExport const TypeIdentifier* get_$union.name$_identifier(
        bool complete = false);
$get_type_object_doxydoc(ctx=ctx, param=union)$
eProsima_user_DllExport const TypeObject* get_$union.name$_object(
        bool complete = false);
$get_minimal_type_object_doxydoc(ctx=ctx, param=union)$
eProsima_user_DllExport const TypeObject* get_minimal_$union.name$_object();
$get_complete_type_object_doxydoc(ctx=ctx, param=union)$
eProsima_user_DllExport const TypeObject* get_complete_$union.name$_object();

>>

bitset_type(ctx, parent, bitset, extensions) ::= <<
$get_type_identifier_doxydoc(ctx=ctx, param=bitset)$
eProsima_user_DllExport const TypeIdentifier* get_$bitset.name$_identifier(
        bool complete = false);
$get_type_object_doxydoc(ctx=ctx, param=bitset)$
eProsima_user_DllExport const TypeObject* get_$bitset.name$_object(
        bool complete = false);
$get_minimal_type_object_doxydoc(ctx=ctx, param=bitset)$
eProsima_user_DllExport const TypeObject* get_minimal_$bitset.name$_object();
$get_complete_type_object_doxydoc(ctx=ctx, param=bitset)$
eProsima_user_DllExport const TypeObject* get_complete_$bitset.name$_object();

>>

annotation(ctx, annotation) ::= <<
$get_type_identifier_doxydoc(ctx=ctx, param=annotation)$
eProsima_user_DllExport const TypeIdentifier* get_$annotation.name$_identifier(
        bool complete = false);
$get_type_object_doxydoc(ctx=ctx, param=annotation)$
eProsima_user_DllExport const TypeObject* get_$annotation.name$_object(
        bool complete = false);
$get_minimal_type_object_doxydoc(ctx=ctx, param=annotation)$
eProsima_user_DllExport const TypeObject* get_minimal_$annotation.name$_object();
$get_complete_type_object_doxydoc(ctx=ctx, param=annotation)$
eProsima_user_DllExport const TypeObject* get_complete_$annotation.name$_object();

namespace $annotation.name$
{
$annotation.enums : { it | $enum_type(ctx=ctx, parent=annotation, enum=it)$}; separator="\n"$

$annotation.typeDefs : { it | $typedef_decl(ctx=ctx, parent=annotation, typedefs=it)$}; separator="\n"$
}

>>

module(ctx, parent, module, definition_list) ::= <<
namespace $module.name$ {
    $definition_list$
} // namespace $module.name$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

const_decl(ctx, parent, const) ::= <<>>

fwd_decl(ctx, parent, type) ::= <<>>

/***** Utils *****/
get_type_identifier_doxydoc(ctx, param) ::= <<
/**
 * @brief Get $param.name$ TypeIdentifier.
 *        First the TypeObjectFactory is queried and if not found it is registered into the TypeObjectFactory.
 *
 * @param complete Flag to query the complete or the minimal TypeIdentifier of the given type.
 * @return TypeIdentifier* Constant pointer to the TypeIdentifier registered in the TypeObjectFactory.
 *         nullptr if the TypeIdentifier is not found in the TypeObjectFactory.
 */
>>

get_type_object_doxydoc(ctx, param) ::= <<
/**
 * @brief Get $param.name$ TypeObject.
 *        First the TypeObjectFactory is queried and if not found it is registered into the TypeObjectFactory.
 *
 * @param complete Flag to query the complete or the minimal TypeObject of the given type.
 * @return TypeObject* Constant pointer to the TypeObject registered in the TypeObjectFactory.
 *         nullptr if the TypeObject is not found in the TypeObjectFactory.
 */
>>

get_complete_type_object_doxydoc(ctx, param) ::= <<
/**
 * @brief Get $param.name$ complete TypeObject.
 *        First the complete TypeObject is queried and if not found it is registered into the TypeObjectFactory.
 *
 * @return TypeObject* Constant pointer to the complete TypeObject registered in the TypeObjectFactory.
 *         nullptr if the complete TypeObject is not found in the TypeObjectFactory.
 */
>>

get_minimal_type_object_doxydoc(ctx, param) ::= <<
/**
 * @brief Get $param.name$ minimal TypeObject.
 *        First the minimal TypeObject is queried and if not found it is registered into the TypeObjectFactory.
 *
 * @return TypeObject* Constant pointer to the minimal TypeObject registered in the TypeObjectFactory.
 *         nullptr if the minimal TypeObject is not found in the TypeObjectFactory.
 */
>>
