// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

group ProtocolHeader;

import "eprosima.stg"

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx,  file=[ctx.filename, "PubSubTypes.h"], description=["This header file contains the declaration of the serialization functions."])$


#ifndef _FAST_DDS_GENERATED_$ctx.headerGuardName$_PUBSUBTYPES_H_
#define _FAST_DDS_GENERATED_$ctx.headerGuardName$_PUBSUBTYPES_H_

#include <fastdds/dds/core/policy/QosPolicies.hpp>
#include <fastdds/dds/topic/TopicDataType.hpp>
#include <fastdds/rtps/common/InstanceHandle.h>
#include <fastdds/rtps/common/SerializedPayload.h>
#include <fastrtps/utils/md5.h>

#include "$ctx.filename$.h"

$ctx.directIncludeDependencies : {include | #include "$include$PubSubTypes.h"}; separator="\n"$

#if !defined(GEN_API_VER) || (GEN_API_VER != 2)
#error \
    Generated $ctx.filename$ is not compatible with current installed Fast DDS. Please, regenerate it with fastddsgen.
#endif  // GEN_API_VER

$definitions; separator="\n"$

#endif // _FAST_DDS_GENERATED_$ctx.headerGuardName$_PUBSUBTYPES_H_
$"\n"$
>>

// TODO name -> module
module(ctx, parent, module, definition_list) ::= <<
namespace $module.name$
{
    $definition_list$
}
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

annotation(ctx, annotation) ::= <<>>

interface(ctx, parent, interface, export_list) ::= <<
$export_list$
>>

export_list(exports) ::= <<
$exports; separator="\n"$
>>

exception(ctx, parent, exception) ::= <<>>

operation(ctx, parent, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, parent, const) ::= <<>>

fwd_decl(ctx, parent, type) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<
$typedefs : { typedef |typedef $typedef.typedefContentTypeCode.cppTypename$ $typedef.name$;}; separator="\n"$
>>

struct_type(ctx, parent, struct) ::= <<

$if(struct.isPlain)$
$if(struct.members)$
#ifndef SWIG
namespace detail {

template<typename Tag, typename Tag::type M>
struct $struct.name$_rob
{
    friend constexpr typename Tag::type get(
            Tag)
    {
        return M;
    }

};

struct $struct.name$_f
{
    typedef $last(struct.members).typecode.cppTypename$ $struct.name$::* type;
    friend constexpr type get(
            $struct.name$_f);
};

template struct $struct.name$_rob<$struct.name$_f, &$struct.name$::m_$last(struct.members).name$>;

template <typename T, typename Tag>
inline size_t constexpr $struct.name$_offset_of()
{
    return ((::size_t) &reinterpret_cast<char const volatile&>((((T*)0)->*get(Tag()))));
}

} // namespace detail
#endif // ifndef SWIG

$endif$
$endif$

/*!
 * @brief This class represents the TopicDataType of the type $struct.name$ defined by the user in the IDL file.
 * @ingroup $ctx.trimfilename$
 */
class $if(parent.IsInterface)$$parent.name$_$endif$$struct.name$PubSubType : public eprosima::fastdds::dds::TopicDataType
{
public:

    typedef $if(parent.IsInterface)$$parent.name$_$endif$$struct.name$ type;

    eProsima_user_DllExport $if(parent.IsInterface)$$parent.name$_$endif$$struct.name$PubSubType();

    eProsima_user_DllExport ~$if(parent.IsInterface)$$parent.name$_$endif$$struct.name$PubSubType() override;

    eProsima_user_DllExport bool serialize(
            void* data,
            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
    {
        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
    }

    eProsima_user_DllExport bool serialize(
            void* data,
            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

    eProsima_user_DllExport bool deserialize(
            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
            void* data) override;

    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
            void* data) override
    {
        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
    }

    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
            void* data,
            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

    eProsima_user_DllExport bool getKey(
            void* data,
            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
            bool force_md5 = false) override;

    eProsima_user_DllExport void* createData() override;

    eProsima_user_DllExport void deleteData(
            void* data) override;

#ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
    eProsima_user_DllExport inline bool is_bounded() const override
    {
        return $if (struct.isBounded)$true$else$false$endif$;
    }

#endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

#ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
    eProsima_user_DllExport inline bool is_plain() const override
    {
        return $if(struct.isPlain)$is_plain_xcdrv1_impl()$else$false$endif$;
    }

    eProsima_user_DllExport inline bool is_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
    {
        $if(struct.isPlain)$
        if(data_representation == eprosima::fastdds::dds::DataRepresentationId_t::XCDR2_DATA_REPRESENTATION)
        {
            return is_plain_xcdrv2_impl();
        }
        else
        {
            return is_plain_xcdrv1_impl();
        }
        $else$
        static_cast<void>(data_representation);
        return false;
        $endif$
    }

#endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

#ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
    eProsima_user_DllExport inline bool construct_sample(
            void* memory) const override
    {
        $if (struct.isPlain)$new (memory) $if(parent.IsInterface)$$struct.scopedname$$else$$struct.name$$endif$()$else$static_cast<void>(memory)$endif$;
        return $if (struct.isPlain)$true$else$false$endif$;
    }

#endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

    MD5 m_md5;
    unsigned char* m_keyBuffer;

$if(struct.isPlain)$
private:

    static constexpr bool is_plain_xcdrv1_impl()
    {
        $if(struct.members)$
        return $struct.maxXCDRv1PlainTypeSerializedSize$ULL ==
               (detail::$struct.name$_offset_of<$struct.name$, detail::$struct.name$_f>() +
               sizeof($last(struct.members).typecode.cppTypename$));
        $elseif(struct.inheritances)$
        $if(last(struct.inheritances).isPlain)$
        return $struct.maxXCDRv1PlainTypeSerializedSize$ULL ==
               (detail::$last(struct.inheritances).name$_offset_of<$last(struct.inheritances).name$, detail::$last(struct.inheritances).name$_f>() +
               sizeof($last(last(struct.inheritances).members).typecode.cppTypename$));
        $else$
        return true;
        $endif$
        $else$
        return true;
        $endif$
    }

    static constexpr bool is_plain_xcdrv2_impl()
    {
        $if(struct.members)$
        return $struct.maxXCDRv2PlainTypeSerializedSize$ULL ==
               (detail::$struct.name$_offset_of<$struct.name$, detail::$struct.name$_f>() +
               sizeof($last(struct.members).typecode.cppTypename$));
        $elseif(struct.inheritances)$
        $if(last(struct.inheritances).isPlain)$
        return $struct.maxXCDRv2PlainTypeSerializedSize$ULL ==
               (detail::$last(struct.inheritances).name$_offset_of<$last(struct.inheritances).name$, detail::$last(struct.inheritances).name$_f>() +
               sizeof($last(last(struct.inheritances).members).typecode.cppTypename$));
        $else$
        return true;
        $endif$
        $else$
        return true;
        $endif$
    }

$endif$
};
>>

union_type(ctx, parent, union) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>

bitmask_type(ctx, parent, bitmask) ::= <<>>

bitset_type(ctx, parent, bitset) ::= <<>>
