// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

group ProtocolHeader;

import "eprosima.stg"

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx,  file=[ctx.filename, "PubSubTypes.hpp"], description=["This header file contains the declaration of the serialization functions."])$


#ifndef FAST_DDS_GENERATED__$ctx.headerGuardName$_PUBSUBTYPES_HPP
#define FAST_DDS_GENERATED__$ctx.headerGuardName$_PUBSUBTYPES_HPP

#include <fastdds/dds/core/policy/QosPolicies.hpp>
#include <fastdds/dds/topic/TopicDataType.hpp>
#include <fastdds/rtps/common/InstanceHandle.hpp>
#include <fastdds/rtps/common/SerializedPayload.hpp>
#include <fastdds/utils/md5.hpp>

#include "$ctx.filename$.hpp"

$ctx.directIncludeDependencies : {include | #include "$include$PubSubTypes.hpp"}; separator="\n"$

#if !defined(FASTDDS_GEN_API_VER) || (FASTDDS_GEN_API_VER != 3)
#error \
    Generated $ctx.filename$ is not compatible with current installed Fast DDS. Please, regenerate it with fastddsgen.
#endif  // FASTDDS_GEN_API_VER

$definitions; separator="\n"$

#endif // FAST_DDS_GENERATED__$ctx.headerGuardName$_PUBSUBTYPES_HPP
$"\n"$
>>

module(ctx, parent, module, definition_list) ::= <<
namespace $module.name$
{
    $definition_list$
} // namespace $module.name$
>>

typedef_decl(ctx, parent, typedefs, typedefs_type, declarator_type) ::= <<
$declarator_type$
$typedefs_type$
$typedefs : { typedef |typedef $typedef.typedefContentTypeCode.cppTypename$ $typedef.name$;}; separator="\n"$
>>

struct_type(ctx, parent, struct, member_list) ::= <<
$member_list$

$if(struct.isPlain)$
$if(struct.members)$
#ifndef SWIG
namespace detail {

template<typename Tag, typename Tag::type M>
struct $struct.name$_rob
{
    friend constexpr typename Tag::type get(
            Tag)
    {
        return M;
    }

};

struct $struct.name$_f
{
    typedef $last(struct.members).typecode.cppTypename$ $struct.name$::* type;
    friend constexpr type get(
            $struct.name$_f);
};

template struct $struct.name$_rob<$struct.name$_f, &$struct.name$::m_$last(struct.members).name$>;

template <typename T, typename Tag>
inline size_t constexpr $struct.name$_offset_of()
{
    return ((::size_t) &reinterpret_cast<char const volatile&>((((T*)0)->*get(Tag()))));
}

} // namespace detail
#endif // ifndef SWIG

$endif$
$endif$

/*!
 * @brief This class represents the TopicDataType of the type $struct.name$ defined by the user in the IDL file.
 * @ingroup $ctx.trimfilename$
 */
class $struct.name$PubSubType : public eprosima::fastdds::dds::TopicDataType
{
public:

    typedef $struct.name$ type;

    eProsima_user_DllExport $struct.name$PubSubType();

    eProsima_user_DllExport ~$struct.name$PubSubType() override;

    eProsima_user_DllExport bool serialize(
            const void* const data,
            eprosima::fastdds::rtps::SerializedPayload_t& payload,
            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

    eProsima_user_DllExport bool deserialize(
            eprosima::fastdds::rtps::SerializedPayload_t& payload,
            void* data) override;

    eProsima_user_DllExport uint32_t calculate_serialized_size(
            const void* const data,
            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

    eProsima_user_DllExport bool compute_key(
            eprosima::fastdds::rtps::SerializedPayload_t& payload,
            eprosima::fastdds::rtps::InstanceHandle_t& ihandle,
            bool force_md5 = false) override;

    eProsima_user_DllExport bool compute_key(
            const void* const data,
            eprosima::fastdds::rtps::InstanceHandle_t& ihandle,
            bool force_md5 = false) override;

    eProsima_user_DllExport void* create_data() override;

    eProsima_user_DllExport void delete_data(
            void* data) override;

    //Register TypeObject representation in Fast DDS TypeObjectRegistry
    eProsima_user_DllExport void register_type_object_representation() override;

#ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
    eProsima_user_DllExport inline bool is_bounded() const override
    {
        return $if (struct.isBounded)$true$else$false$endif$;
    }

#endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

#ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

    eProsima_user_DllExport inline bool is_plain(
            eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
    {
        $if(struct.isPlain)$
        if (data_representation == eprosima::fastdds::dds::DataRepresentationId_t::XCDR2_DATA_REPRESENTATION)
        {
            return is_plain_xcdrv2_impl();
        }
        else
        {
            return is_plain_xcdrv1_impl();
        }
        $else$
        static_cast<void>(data_representation);
        return false;
        $endif$
    }

#endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

#ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
    eProsima_user_DllExport inline bool construct_sample(
            void* memory) const override
    {
        $if (struct.isPlain)$new (memory) $struct.name$()$else$static_cast<void>(memory)$endif$;
        return $if (struct.isPlain)$true$else$false$endif$;
    }

#endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

private:

    eprosima::fastdds::MD5 md5_;
    unsigned char* key_buffer_;

$if(struct.isPlain)$

    static constexpr bool is_plain_xcdrv1_impl()
    {
        $if(struct.members)$
        return $struct.maxXCDRv1PlainTypeSerializedSize$ULL ==
               (detail::$struct.name$_offset_of<$struct.name$, detail::$struct.name$_f>() +
               sizeof($last(struct.members).typecode.cppTypename$));
        $elseif(struct.inheritance)$
        $if(struct.inheritance.isPlain)$
        return $struct.maxXCDRv1PlainTypeSerializedSize$ULL ==
               (detail::$struct.inheritance.name$_offset_of<$struct.inheritance.name$, detail::$struct.inheritance.name$_f>() +
               sizeof($last(struct.inheritance.members).typecode.cppTypename$));
        $else$
        return true;
        $endif$
        $else$
        return true;
        $endif$
    }

    static constexpr bool is_plain_xcdrv2_impl()
    {
        $if(struct.members)$
        return $struct.maxXCDRv2PlainTypeSerializedSize$ULL ==
               (detail::$struct.name$_offset_of<$struct.name$, detail::$struct.name$_f>() +
               sizeof($last(struct.members).typecode.cppTypename$));
        $elseif(struct.inheritance)$
        $if(struct.inheritance.isPlain)$
        return $struct.maxXCDRv2PlainTypeSerializedSize$ULL ==
               (detail::$struct.inheritance.name$_offset_of<$struct.inheritance.name$, detail::$struct.inheritance.name$_f>() +
               sizeof($last(struct.inheritance.members).typecode.cppTypename$));
        $else$
        return true;
        $endif$
        $else$
        return true;
        $endif$
    }

$endif$
};
>>

//{ Fast DDS-Gen extensions
module_conversion(ctx, parent, modules, definition_list) ::= <<
$modules : { module |
namespace $module.name$ {
}; separator="\n"$

$definition_list$

$reverse(modules) : { module |
\} // namespace $module.name$
}; separator="\n"$
>>
//}
