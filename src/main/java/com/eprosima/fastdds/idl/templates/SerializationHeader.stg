// Copyright 2019 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

group ProtocolHeader;

import "eprosima.stg"

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx,  file=[ctx.filename, "Serialization.h"], description=["This file contains serialization definitions."])$

#ifndef _FAST_DDS_GENERATED_$ctx.headerGuardName$_SERIALIZATION_H_
#define _FAST_DDS_GENERATED_$ctx.headerGuardName$_SERIALIZATION_H_

#include "$ctx.filename$.h"

$definitions; separator="\n"$

extern bool g_$ctx.filename$_test_null_opt;
extern bool g_$ctx.filename$_test_empty_ext;

#endif //_FAST_DDS_GENERATED_$ctx.headerGuardName$_SERIALIZATION_H_
>>

struct_type(ctx, parent, struct, member_list) ::= <<
$member_list$
$if((ctx.generateTypesC))$
void free_string$struct.name$(
        $struct.name$* topic);

$endif$
void print$struct.name$(
        $struct.name$* topic);

void initialize$struct.name$(
        $struct.name$* topic,
        int idx = 0);

int compare$struct.name$(
        $struct.name$* a,
        $struct.name$* b);

$struct.name$ createKey$struct.name$(
        int idx);

>>

member_type(ctx, member, type_member, declarators) ::= <<

$type_member$
$declarators$

>>

union_type(ctx, parent, union, switch_type) ::= <<
$switch_type$
void print$union.name$(
        $union.name$* topic);

void initialize$union.name$(
        $union.name$* topic);

int compare$union.name$(
        $union.name$* a,
        $union.name$* b);

>>

element_type(ctx, element, type_element, declarator) ::= <<

$type_element$
$declarator$

>>

enum_type(ctx, parent, enum) ::= <<>>

typedef_decl(ctx, parent, typedefs, typedefs_type, declarator_type) ::= <<

$declarator_type$
$typedefs_type$

>>

bitmask_type(ctx, parent, bitmask) ::= <<
void print$bitmask.name$(
        $bitmask.name$* topic);

void initialize$bitmask.name$(
        $bitmask.name$* topic);

int compare$bitmask.name$(
        $bitmask.name$* a,
        $bitmask.name$* b);

>>

bitset_type(ctx, parent, bitset) ::= <<
void print$bitset.name$(
        $bitset.name$* topic);

void initialize$bitset.name$(
        $bitset.name$* topic);

int compare$bitset.name$(
        $bitset.name$* a,
        $bitset.name$* b);

>>

annotation(ctx, annotation) ::= <<>>

module(ctx, parent, module, definition_list) ::= <<
namespace $module.name$ {
    $definition_list$
}  // namespace $module.name$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

fwd_decl(ctx, parent, type) ::= <<>>

const_decl(ctx, parent, const, const_type) ::= <<

$const_type$

>>

sequence_type(ctx, sequence, type_sequence) ::= <<

$type_sequence$

>>

map_type(ctx, map, key_type, value_type) ::= <<

$key_type$
$value_type$

>>

string_type(ctx, string) ::= <<>>

wide_string_type(ctx, wstring) ::= <<>>

array_declarator(ctx, array, array_type) ::= <<>>
