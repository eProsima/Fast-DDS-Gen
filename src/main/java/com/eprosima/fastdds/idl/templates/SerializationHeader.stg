// Copyright 2019 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

group ProtocolHeader;

import "eprosima.stg"

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx,  file=[ctx.filename, "Serialization.hpp"], description=["This file contains serialization definitions."])$

#ifndef FAST_DDS_GENERATED__$ctx.headerGuardName$_SERIALIZATION_HPP
#define FAST_DDS_GENERATED__$ctx.headerGuardName$_SERIALIZATION_HPP

#include "$ctx.filename$.hpp"

$definitions; separator="\n"$

extern bool g_$ctx.filename$_test_null_opt;
extern bool g_$ctx.filename$_test_empty_ext;

#endif //FAST_DDS_GENERATED__$ctx.headerGuardName$_SERIALIZATION_HPP
>>

struct_type(ctx, parent, struct, member_list) ::= <<
$member_list$
$if(!struct.declaredInsideInterface)$
$if((ctx.generateTypesC))$
void free_string$struct.name$(
        $struct.name$* topic);

$endif$
void print$struct.name$(
        $struct.name$* topic);

void initialize$struct.name$(
        $struct.name$* topic,
        int idx = 0);

int compare$struct.name$(
        $struct.name$* a,
        $struct.name$* b);

$struct.name$ createKey$struct.name$(
        int idx);
$endif$
>>

union_type(ctx, parent, union, switch_type) ::= <<
$switch_type$
$if(!union.declaredInsideInterface)$
void print$union.name$(
        $union.name$* topic);

void initialize$union.name$(
        $union.name$* topic);

int compare$union.name$(
        $union.name$* a,
        $union.name$* b);
$endif$
>>

bitmask_type(ctx, parent, bitmask) ::= <<
$if(!bitmask.declaredInsideInterface)$
void print$bitmask.name$(
        $bitmask.name$* topic);

void initialize$bitmask.name$(
        $bitmask.name$* topic);

int compare$bitmask.name$(
        $bitmask.name$* a,
        $bitmask.name$* b);
$endif$
>>

bitset_type(ctx, parent, bitset) ::= <<
$if(!bitset.declaredInsideInterface)$
void print$bitset.name$(
        $bitset.name$* topic);

void initialize$bitset.name$(
        $bitset.name$* topic);

int compare$bitset.name$(
        $bitset.name$* a,
        $bitset.name$* b);
$endif$
>>

module(ctx, parent, module, definition_list) ::= <<
namespace $module.name$ {
    $definition_list$
}  // namespace $module.name$
>>
