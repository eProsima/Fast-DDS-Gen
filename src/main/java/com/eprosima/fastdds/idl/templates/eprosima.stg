// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

group eprosima;

fileHeader(ctx, file, description) ::= <<
// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file $file$
 * $description$
 *
 * This file was generated by the tool $ctx.product$gen.
 */
>>

varDel(variable) ::= <<>>

struct_inherit_default_init(parent) ::= <<$parent.scopedname$()>>

struct_inherit_copy_init(parent) ::= <<$parent.scopedname$(x)>>

struct_inherit_move_init(parent) ::= <<$parent.scopedname$(std::move(x))>>

bitset_inherit_default_init(parent) ::= <<$parent.scopedname$()>>

bitset_inherit_copy_init(parent) ::= <<$parent.scopedname$(x)>>

bitset_inherit_move_init(parent) ::= <<$parent.scopedname$(std::move(x))>>

indexName(name, loopvar) ::= <<$name$[$loopvar$]>>

//{ IDL-parser templates
annotation(ctx, annotation) ::= <<>>

array_declarator(ctx, array) ::= <<>>

bitmask_type(ctx, parent, bitmask) ::= <<>>

bitset_type(ctx, parent, bitset, extensions) ::= <<>>

const_decl(ctx, parent, const, const_type) ::= <<
$const_type$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

element_type(ctx, element, type_element, declarator) ::= <<
$type_element$

$declarator$
>>

enum_type(ctx, parent, enum) ::= <<>>

exception(ctx, parent, exception) ::= <<>>

export_list(exports) ::= <<
$exports; separator="\n"$
>>

fwd_decl(ctx, parent, type) ::= <<>>

interface(ctx, parent, interface, export_list) ::= <<
$export_list$
>>

map_type(ctx, map, key_type, value_type) ::= <<
$key_type$

$value_type$
>>

member_type(ctx, member, type_member, declarators) ::= <<
$type_member$

$declarators$
>>

module(ctx, parent, module, definition_list) ::= <<
$definition_list$
>>

operation(ctx, parent, operation, param_list, operation_type) ::= <<
$operation_type$

$param_list$
>>

param_list(parameters) ::= <<>>

param(parameter, parameter_type) ::= <<
$parameter_type$
>>

sequence_type(ctx, sequence, type_sequence) ::= <<
$type_sequence$
>>

string_type(ctx, string) ::= <<>>

struct_type(ctx, parent, struct, member_list) ::= <<
$member_list$
>>

typedef_decl(ctx, parent, typedefs, typedefs_type, declarator_type) ::= <<
$declarator_type$

$typedefs_type$
>>

union_type(ctx, parent, union, extensions, switch_type) ::= <<
$switch_type$
>>

wide_string_type(ctx, wstring) ::= <<>>
//}

//{ Fast DDS-Gen extensions
module_conversion(ctx, parent, modules, definition_list) ::= <<
$definition_list$
>>
//}
