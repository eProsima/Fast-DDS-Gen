// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

group ProtocolHeader;

import "eprosima.stg"

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx,  file=[ctx.filename, "TypeObjectTestingTest.cpp"], description=["This file contains TypeObject test code."])$


#include "iostream"
#include "$ctx.filename$TypeObject.h"
#include <fastrtps/types/TypeObjectFactory.h>
#include <fastrtps/types/TypeNamesGenerator.h>

#include <stdint.h>
#include <inttypes.h>
#include <string.h>
#include <functional>
#include <vector>

using TestLambda = std::function<bool()>;

std::vector<TestLambda> functions_to_run;

int main(void)
{
    srand((unsigned) time(NULL));
    bool ret_value = true;
    
    register$ctx.filename$Types();  

    $definitions; separator="\n"$

    for (auto& fc : functions_to_run)
    {
        ret_value &= fc();
    }
    return ret_value ? 0 : 1;
}

>>


get_type_identifier(ctx, type, relation) ::= <<
    $if(type.isSequenceType)$
    TypeObjectFactory::get_instance()->get_sequence_identifier($get_content_type(ctx=ctx, type=type.contentTypeCode)$, $type.maxsize$, $relation$);
    $elseif(type.isArrayType)$
    TypeObjectFactory::get_instance()->get_array_identifier($get_content_type(ctx=ctx, type=type.contentTypeCode)$, {$type.dimensions:{ dim |$dim$}; separator=", "$}, $relation$);
    $elseif(type.isSetType)$
    TypeObjectFactory::get_instance()->get_sequence_identifier($get_content_type(ctx=ctx, type=type.contentTypeCode)$, $type.maxsize$, $relation$);
    $elseif(type.isMapType)$
    TypeObjectFactory::get_instance()->get_map_identifier($get_content_type(ctx=ctx, type=type.keyTypeCode)$, $get_content_type(ctx=ctx, type=type.valueTypeCode)$, $type.maxsize$, $relation$);
    $elseif(type.isStringType)$
    TypeObjectFactory::get_instance()->get_string_identifier($type.maxsize$, false);
    $elseif(type.isWStringType)$
    TypeObjectFactory::get_instance()->get_string_identifier($type.maxsize$, true);
    $elseif(type.objectType)$
    Get$type.name$Identifier($relation$);
    $elseif(type.plainType)$
    TypeObjectFactory::get_instance()->get_type_identifier("$type.cppTypenameForTypeId$", false);
    $else$
    TypeObjectFactory::get_instance()->get_type_identifier("$type.cppTypenameForTypeId$", false);
    $endif$
>>

get_type_object(ctx, type, relation) ::= <<
    TypeObjectFactory::get_instance()->get_type_object("$type.name$", false);
>>

get_content_type(ctx, type) ::= <<
    $if(type.plainType)$
    $if(type.isSequenceType)$
    TypeNamesGenerator::get_sequence_type_name($get_content_type(ctx=ctx, type=type.contentTypeCode)$, $type.maxsize$)
    $elseif(type.isArrayType)$
    TypeNamesGenerator::get_array_type_name($get_content_type(ctx=ctx, type=type.contentTypeCode)$, {$type.dimensions:{ dim |$dim$}; separator=", "$})
    $elseif(type.isSetType)$
    TypeNamesGenerator::get_sequence_type_name($get_content_type(ctx=ctx, type=type.contentTypeCode)$, $type.maxsize$)
    $elseif(type.isMapType)$
    TypeNamesGenerator::get_map_type_name($get_content_type(ctx=ctx, type=type.keyTypeCode)$, $get_content_type(ctx=ctx, type=type.valueTypeCode)$, $type.maxsize$)
    $elseif(type.isStringType)$
    TypeNamesGenerator::get_string_type_name($type.maxsize$, false)
    $elseif(type.isWStringType)$
    TypeNamesGenerator::get_string_type_name($type.maxsize$, true)
    $else$
    "$type.cppTypenameForTypeId$"
    $endif$
    $else$
    "$type.cppTypenameForTypeId$"
    $endif$
>>


check_alias_type(ctx, typedefs, relation) ::= <<
    const TypeIdentifier* $typedefs.name$_$if(relation)$complete$else$minimal$endif$_type_identifier = Get$typedefs.name$Identifier($relation$);
    result &= $typedefs.name$_$if(relation)$complete$else$minimal$endif$_type_identifier != nullptr;
    result &= $typedefs.name$_$if(relation)$complete$else$minimal$endif$_type_identifier->_d() == EK_$if(relation)$COMPLETE$else$MINIMAL$endif$;

    const TypeObject* $typedefs.name$_$if(relation)$complete$else$minimal$endif$_typeobject = Get$typedefs.name$Object($relation$);
    result &= $typedefs.name$_$if(relation)$complete$else$minimal$endif$_typeobject != nullptr;
    result &= $typedefs.name$_$if(relation)$complete$else$minimal$endif$_typeobject->_d() == EK_$if(relation)$COMPLETE$else$MINIMAL$endif$;

    $if(relation)$Complete$else$Minimal$endif$TypeObject $typedefs.name$_$if(relation)$complete$else$minimal$endif$_object = $typedefs.name$_$if(relation)$complete$else$minimal$endif$_typeobject->$if(relation)$complete$else$minimal$endif$();
    result &= $typedefs.name$_$if(relation)$complete$else$minimal$endif$_object._d() == TK_ALIAS;

    $if(relation)$Complete$else$Minimal$endif$AliasType $typedefs.name$_$if(relation)$complete$else$minimal$endif$_typedefs = $typedefs.name$_$if(relation)$complete$else$minimal$endif$_object.alias_type();
    AliasTypeFlag $typedefs.name$_$if(relation)$complete$else$minimal$endif$_flags = $typedefs.name$_$if(relation)$complete$else$minimal$endif$_typedefs.alias_flags();// Unused. No flags apply
    $if(relation)$Complete$else$Minimal$endif$AliasHeader $typedefs.name$_$if(relation)$complete$else$minimal$endif$_header = $typedefs.name$_$if(relation)$complete$else$minimal$endif$_typedefs.header();// Empty. Available for future extension

    $if(relation)$
    $if(relation)$Complete$else$Minimal$endif$TypeDetail $typedefs.name$_$if(relation)$complete$else$minimal$endif$_header_details = $typedefs.name$_$if(relation)$complete$else$minimal$endif$_header.detail();
    //@optional AppliedBuiltinTypeAnnotations ann_builtin;?????
    //@optional AppliedAnnotationSeq ann_custom;?????
    QualifiedTypeName $typedefs.name$_$if(relation)$complete$else$minimal$endif$_header_details_type_name = $typedefs.name$_$if(relation)$complete$else$minimal$endif$_header_details.type_name();
    result &= $typedefs.name$_$if(relation)$complete$else$minimal$endif$_header_details_type_name == "$typedefs.name$";
    $endif$

    $if(relation)$Complete$else$Minimal$endif$AliasBody $typedefs.name$_$if(relation)$complete$else$minimal$endif$_body = $typedefs.name$_$if(relation)$complete$else$minimal$endif$_typedefs.body();
    CommonAliasBody $typedefs.name$_$if(relation)$complete$else$minimal$endif$_common_alias_body = $typedefs.name$_$if(relation)$complete$else$minimal$endif$_body.common();
    AliasMemberFlag $typedefs.name$_$if(relation)$complete$else$minimal$endif$_related_flags = $typedefs.name$_$if(relation)$complete$else$minimal$endif$_common_alias_body.related_flags();// Unused. No flags apply

    $if(relation)$
    //@optional AppliedBuiltinMemberAnnotations ann_builtin;?????
    //@optional AppliedAnnotationSeq ann_custom;?????
    $endif$
>>

check_alias_related_type(ctx, typedefs, relation) ::= <<
    //=====check_alias_related_type - $if(relation)$complete$else$minimal$endif$ - $typedefs.name$=====
    $if (typedefs.typedefContentTypeCode.isAliasType)$
        //=====typedefs.typedefContentTypeCode.isAliasType=====
        $check_alias_related_type(ctx=ctx, typedefs=typedefs.typedefContentTypeCode, relation=relation)$
    $else$
    {
        const TypeIdentifier $typedefs.name$_$if(relation)$complete$else$minimal$endif$_content_type = *$get_type_identifier(ctx=ctx, type=typedefs.typedefContentTypeCode, relation=relation)$
        TypeIdentifier $typedefs.name$_$if(relation)$complete$else$minimal$endif$_related_type = Get$typedefs.name$Object($relation$)->$if(relation)$complete$else$minimal$endif$().alias_type().body().common().related_type();

        result &= $typedefs.name$_$if(relation)$complete$else$minimal$endif$_related_type._d() == $typedefs.name$_$if(relation)$complete$else$minimal$endif$_content_type._d();
    }
    $endif$
>>

check_struct_type(ctx, struct, relation) ::= <<
    const TypeIdentifier* $struct.name$_$if(relation)$complete$else$minimal$endif$_type_identifier = Get$struct.name$Identifier($relation$);
    result &= $struct.name$_$if(relation)$complete$else$minimal$endif$_type_identifier != nullptr;
    result &= $struct.name$_$if(relation)$complete$else$minimal$endif$_type_identifier->_d() == EK_$if(relation)$COMPLETE$else$MINIMAL$endif$;

    const TypeObject* $struct.name$_$if(relation)$complete$else$minimal$endif$_typeobject = Get$struct.name$Object($relation$);
    result &= $struct.name$_$if(relation)$complete$else$minimal$endif$_typeobject != nullptr;
    result &= $struct.name$_$if(relation)$complete$else$minimal$endif$_typeobject->_d() == EK_$if(relation)$COMPLETE$else$MINIMAL$endif$;

    $if(relation)$Complete$else$Minimal$endif$TypeObject $struct.name$_$if(relation)$complete$else$minimal$endif$_object = $struct.name$_$if(relation)$complete$else$minimal$endif$_typeobject->$if(relation)$complete$else$minimal$endif$();
    result &= $struct.name$_$if(relation)$complete$else$minimal$endif$_object._d() == TK_STRUCTURE;

    $if(relation)$Complete$else$Minimal$endif$StructType $struct.name$_$if(relation)$complete$else$minimal$endif$_struct = $struct.name$_$if(relation)$complete$else$minimal$endif$_object.struct_type();
    result &= $struct.name$_$if(relation)$complete$else$minimal$endif$_struct.struct_flags().IS_FINAL() == $struct.annotationFinal$;
    result &= $struct.name$_$if(relation)$complete$else$minimal$endif$_struct.struct_flags().IS_APPENDABLE() == $struct.annotationAppendable$;
    result &= $struct.name$_$if(relation)$complete$else$minimal$endif$_struct.struct_flags().IS_MUTABLE() == $struct.annotationMutable$;
    result &= $struct.name$_$if(relation)$complete$else$minimal$endif$_struct.struct_flags().IS_NESTED() == $struct.annotationNested$;
    result &= $struct.name$_$if(relation)$complete$else$minimal$endif$_struct.struct_flags().IS_AUTOID_HASH() == false; // Unsupported

    $if(relation)$Complete$else$Minimal$endif$StructHeader $struct.name$_$if(relation)$complete$else$minimal$endif$_header = $struct.name$_$if(relation)$complete$else$minimal$endif$_struct.header();
    $if(relation)$
    $if(relation)$Complete$else$Minimal$endif$TypeDetail $struct.name$_$if(relation)$complete$else$minimal$endif$_header_detail = $struct.name$_$if(relation)$complete$else$minimal$endif$_header.detail();
    //@optional AppliedBuiltinTypeAnnotations ann_builtin;?????
    //@optional AppliedAnnotationSeq ann_custom;?????
    result &= $struct.name$_$if(relation)$complete$else$minimal$endif$_header_detail.type_name() == "$struct.name$";
    $else$
    //result &= $struct.name$_$if(relation)$complete$else$minimal$endif$_header.detail().type_name() == ""; // Empty. Available for future extension
    $endif$

    $if(relation)$Complete$else$Minimal$endif$StructMemberSeq $struct.name$_$if(relation)$complete$else$minimal$endif$_memberseq = $struct.name$_$if(relation)$complete$else$minimal$endif$_struct.member_seq();
>>

check_struct_member_type(ctx, member, relation) ::= <<
    $if(relation)$Complete$else$Minimal$endif$StructMember $struct.name$_$if(relation)$complete$else$minimal$endif$_$member.name$ = $struct.name$_$if(relation)$complete$else$minimal$endif$_memberseq.at(memberId);
    CommonStructMember $struct.name$_$if(relation)$complete$else$minimal$endif$_common_$member.name$_struct_member = $struct.name$_$if(relation)$complete$else$minimal$endif$_$member.name$.common();
    $if(relation)$Complete$else$Minimal$endif$MemberDetail $struct.name$_$if(relation)$complete$else$minimal$endif$_common_$member.name$_struct_member_detail = $struct.name$_$if(relation)$complete$else$minimal$endif$_$member.name$.detail();
    $if(relation)$
    MemberName $struct.name$_$if(relation)$complete$else$minimal$endif$_common_$member.name$_struct_member_name = $struct.name$_$if(relation)$complete$else$minimal$endif$_common_$member.name$_struct_member_detail.name();
    result &= $struct.name$_$if(relation)$complete$else$minimal$endif$_common_$member.name$_struct_member_name == "$member.name$";
    //@optional AppliedBuiltinMemberAnnotations ann_builtin;?????
    //@optional AppliedAnnotationSeq ann_custom;?????
    $else$
    NameHash $struct.name$_$if(relation)$complete$else$minimal$endif$_common_$member.name$_struct_member_name_hash = $struct.name$_$if(relation)$complete$else$minimal$endif$_common_$member.name$_struct_member_detail.name_hash();
    $endif$
    result &= $struct.name$_$if(relation)$complete$else$minimal$endif$_common_$member.name$_struct_member.member_id() == memberId;
    result &= $struct.name$_$if(relation)$complete$else$minimal$endif$_common_$member.name$_struct_member.member_flags().TRY_CONSTRUCT1() == false; // Unsupported
    result &= $struct.name$_$if(relation)$complete$else$minimal$endif$_common_$member.name$_struct_member.member_flags().TRY_CONSTRUCT2() == false; // Unsupported
    result &= $struct.name$_$if(relation)$complete$else$minimal$endif$_common_$member.name$_struct_member.member_flags().IS_EXTERNAL() == false; // Unsupported
    result &= $struct.name$_$if(relation)$complete$else$minimal$endif$_common_$member.name$_struct_member.member_flags().IS_OPTIONAL() == $member.annotationOptional$;
    result &= $struct.name$_$if(relation)$complete$else$minimal$endif$_common_$member.name$_struct_member.member_flags().IS_MUST_UNDERSTAND() == $member.annotationMustUnderstand$;
    result &= $struct.name$_$if(relation)$complete$else$minimal$endif$_common_$member.name$_struct_member.member_flags().IS_KEY() == $member.annotationKey$;

    $if (member.typecode.isAliasType)$
        //=====member.typecode.isAliasType=====
        $check_alias_related_type(ctx=ctx, typedefs=member.typecode, relation=relation)$
    $elseif (member.typecode.PrimitiveType)$
        //=====member.typecode.PrimitiveType=====
        const TypeIdentifier $struct.name$_$if(relation)$complete$else$minimal$endif$_$member.name$_content_type = *$get_type_identifier(ctx=ctx, type=member.typecode, relation=relation)$
        result &= $struct.name$_$if(relation)$complete$else$minimal$endif$_common_$member.name$_struct_member.member_type_id()._d() == $struct.name$_$if(relation)$complete$else$minimal$endif$_$member.name$_content_type._d();
    $elseif (member.typecode.isStringType)$
        //=====member.typecode.isStringType=====
        const TypeIdentifier $struct.name$_$if(relation)$complete$else$minimal$endif$_$member.name$_content_type = *$get_type_identifier(ctx=ctx, type=member.typecode, relation=relation)$
        result &= $struct.name$_$if(relation)$complete$else$minimal$endif$_common_$member.name$_struct_member.member_type_id()._d() == $struct.name$_$if(relation)$complete$else$minimal$endif$_$member.name$_content_type._d();

        if($member.typecode.maxsize$ <= 255){
            result &= $struct.name$_$if(relation)$complete$else$minimal$endif$_$member.name$_content_type.string_sdefn().bound() == $member.typecode.maxsize$;
        }else{
            result &= $struct.name$_$if(relation)$complete$else$minimal$endif$_$member.name$_content_type.string_ldefn().bound() == $member.typecode.maxsize$;
        }
    $elseif (member.typecode.isWStringType)$
        //=====member.typecode.isWStringType=====
        const TypeIdentifier $struct.name$_$if(relation)$complete$else$minimal$endif$_$member.name$_content_type = *$get_type_identifier(ctx=ctx, type=member.typecode, relation=relation)$
        result &= $struct.name$_$if(relation)$complete$else$minimal$endif$_common_$member.name$_struct_member.member_type_id()._d() == $struct.name$_$if(relation)$complete$else$minimal$endif$_$member.name$_content_type._d();

        if($member.typecode.maxsize$ <= 255){
            result &= $struct.name$_$if(relation)$complete$else$minimal$endif$_$member.name$_content_type.string_sdefn().bound() == $member.typecode.maxsize$;
        }else{
            result &= $struct.name$_$if(relation)$complete$else$minimal$endif$_$member.name$_content_type.string_ldefn().bound() == $member.typecode.maxsize$;
        }
    $elseif (member.typecode.isStructType)$
        //=====member.typecode.isStructType=====
        $check_struct_type(ctx=ctx, struct=member, relation=relation)$
    $elseif (member.typecode.isArrayType)$
        //=====member.typecode.isArrayType=====
        $check_array_type(ctx=ctx, array=member, relation=relation)$
    $elseif (member.typecode.isSequenceType)$
        //=====member.typecode.isSequenceType=====
        $check_sequence_type(ctx=ctx, sequence=member, relation=relation)$
    $elseif (member.typecode.isMapType)$
        //=====member.typecode.isSequenceType=====
        $check_map_type(ctx=ctx, map=member, relation=relation)$
    $elseif (member.typecode.isUnionType)$
        //=====member.typecode.isUnionType=====
    $else$
        //check_struct_member_type UKNOWN TYPE
        std::cout << std::endl << "======================================== Testing struct: $member.typecode$ ========================================" << std::endl;
    memberId = 99;

    $endif$

    memberId++;
>>

check_union_type(ctx, union, relation) ::= <<
    const TypeIdentifier* $union.name$_$if(relation)$complete$else$minimal$endif$_type_identifier = Get$union.name$Identifier($relation$);
    result &= $union.name$_$if(relation)$complete$else$minimal$endif$_type_identifier != nullptr;
    result &= $union.name$_$if(relation)$complete$else$minimal$endif$_type_identifier->_d() == EK_$if(relation)$COMPLETE$else$MINIMAL$endif$;

    const TypeObject* $union.name$_$if(relation)$complete$else$minimal$endif$_typeobject = Get$union.name$Object($relation$);
    result &= $union.name$_$if(relation)$complete$else$minimal$endif$_typeobject != nullptr;
    result &= $union.name$_$if(relation)$complete$else$minimal$endif$_typeobject->_d() == EK_$if(relation)$COMPLETE$else$MINIMAL$endif$;

    $if(relation)$Complete$else$Minimal$endif$TypeObject $union.name$_$if(relation)$complete$else$minimal$endif$_object = $union.name$_$if(relation)$complete$else$minimal$endif$_typeobject->$if(relation)$complete$else$minimal$endif$();
    result &= $union.name$_$if(relation)$complete$else$minimal$endif$_object._d() == TK_UNION;

    $if(relation)$Complete$else$Minimal$endif$UnionType $union.name$_$if(relation)$complete$else$minimal$endif$_union = $union.name$_$if(relation)$complete$else$minimal$endif$_object.union_type();
    result &= $union.name$_$if(relation)$complete$else$minimal$endif$_union.union_flags().IS_FINAL() == $union.annotationFinal$;
    result &= $union.name$_$if(relation)$complete$else$minimal$endif$_union.union_flags().IS_APPENDABLE() == $union.annotationAppendable$;
    result &= $union.name$_$if(relation)$complete$else$minimal$endif$_union.union_flags().IS_MUTABLE() == $union.annotationMutable$;
    result &= $union.name$_$if(relation)$complete$else$minimal$endif$_union.union_flags().IS_NESTED() == $union.annotationNested$;
    result &= $union.name$_$if(relation)$complete$else$minimal$endif$_union.union_flags().IS_AUTOID_HASH() == false; // Unsupported

    $if(relation)$Complete$else$Minimal$endif$UnionHeader $union.name$_$if(relation)$complete$else$minimal$endif$_header = $union.name$_$if(relation)$complete$else$minimal$endif$_union.header();
    $if(relation)$
    $if(relation)$Complete$else$Minimal$endif$TypeDetail $union.name$_$if(relation)$complete$else$minimal$endif$_header_detail = $union.name$_$if(relation)$complete$else$minimal$endif$_header.detail();
    //@optional AppliedBuiltinTypeAnnotations ann_builtin;?????
    //@optional AppliedAnnotationSeq ann_custom;?????
    result &= $union.name$_$if(relation)$complete$else$minimal$endif$_header_detail.type_name() == "$union.name$";
    $else$
    //result &= $union.name$_$if(relation)$complete$else$minimal$endif$_header.detail().type_name() == ""; // Empty. Available for future extension
    $endif$

    $if(relation)$Complete$else$Minimal$endif$DiscriminatorMember $union.name$_$if(relation)$complete$else$minimal$endif$_discriminator = $union.name$_$if(relation)$complete$else$minimal$endif$_union.discriminator();

    CommonDiscriminatorMember $union.name$_$if(relation)$complete$else$minimal$endif$_discriminator_common = $union.name$_$if(relation)$complete$else$minimal$endif$_discriminator.common();
    //result &= $union.name$_$if(relation)$complete$else$minimal$endif$_discriminator_common.member_flags().TRY_CONSTRUCT1() == $union.discriminator.annotationTryConstruct1$;
    //result &= $union.name$_$if(relation)$complete$else$minimal$endif$_discriminator_common.member_flags().TRY_CONSTRUCT2() == $union.discriminator.annotationTryConstruct2$;
    //result &= $union.name$_$if(relation)$complete$else$minimal$endif$_discriminator_common.member_flags().IS_KEY() == $union.discriminator.annotationKey$;

    //TypeIdentifier type_id;?????
    $if(relation)$
    //@optional AppliedBuiltinTypeAnnotations ann_builtin;?????
    //@optional AppliedAnnotationSeq ann_custom;?????
    $endif$

    $if(relation)$Complete$else$Minimal$endif$UnionMemberSeq $union.name$_$if(relation)$complete$else$minimal$endif$_memberseq = $union.name$_$if(relation)$complete$else$minimal$endif$_union.member_seq();
>>

check_union_member_type(ctx, member, relation) ::= <<
    $if(relation)$Complete$else$Minimal$endif$UnionMember $union.name$_$if(relation)$complete$else$minimal$endif$_$member.name$_member = $union.name$_$if(relation)$complete$else$minimal$endif$_memberseq.at(memberId);
    CommonUnionMember $union.name$_$if(relation)$complete$else$minimal$endif$_common_$member.name$_common = $union.name$_$if(relation)$complete$else$minimal$endif$_$member.name$_member.common();

    MemberId $union.name$_$if(relation)$complete$else$minimal$endif$_common_$member.name$_memberid = $union.name$_$if(relation)$complete$else$minimal$endif$_common_$member.name$_common.member_id();
    result &= $union.name$_$if(relation)$complete$else$minimal$endif$_common_$member.name$_memberid == memberId;
    UnionMemberFlag $union.name$_$if(relation)$complete$else$minimal$endif$_common_$member.name$_memberflags = $union.name$_$if(relation)$complete$else$minimal$endif$_common_$member.name$_common.member_flags();
    //result &= $union.name$_$if(relation)$complete$else$minimal$endif$_common_$member.name$_memberflags.TRY_CONSTRUCT1() == $member.annotationTryConstruct1$;?????
    //result &= $union.name$_$if(relation)$complete$else$minimal$endif$_common_$member.name$_memberflags.TRY_CONSTRUCT2() == $member.annotationTryConstruct2$;?????
    //result &= $union.name$_$if(relation)$complete$else$minimal$endif$_common_$member.name$_memberflags.IS_EXTERNAL() == $member.annotationExternal$;?????
    result &= $union.name$_$if(relation)$complete$else$minimal$endif$_common_$member.name$_memberflags.IS_DEFAULT() == $member.annotationDefault$;
    
    TypeIdentifier $union.name$_$if(relation)$complete$else$minimal$endif$_common_$member.name$_membertypeid = $union.name$_$if(relation)$complete$else$minimal$endif$_common_$member.name$_common.type_id();

    UnionCaseLabelSeq $union.name$_$if(relation)$complete$else$minimal$endif$_common_$member.name$_memberlabelseq = $union.name$_$if(relation)$complete$else$minimal$endif$_common_$member.name$_common.label_seq();

    $if(relation)$Complete$else$Minimal$endif$MemberDetail $union.name$_$if(relation)$complete$else$minimal$endif$_$member.name$_detail = $union.name$_$if(relation)$complete$else$minimal$endif$_$member.name$_member.detail();
    $if(relation)$
    result &= $union.name$_$if(relation)$complete$else$minimal$endif$_$member.name$_detail.name() == "$member.name$";
    //@optional AppliedBuiltinTypeAnnotations ann_builtin;?????
    //@optional AppliedAnnotationSeq ann_custom;?????
    $else$
    NameHash $union.name$_$if(relation)$complete$else$minimal$endif$_$member.name$_name_hash = $union.name$_$if(relation)$complete$else$minimal$endif$_$member.name$_detail.name_hash();
    $endif$

    memberId++;
>>

check_enum_type(ctx, enum, relation) ::= <<
    //=====check_enum_type - $if(relation)$complete$else$minimal$endif$ - $enum.name$=====
    const TypeIdentifier* $enum.name$_$if(relation)$complete$else$minimal$endif$_type_identifier = Get$enum.name$Identifier($relation$);
    result &= $enum.name$_$if(relation)$complete$else$minimal$endif$_type_identifier != nullptr;
    result &= $enum.name$_$if(relation)$complete$else$minimal$endif$_type_identifier->_d() == EK_$if(relation)$COMPLETE$else$MINIMAL$endif$;

    const TypeObject* $enum.name$_$if(relation)$complete$else$minimal$endif$_typeobject = Get$enum.name$Object($relation$);
    result &= $enum.name$_$if(relation)$complete$else$minimal$endif$_typeobject != nullptr;
    result &= $enum.name$_$if(relation)$complete$else$minimal$endif$_typeobject->_d() == EK_$if(relation)$COMPLETE$else$MINIMAL$endif$;

    $if(relation)$Complete$else$Minimal$endif$TypeObject $enum.name$_$if(relation)$complete$else$minimal$endif$_object = $enum.name$_$if(relation)$complete$else$minimal$endif$_typeobject->$if(relation)$complete$else$minimal$endif$();
    result &= $enum.name$_$if(relation)$complete$else$minimal$endif$_object._d() == TK_ENUM;

    $if(relation)$Complete$else$Minimal$endif$EnumeratedType $enum.name$_$if(relation)$complete$else$minimal$endif$_enum = $enum.name$_$if(relation)$complete$else$minimal$endif$_object.enumerated_type();
    //EnumTypeFlag; // Unused. No flags apply

    $if(relation)$Complete$else$Minimal$endif$EnumeratedHeader $enum.name$_$if(relation)$complete$else$minimal$endif$_header = $enum.name$_$if(relation)$complete$else$minimal$endif$_enum.header();

    CommonEnumeratedHeader $enum.name$_$if(relation)$complete$else$minimal$endif$_commonheader = $enum.name$_$if(relation)$complete$else$minimal$endif$_header.common();
    //$enum.name$_$if(relation)$complete$else$minimal$endif$_commonheader.bit_bound()??????
    $if(relation)$
    CompleteTypeDetail $enum.name$_$if(relation)$complete$else$minimal$endif$_header_detail = $enum.name$_$if(relation)$complete$else$minimal$endif$_header.detail();
    //@optional AppliedBuiltinTypeAnnotations ann_builtin;?????
    //@optional AppliedAnnotationSeq ann_custom;?????
    QualifiedTypeName $enum.name$_$if(relation)$complete$else$minimal$endif$_header_detail_type_name = $enum.name$_$if(relation)$complete$else$minimal$endif$_header_detail.type_name();
    result &= $enum.name$_$if(relation)$complete$else$minimal$endif$_header_detail_type_name == "$enum.name$";
    $endif$

    $if(relation)$Complete$else$Minimal$endif$EnumeratedLiteralSeq $enum.name$_$if(relation)$complete$else$minimal$endif$_literalseq = $enum.name$_$if(relation)$complete$else$minimal$endif$_enum.literal_seq();
>>

check_enum_literal_type(ctx, literal, relation) ::= <<
    $if(relation)$Complete$else$Minimal$endif$EnumeratedLiteral $enum.name$_$if(relation)$complete$else$minimal$endif$_$literal.name$ = $enum.name$_$if(relation)$complete$else$minimal$endif$_literalseq.at(literalId);
    CommonEnumeratedLiteral $enum.name$_$if(relation)$complete$else$minimal$endif$_common_$literal.name$_enum_literal = $enum.name$_$if(relation)$complete$else$minimal$endif$_$literal.name$.common();
    
    long $enum.name$_$if(relation)$complete$else$minimal$endif$_common_$literal.name$_enum_literal_value = $enum.name$_$if(relation)$complete$else$minimal$endif$_common_$literal.name$_enum_literal.value();
    result &= $enum.name$_$if(relation)$complete$else$minimal$endif$_common_$literal.name$_enum_literal.value() == literalId;
    
    EnumeratedLiteralFlag $enum.name$_$if(relation)$complete$else$minimal$endif$_common_$literal.name$_enum_flags = $enum.name$_$if(relation)$complete$else$minimal$endif$_common_$literal.name$_enum_literal.flags();
    result &= $enum.name$_$if(relation)$complete$else$minimal$endif$_common_$literal.name$_enum_flags.IS_DEFAULT() == $literal.annotationDefault$;

    $if(relation)$Complete$else$Minimal$endif$MemberDetail $enum.name$_$if(relation)$complete$else$minimal$endif$_common_$literal.name$_enum_literal_detail = $enum.name$_$if(relation)$complete$else$minimal$endif$_$literal.name$.detail();
    $if(relation)$
    MemberName $enum.name$_$if(relation)$complete$else$minimal$endif$_common_$literal.name$_enum_literal_name = $enum.name$_$if(relation)$complete$else$minimal$endif$_common_$literal.name$_enum_literal_detail.name();
    result &= $enum.name$_$if(relation)$complete$else$minimal$endif$_common_$literal.name$_enum_literal_name == "$literal.name$";
    //@optional AppliedBuiltinLiteralAnnotations ann_builtin;?????
    //@optional AppliedAnnotationSeq ann_custom;?????
    $else$
    NameHash $enum.name$_$if(relation)$complete$else$minimal$endif$_common_$literal.name$_enum_literal_name_hash = $enum.name$_$if(relation)$complete$else$minimal$endif$_common_$literal.name$_enum_literal_detail.name_hash();
    $endif$

    literalId++;
>>

check_bitmask_type(ctx, bitmask, relation) ::= <<
>>

check_bitset_type(ctx, bitset, relation) ::= <<
>>

check_annotation_type(ctx, annotation, relation) ::= <<
    const TypeIdentifier* $annotation.name$_$if(relation)$complete$else$minimal$endif$_type_identifier = Get$annotation.name$Identifier($relation$);
    result &= $annotation.name$_$if(relation)$complete$else$minimal$endif$_type_identifier != nullptr;
    result &= $annotation.name$_$if(relation)$complete$else$minimal$endif$_type_identifier->_d() == EK_$if(relation)$COMPLETE$else$MINIMAL$endif$;

    const TypeObject* $annotation.name$_$if(relation)$complete$else$minimal$endif$_typeobject = Get$annotation.name$Object($relation$);
    result &= $annotation.name$_$if(relation)$complete$else$minimal$endif$_typeobject != nullptr;
    result &= $annotation.name$_$if(relation)$complete$else$minimal$endif$_typeobject->_d() == EK_$if(relation)$COMPLETE$else$MINIMAL$endif$;

    $if(relation)$Complete$else$Minimal$endif$TypeObject $annotation.name$_$if(relation)$complete$else$minimal$endif$_object = $annotation.name$_$if(relation)$complete$else$minimal$endif$_typeobject->$if(relation)$complete$else$minimal$endif$();
    result &= $annotation.name$_$if(relation)$complete$else$minimal$endif$_object._d() == TK_ANNOTATION;

    $if(relation)$Complete$else$Minimal$endif$AnnotationType $annotation.name$_$if(relation)$complete$else$minimal$endif$_annotation = $annotation.name$_$if(relation)$complete$else$minimal$endif$_object.annotation_type();
    AnnotationTypeFlag $annotation.name$_$if(relation)$complete$else$minimal$endif$_annotation_flags = $annotation.name$_$if(relation)$complete$else$minimal$endif$_annotation.annotation_flag();// Unused. No flags apply

    $if(relation)$Complete$else$Minimal$endif$AnnotationHeader $annotation.name$_$if(relation)$complete$else$minimal$endif$_header = $annotation.name$_$if(relation)$complete$else$minimal$endif$_annotation.header();
    $if(relation)$
    QualifiedTypeName $annotation.name$_$if(relation)$complete$else$minimal$endif$_name = $annotation.name$_$if(relation)$complete$else$minimal$endif$_header.annotation_name();
    result &= $annotation.name$_$if(relation)$complete$else$minimal$endif$_name == "$annotation.name$";

    $endif$

    $if(relation)$Complete$else$Minimal$endif$AnnotationParameterSeq $annotation.name$_$if(relation)$complete$else$minimal$endif$_memberseq = $annotation.name$_$if(relation)$complete$else$minimal$endif$_annotation.member_seq();
>>

check_annotation_member_type(ctx, parameter, relation) ::= <<
    $if(relation)$Complete$else$Minimal$endif$AnnotationParameter $parameter.name$_$if(relation)$complete$else$minimal$endif$_$parameter.name$ = $annotation.name$_$if(relation)$complete$else$minimal$endif$_memberseq.at(memberId);
    CommonAnnotationParameter $parameter.name$_$if(relation)$complete$else$minimal$endif$_common_$parameter.name$_parameter_member = $parameter.name$_$if(relation)$complete$else$minimal$endif$_$parameter.name$.common();
    //AnnotationParameterFlag member_flags;// Unused. No flags apply
    //TypeIdentifier member_type_id;?????

    $if(relation)$
    MemberName $parameter.name$_$if(relation)$complete$else$minimal$endif$_$parameter.name$_name = $parameter.name$_$if(relation)$complete$else$minimal$endif$_$parameter.name$.name();
    result &= $parameter.name$_$if(relation)$complete$else$minimal$endif$_$parameter.name$_name == "$parameter.name$";
    $else$
    //NameHash $parameter.name$_$if(relation)$complete$else$minimal$endif$_$parameter.name$_namehash = $parameter.name$_$if(relation)$complete$else$minimal$endif$_$parameter.name$.name_hash();?????
    //result &= $parameter.name$_$if(relation)$complete$else$minimal$endif$_$parameter.name$_namehash == "$parameter.name$";?????
    $endif$

    AnnotationParameterValue $parameter.name$_$if(relation)$complete$else$minimal$endif$_$parameter.name$_default_value = $parameter.name$_$if(relation)$complete$else$minimal$endif$_$parameter.name$.default_value();
    memberId++;
>>

check_const_type(ctx, const, relation) ::= <<
    const TypeIdentifier $const.name$_$if(relation)$complete$else$minimal$endif$_type = *$get_type_identifier(ctx=ctx, type=const.typeCode, relation=relation)$
>>

check_array_type(ctx, array, relation) ::= <<
    const TypeIdentifier $array.name$_$if(relation)$complete$else$minimal$endif$_type_identifier = *$get_type_identifier(ctx=ctx, type=member.typecode, relation=relation)$
    /*
    result &= $array.name$_$if(relation)$complete$else$minimal$endif$_common_$member.name$_array_member.member_type_id()._d() == $array.name$_$if(relation)$complete$else$minimal$endif$_type_identifier._d();
    result &= $array.name$_$if(relation)$complete$else$minimal$endif$_type_identifier._d() == EK_$if(relation)$COMPLETE$else$MINIMAL$endif$;

    const TypeObject* $array.name$_$if(relation)$complete$else$minimal$endif$_typeobject = $get_type_object(ctx=ctx, type=array, relation=relation)$
    result &= $array.name$_$if(relation)$complete$else$minimal$endif$_typeobject != nullptr;
    result &= $array.name$_$if(relation)$complete$else$minimal$endif$_typeobject->_d() == EK_$if(relation)$COMPLETE$else$MINIMAL$endif$;

    $if(relation)$Complete$else$Minimal$endif$TypeObject $array.name$_$if(relation)$complete$else$minimal$endif$_object = $array.name$_$if(relation)$complete$else$minimal$endif$_typeobject->$if(relation)$complete$else$minimal$endif$();
    result &= $array.name$_$if(relation)$complete$else$minimal$endif$_object._d() == TK_ARRAY;

    $if(relation)$Complete$else$Minimal$endif$ArrayType $array.name$_$if(relation)$complete$else$minimal$endif$_array = $array.name$_$if(relation)$complete$else$minimal$endif$_object.array_type();
    CollectionTypeFlag $array.name$_$if(relation)$complete$else$minimal$endif$_flags = $array.name$_$if(relation)$complete$else$minimal$endif$_array .collection_flag();// Unused. No flags apply
    
    $if(relation)$Complete$else$Minimal$endif$ArrayHeader $array.name$_$if(relation)$complete$else$minimal$endif$_header = $array.name$_$if(relation)$complete$else$minimal$endif$_array.header();// Empty. Available for future extension

    $if(relation)$
    $if(relation)$Complete$else$Minimal$endif$TypeDetail $array.name$_$if(relation)$complete$else$minimal$endif$_detail = $array.name$_$if(relation)$complete$else$minimal$endif$_header.detail();
    //@optional AppliedBuiltinTypeAnnotations ann_builtin;?????
    //@optional AppliedAnnotationSeq ann_custom;?????
    result &= $array.name$_$if(relation)$complete$else$minimal$endif$_header.type_name() == "$array.name$";
    $else$
    //result &= $array.name$_$if(relation)$complete$else$minimal$endif$_header.detail().type_name() == ""; // Empty. Available for future extension
    $endif$

    $if(relation)$Complete$else$Minimal$endif$CollectionElement $array.name$_$if(relation)$complete$else$minimal$endif$_collection_element = $array.name$_$if(relation)$complete$else$minimal$endif$_array .element();
    CommonCollectionElement $array.name$_$if(relation)$complete$else$minimal$endif$_common_element = $array.name$_$if(relation)$complete$else$minimal$endif$_collection_element.common();
    $if(relation)$
    $if(relation)$Complete$else$Minimal$endif$ElementDetail $array.name$_$if(relation)$complete$else$minimal$endif$_element_details = $array.name$_$if(relation)$complete$else$minimal$endif$_collection_element.detail();
    //@optional AppliedBuiltinTypeAnnotations ann_builtin;?????
    //@optional AppliedAnnotationSeq ann_custom;?????
    $endif$

    */

    int $array.name$_$if(relation)$complete$else$minimal$endif$_totalsize = $member.typecode.dimensions:{ dim | $dim$}; separator=" + "$;
    
    if($array.name$_$if(relation)$complete$else$minimal$endif$_totalsize <= 100){
        SBoundSeq $array.name$_$if(relation)$complete$else$minimal$endif$_s_bound_seq;
        $member.typecode.dimensions:{ dim | $array.name$_$if(relation)$complete$else$minimal$endif$_s_bound_seq.push_back($dim$);}; separator="\n"$
        result &= $array.name$_$if(relation)$complete$else$minimal$endif$_type_identifier.array_sdefn().array_bound_seq() == $array.name$_$if(relation)$complete$else$minimal$endif$_s_bound_seq;
    }else{
        LBoundSeq $array.name$_$if(relation)$complete$else$minimal$endif$_l_bound_seq;
        $member.typecode.dimensions:{ dim | $array.name$_$if(relation)$complete$else$minimal$endif$_l_bound_seq.push_back($dim$);}; separator="\n"$
        result &= $array.name$_$if(relation)$complete$else$minimal$endif$_type_identifier.array_ldefn().array_bound_seq() == $array.name$_$if(relation)$complete$else$minimal$endif$_l_bound_seq;       
    }
>>

check_sequence_type(ctx, sequence, relation) ::= <<
    /*
    const TypeIdentifier $sequence.name$_$if(relation)$complete$else$minimal$endif$_type_identifier = *$get_type_identifier(ctx=ctx, type=member.typecode, relation=relation)$
    result &= $struct.name$_$if(relation)$complete$else$minimal$endif$_common_$member.name$_struct_member.member_type_id()._d() == $sequence.name$_$if(relation)$complete$else$minimal$endif$_type_identifier._d();
    result &= $sequence.name$_$if(relation)$complete$else$minimal$endif$_type_identifier._d() == EK_$if(relation)$COMPLETE$else$MINIMAL$endif$;

    const TypeObject* $sequence.name$_$if(relation)$complete$else$minimal$endif$_typeobject = $get_type_object(ctx=ctx, type=sequence, relation=relation)$
    result &= $sequence.name$_$if(relation)$complete$else$minimal$endif$_typeobject != nullptr;
    result &= $sequence.name$_$if(relation)$complete$else$minimal$endif$_typeobject->_d() == EK_$if(relation)$COMPLETE$else$MINIMAL$endif$;

    $if(relation)$Complete$else$Minimal$endif$TypeObject $sequence.name$_$if(relation)$complete$else$minimal$endif$_object = $sequence.name$_$if(relation)$complete$else$minimal$endif$_typeobject->$if(relation)$complete$else$minimal$endif$();
    result &= $sequence.name$_$if(relation)$complete$else$minimal$endif$_object._d() == TK_SEQUENCE;

    $if(relation)$Complete$else$Minimal$endif$SequenceType $sequence.name$_$if(relation)$complete$else$minimal$endif$_sequence = $sequence.name$_$if(relation)$complete$else$minimal$endif$_object.sequence_type();
    CollectionTypeFlag $sequence.name$_$if(relation)$complete$else$minimal$endif$_flags = $sequence.name$_$if(relation)$complete$else$minimal$endif$_sequence.collection_flag();// Unused. No flags apply
    
    $if(relation)$Complete$else$Minimal$endif$CollectionHeader $sequence.name$_$if(relation)$complete$else$minimal$endif$_header = $sequence.name$_$if(relation)$complete$else$minimal$endif$_sequence.header();// Empty. Available for future extension
    CommonCollectionHeader $sequence.name$_$if(relation)$complete$else$minimal$endif$_commonheader = $sequence.name$_$if(relation)$complete$else$minimal$endif$_header.common();
    $if(relation)$
    //@optional CompleteTypeDetail detail; // not present for anonymous
    $endif$

    $if(relation)$
    $if(relation)$Complete$else$Minimal$endif$TypeDetail $sequence.name$_$if(relation)$complete$else$minimal$endif$_header_details = $sequence.name$_$if(relation)$complete$else$minimal$endif$_header.detail();
    //@optional AppliedBuiltinTypeAnnotations ann_builtin;?????
    //@optional AppliedAnnotationSeq ann_custom;?????
    QualifiedTypeName $sequence.name$_$if(relation)$complete$else$minimal$endif$_header_details_type_name = $sequence.name$_$if(relation)$complete$else$minimal$endif$_header_details.type_name();
    result &= $sequence.name$_$if(relation)$complete$else$minimal$endif$_header_details_type_name == "$sequence.name$";
    $endif$

    $if(relation)$Complete$else$Minimal$endif$CollectionElement $sequence.name$_$if(relation)$complete$else$minimal$endif$_collection_element = $sequence.name$_$if(relation)$complete$else$minimal$endif$_sequence.element();
    CommonCollectionElement $sequence.name$_$if(relation)$complete$else$minimal$endif$_common_element = $sequence.name$_$if(relation)$complete$else$minimal$endif$_collection_element.common();
    $if(relation)$
    $if(relation)$Complete$else$Minimal$endif$ElementDetail $sequence.name$_$if(relation)$complete$else$minimal$endif$_element_details = $sequence.name$_$if(relation)$complete$else$minimal$endif$_collection_element.detail();
    //@optional AppliedBuiltinTypeAnnotations ann_builtin;?????
    //@optional AppliedAnnotationSeq ann_custom;?????
    $endif$

    if($sequence.typecode.maxsize$ <= 100){
        result &= $sequence.name$_$if(relation)$complete$else$minimal$endif$_type_identifier.seq_sdefn().bound() == $sequence.typecode.maxsize$;
    }else{
        result &= $sequence.name$_$if(relation)$complete$else$minimal$endif$_type_identifier.seq_ldefn().bound() == $sequence.typecode.maxsize$;
    }
    */
>>

check_map_type(ctx, map, relation) ::= <<
    /*
    const TypeIdentifier $map.name$_$if(relation)$complete$else$minimal$endif$_type_identifier = *$get_type_identifier(ctx=ctx, type=member.typecode, relation=relation)$
    result &= $struct.name$_$if(relation)$complete$else$minimal$endif$_common_$member.name$_struct_member.member_type_id()._d() == $map.name$_$if(relation)$complete$else$minimal$endif$_type_identifier._d();
    result &= $map.name$_$if(relation)$complete$else$minimal$endif$_type_identifier._d() == EK_$if(relation)$COMPLETE$else$MINIMAL$endif$;

    const TypeObject* $map.name$_$if(relation)$complete$else$minimal$endif$_typeobject = $get_type_object(ctx=ctx, type=map, relation=relation)$
    result &= $map.name$_$if(relation)$complete$else$minimal$endif$_typeobject != nullptr;
    result &= $map.name$_$if(relation)$complete$else$minimal$endif$_typeobject->_d() == EK_$if(relation)$COMPLETE$else$MINIMAL$endif$;

    $if(relation)$Complete$else$Minimal$endif$TypeObject $map.name$_$if(relation)$complete$else$minimal$endif$_object = $map.name$_$if(relation)$complete$else$minimal$endif$_typeobject->$if(relation)$complete$else$minimal$endif$();
    result &= $map.name$_$if(relation)$complete$else$minimal$endif$_object._d() == TK_MAP;

    $if(relation)$Complete$else$Minimal$endif$MapType $map.name$_$if(relation)$complete$else$minimal$endif$_map = $map.name$_$if(relation)$complete$else$minimal$endif$_object.map_type();
    CollectionTypeFlag $map.name$_$if(relation)$complete$else$minimal$endif$_flags = $map.name$_$if(relation)$complete$else$minimal$endif$_map.collection_flag();// Unused. No flags apply
    
    $if(relation)$Complete$else$Minimal$endif$CollectionHeader $map.name$_$if(relation)$complete$else$minimal$endif$_header = $map.name$_$if(relation)$complete$else$minimal$endif$_map.header();// Empty. Available for future extension

    CommonCollectionHeader $map.name$_$if(relation)$complete$else$minimal$endif$_commonheader = $map.name$_$if(relation)$complete$else$minimal$endif$_header.common();
    $if(relation)$
    //@optional CompleteTypeDetail detail; // not present for anonymous
    $endif$

    $if(relation)$
    $if(relation)$Complete$else$Minimal$endif$TypeDetail $map.name$_$if(relation)$complete$else$minimal$endif$_header_details = $map.name$_$if(relation)$complete$else$minimal$endif$_header.detail();
    //@optional AppliedBuiltinTypeAnnotations ann_builtin;?????
    //@optional AppliedAnnotationSeq ann_custom;?????
    QualifiedTypeName $map.name$_$if(relation)$complete$else$minimal$endif$_header_details_type_name = $map.name$_$if(relation)$complete$else$minimal$endif$_header_details.type_name();
    result &= $map.name$_$if(relation)$complete$else$minimal$endif$_header_details_type_name == "$map.name$";
    $endif$

    $if(relation)$Complete$else$Minimal$endif$CollectionElement $map.name$_$if(relation)$complete$else$minimal$endif$_collection_key_element = $map.name$_$if(relation)$complete$else$minimal$endif$_map.key();
    CommonCollectionElement $map.name$_$if(relation)$complete$else$minimal$endif$_key_common_element = $map.name$_$if(relation)$complete$else$minimal$endif$_collection_key_element.common();
    $if(relation)$
    $if(relation)$Complete$else$Minimal$endif$ElementDetail $map.name$_$if(relation)$complete$else$minimal$endif$_key_element_details = $map.name$_$if(relation)$complete$else$minimal$endif$_collection_key_element.detail();
    //@optional AppliedBuiltinTypeAnnotations ann_builtin;?????
    //@optional AppliedAnnotationSeq ann_custom;?????
    $endif$

    $if(relation)$Complete$else$Minimal$endif$CollectionElement $map.name$_$if(relation)$complete$else$minimal$endif$_element_collection_element = $map.name$_$if(relation)$complete$else$minimal$endif$_map.element();
    CommonCollectionElement $map.name$_$if(relation)$complete$else$minimal$endif$_element_common_element = $map.name$_$if(relation)$complete$else$minimal$endif$_element_collection_element.common();
    $if(relation)$
    $if(relation)$Complete$else$Minimal$endif$ElementDetail $map.name$_$if(relation)$complete$else$minimal$endif$_element_element_details = $map.name$_$if(relation)$complete$else$minimal$endif$_element_collection_element.detail();
    //@optional AppliedBuiltinTypeAnnotations ann_builtin;?????
    //@optional AppliedAnnotationSeq ann_custom;?????
    $endif$

    if($map.typecode.maxsize$ <= 100){
        result &= $map.name$_$if(relation)$complete$else$minimal$endif$_type_identifier.seq_sdefn().bound() == $map.typecode.maxsize$;
    }else{
        result &= $map.name$_$if(relation)$complete$else$minimal$endif$_type_identifier.seq_ldefn().bound() == $map.typecode.maxsize$;
    }
    */
>>

test_typedef(ctx, parent, typedefs) ::= <<
functions_to_run.emplace_back([]() -> bool
{
    std::cout << std::endl << "======================================== Testing typedef: $typedefs.name$ ========================================" << std::endl;
    bool result = true;

    //Minimal
    $check_alias_type(ctx=ctx, typedefs=typedefs, relation=false)$
    $check_alias_related_type(ctx=ctx, typedefs=typedefs, relation=false)$

    //Complete
    $check_alias_type(ctx=ctx, typedefs=typedefs, relation=true)$
    $check_alias_related_type(ctx=ctx, typedefs=typedefs, relation=true)$


    if(result){
        std::cout << std::endl << "======OK====== Test $typedefs.name$" << std::endl;
    }else{
        std::cout << std::endl << "=====FAIL===== Test $typedefs.name$" << std::endl;
    }
    return result;
});
>>

test_structure(ctx, parent, struct) ::= <<
functions_to_run.emplace_back([]() -> bool
{
    std::cout << std::endl << "======================================== Testing struct: $struct.name$ ========================================" << std::endl;
    MemberId memberId;
    bool result = true;

    //Minimal
    $check_struct_type(ctx=ctx, struct=struct, relation=false)$ 

    //Complete
    $check_struct_type(ctx=ctx, struct=struct, relation=true)$ 

    if(result){
        std::cout << std::endl << "======OK====== Test $struct.name$" << std::endl;
    }else{
        std::cout << std::endl << "=====FAIL===== Test $struct.name$" << std::endl;
    }
    return result;
});
>>

test_union(ctx, parent, union) ::= <<
functions_to_run.emplace_back([]() -> bool
{
    std::cout << std::endl << "======================================== Testing union: $union.name$ ========================================" << std::endl;
    MemberId memberId;
    bool result = true;

    //Minimal
    $check_union_type(ctx=ctx, union=union, relation=false)$ 
    memberId = 0;
    $union.members:{ member | $check_union_member_type(ctx=ctx, member=member, relation=false)$ }; separator="\n"$
    result &= $union.name$_minimal_memberseq.size() == memberId; 

    //Complete
    $check_union_type(ctx=ctx, union=union, relation=true)$ 
    memberId = 0;
    $union.members:{ member | $check_union_member_type(ctx=ctx, member=member, relation=true)$ }; separator="\n"$
    result &= $union.name$_complete_memberseq.size() == memberId; 

    if(result){
        std::cout << std::endl << "======OK====== Test $union.name$" << std::endl;
    }else{
        std::cout << std::endl << "=====FAIL===== Test $union.name$" << std::endl;
    }
    return result;
});
>>

test_enum(ctx, parent, enum) ::= <<
functions_to_run.emplace_back([]() -> bool
{
    std::cout << std::endl << "======================================== Testing enum: $enum.name$ ========================================" << std::endl;
    int literalId;
    bool result = true;

    //Minimal
    $check_enum_type(ctx=ctx, enum=enum, relation=false)$ 
    literalId = 0;
    $enum.members:{ literal | $check_enum_literal_type(ctx=ctx, literal=literal, relation=false)$ }; separator="\n"$
    result &= $enum.name$_minimal_literalseq.size() == literalId; 

    //Complete
    $check_enum_type(ctx=ctx, enum=enum, relation=true)$ 
    literalId = 0;
    $enum.members:{ literal | $check_enum_literal_type(ctx=ctx, literal=literal, relation=true)$ }; separator="\n"$
    result &= $enum.name$_complete_literalseq.size() == literalId; 

    if(result){
        std::cout << std::endl << "======OK====== Test $enum.name$" << std::endl;
    }else{
        std::cout << std::endl << "=====FAIL===== Test $enum.name$" << std::endl;
    }
    return result;
});
>>

test_bitmask(ctx, parent, bitmask) ::= <<
functions_to_run.emplace_back([]() -> bool
{
    std::cout << std::endl << "======================================== Testing bitmask: $bitmask.name$ ========================================" << std::endl;
    bool result = true;


    if(result){
        std::cout << std::endl << "======OK====== Test $bitmask.name$" << std::endl;
    }else{
        std::cout << std::endl << "=====FAIL===== Test $bitmask.name$" << std::endl;
    }
    return result;
});
>>

test_bitset(ctx, parent, bitset) ::= <<
functions_to_run.emplace_back([]() -> bool
{
    std::cout << std::endl << "======================================== Testing bitset: $bitset.name$ ========================================" << std::endl;
    bool result = true;


    if(result){
        std::cout << std::endl << "======OK====== Test $bitset.name$" << std::endl;
    }else{
        std::cout << std::endl << "=====FAIL===== Test $bitset.name$" << std::endl;
    }
    return result;
});
>>

test_annotation(ctx, parent, annotation) ::= <<
functions_to_run.emplace_back([]() -> bool
{
    std::cout << std::endl << "======================================== Testing annotation: $annotation.name$ ========================================" << std::endl;
    MemberId memberId;
    bool result = true;

    //Minimal
    $check_annotation_type(ctx=ctx, annotation=annotation, relation=false)$ 
    memberId = 0;
    $annotation.members:{ parameter | $check_annotation_member_type(ctx=ctx, parameter=parameter, relation=false)$ }; separator="\n"$
    result &= $annotation.name$_minimal_memberseq.size() == memberId; 

    //Complete
    $check_annotation_type(ctx=ctx, annotation=annotation, relation=true)$ 
    memberId = 0;
    $annotation.members:{ parameter | $check_annotation_member_type(ctx=ctx, parameter=parameter, relation=true)$ }; separator="\n"$
    result &= $annotation.name$_complete_memberseq.size() == memberId;

    if(result){
        std::cout << std::endl << "======OK====== Test $annotation.name$" << std::endl;
    }else{
        std::cout << std::endl << "=====FAIL===== Test $annotation.name$" << std::endl;
    }
    return result;
});
>>

test_const(ctx, parent, const) ::= <<
functions_to_run.emplace_back([]() -> bool
{
    std::cout << std::endl << "======================================== Testing const: $const.name$ ========================================" << std::endl;
    bool result = true;

    //Minimal
    $check_const_type(ctx=ctx, const=const, relation=false)$ 

    //Complete
    $check_const_type(ctx=ctx, const=const, relation=true)$ 
    
    if(result){
        std::cout << std::endl << "======OK====== Test $const.name$" << std::endl;
    }else{
        std::cout << std::endl << "=====FAIL===== Test $const.name$" << std::endl;
    }
    return result;
});
>>


fwd_decl(ctx, parent, type) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<
$test_typedef(ctx=ctx, parent=parent, typedefs=typedefs)$
>>

struct_type(ctx, parent, struct) ::= <<
$test_structure(ctx=ctx, parent=parent, struct=struct)$
>>

union_type(ctx, parent, union) ::= <<
$test_union(ctx=ctx, parent=parent, union=union)$
>>

enum_type(ctx, parent, enum) ::= <<
$test_enum(ctx=ctx, parent=parent, enum=enum)$
>>

bitmask_type(ctx, parent, bitmask) ::= <<
$test_bitmask(ctx=ctx, parent=parent, enum=enum)$
>>

bitset_type(ctx, parent, bitset) ::= <<
$test_bitset(ctx=ctx, parent=parent, bitset=bitset)$
>>

annotation(ctx, parent, annotation) ::= <<
$test_annotation(ctx=ctx, parent=parent, annotation=annotation)$
>>

module(ctx, parent, module, definition_list) ::= <<
$definition_list$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

const_decl(ctx, parent, const) ::= <<
$test_const(ctx=ctx, parent=parent, const=const)$
>>

