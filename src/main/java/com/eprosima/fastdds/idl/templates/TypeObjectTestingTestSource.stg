// Copyright 2023 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

group ProtocolHeader;

import "eprosima.stg"

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx,  file=[ctx.filename, "TypeObjectTestingTest.cpp"], description=["This file contains TypeObject test code."])$

#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.h>
#include <fastdds/dds/xtypes/type_representation/TypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>
#include <fastrtps/types/TypesBase.h>
#include <fastrtps/utils/md5.h>
#include <gtest/gtest.h>

#include "$ctx.filename$TypeObject.h"

using ReturnCode_t = eprosima::fastrtps::rtps::types::ReturnCode_t;
using namespace eprosima::fastdds::dds::xtypes1_3;

$definitions;separator="\n"$

int main(
        int argc,
        char** argv)
{

    register$ctx.filename$Types();

    testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
>>

get_type_identifier(typename, result) ::= <<
ret_code =
    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
    "$typename$", $result$);
ASSERT_EQ(ReturnCode_t::RETCODE_OK, ret_code);
>>

get_type_object(typename, result) ::= <<
ret_code =
    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_objects(
    "$typename$", $result$);
ASSERT_EQ(ReturnCode_t::RETCODE_OK, ret_code);
>>

check_type_detail_annotations(object, type) ::= <<
$if(object.annotationList)$
$object.annotationList: { annotation |
$if(annotation.isVerbatim)$
ASSERT_TRUE(type_objects.complete_type_object.$type$.ann_builtin().has_value());
ASSERT_TRUE(type_objects.complete_type_object.$type$.ann_builtin().value().verbatim().has_value());
$annotation.valueList : { verbatim_param |
$if(verbatim_param.isVerbatimPlacement)$
EXPECT_EQ($verbatim_param.enumStringValue$, type_objects.complete_type_object.$type$.ann_builtin().value().verbatim.value().placement());
$elseif(verbatim_param.isVerbatimLanguage)$
EXPECT_EQ($verbatim_param.value$, type_objects.complete_type_object.$type$.ann_builtin().value().verbatim.value().language());
$elseif(verbatim_param.isVerbatimText)$
EXPECT_EQ($verbatim_param.value$, type_objects.complete_type_object.$type$.ann_builtin().value().verbatim.value().text());
$endif$
}; separator="\n"$
$elseif(!annotation.isBuiltin)$
$check_applied_custom_annotations(object=annotation, type=type)$
$endif$
}; separator="\n"$
$endif$
>>

check_applied_custom_annotations(object, type) ::= <<
TypeIdentifierPair annotation_type_ids;
$get_type_identifier(typename=annotation.scopedname, result="annotation_type_ids")$
$check_direct_hash_type_identifier(typeid="annotation_type_ids")$
ASSERT_TRUE(type_objects.complete_type_object.$type$.ann_custom().has_value());
{
    size_t pos = 0;
    bool found = false;
    for(; pos < type_objects.complete_type_object.$type$.ann_custom().value().size())
    {
        if (annotation_type_ids.type_identifier1() == type_objects.complete_type_object.$type$.ann_custom().value()[pos].annotation_typeid() ||
            annotation_type_ids.type_identifier2() == type_objects.complete_type_object.$type$.ann_custom().value()[pos].annotation_typeid())
        {
            found = true;
            break;
        }
    }
    ASSERT_TRUE(found);
    EXPECT_TRUE(annotation_type_ids.type_identifier1() == type_objects.complete_type_object.$type$.ann_custom().value()[pos].annotation_typeid() ||
            annotation_type_ids.type_identifier2() == type_objects.complete_type_object.$type$.ann_custom().value()[pos].annotation_typeid());
    $if (annotation.valueList)$
    ASSERT_TRUE(type_objects.complete_type_object.$type$.ann_custom().value()[pos].param_seq().has_value());
    EXPECT_EQ($annotation.valuesSize$, type_objects.complete_type_object.$type$.ann_custom().value()[pos].param_seq().value().size());
    $annotation.valueList : { annotation_parameter |
    $check_annotation_parameter(param=annotation_parameter, type=type)$
    }; separator="\n"$
    $endif$
}
>>

check_annotation_parameter(param, type) ::= <<
{
    NameHash param_name_hash = TypeObjectUtils::name_hash($param.name$);
    size_t pos_ = 0;
    bool found_ = false;
    for (; pos_ < type_objects.complete_type_object.$type$.ann_custom().value()[pos].param_seq().value().size(); ++pos_)
    {
        if (param_name_hash == type_objects.complete_type_object.$type$.ann_custom().value()[pos].param_seq().value()[pos_].paramname_hash())
        {
            found_ = true;
            break;
        }
    }
    ASSERT_TRUE(found_);
    EXPECT_EQ(param_name_hash, type_objects.complete_type_object.$type$.ann_custom().value()[pos].param_seq().value()[pos_].paramname_hash());
    $if (param.typecode.primitiveType)$
    $if (param.typecode.isBooleanType)$
    EXPECT_EQ(TK_BOOLEAN, type_objects.complete_type_object.$type$.ann_custom().value()[pos].param_seq().value()[pos_].value()._d());
    EXPECT_EQ($param.value$, type_objects.complete_type_object.$type$.ann_custom().value()[pos].param_seq().value()[pos_].value().boolean_value());
    $elseif (param.typecode.isByteType)$
    EXPECT_EQ(TK_BYTE, type_objects.complete_type_object.$type$.ann_custom().value()[pos].param_seq().value()[pos_].value()._d());
    EXPECT_EQ($param.value$, type_objects.complete_type_object.$type$.ann_custom().value()[pos].param_seq().value()[pos_].value().byte_value());
    $elseif (param.typecode.isInt8Type)$
    EXPECT_EQ(TK_INT8, type_objects.complete_type_object.$type$.ann_custom().value()[pos].param_seq().value()[pos_].value()._d());
    EXPECT_EQ($param.value$, type_objects.complete_type_object.$type$.ann_custom().value()[pos].param_seq().value()[pos_].value().int8_value());
    $elseif (param.typecode.isUint8Type)$
    EXPECT_EQ(TK_UINT8, type_objects.complete_type_object.$type$.ann_custom().value()[pos].param_seq().value()[pos_].value()._d());
    EXPECT_EQ($param.value$, type_objects.complete_type_object.$type$.ann_custom().value()[pos].param_seq().value()[pos_].value().uint8_value());
    $elseif (param.typecode.isInt16Type)$
    EXPECT_EQ(TK_INT16, type_objects.complete_type_object.$type$.ann_custom().value()[pos].param_seq().value()[pos_].value()._d());
    EXPECT_EQ($param.value$, type_objects.complete_type_object.$type$.ann_custom().value()[pos].param_seq().value()[pos_].value().int16_value());
    $elseif (param.typecode.isUint16Type)$
    EXPECT_EQ(TK_UINT16, type_objects.complete_type_object.$type$.ann_custom().value()[pos].param_seq().value()[pos_].value()._d());
    EXPECT_EQ($param.value$, type_objects.complete_type_object.$type$.ann_custom().value()[pos].param_seq().value()[pos_].value().uint_16_value());
    $elseif (param.typecode.isInt32Type)$
    EXPECT_EQ(TK_INT32, type_objects.complete_type_object.$type$.ann_custom().value()[pos].param_seq().value()[pos_].value()._d());
    EXPECT_EQ($param.value$, type_objects.complete_type_object.$type$.ann_custom().value()[pos].param_seq().value()[pos_].value().int32_value());
    $elseif (param.typecode.isUint32Type)$
    EXPECT_EQ(TK_UINT32, type_objects.complete_type_object.$type$.ann_custom().value()[pos].param_seq().value()[pos_].value()._d());
    EXPECT_EQ($param.value$, type_objects.complete_type_object.$type$.ann_custom().value()[pos].param_seq().value()[pos_].value().uint32_value());
    $elseif (param.typecode.isInt64Type)$
    EXPECT_EQ(TK_INT64, type_objects.complete_type_object.$type$.ann_custom().value()[pos].param_seq().value()[pos_].value()._d());
    EXPECT_EQ($param.value$, type_objects.complete_type_object.$type$.ann_custom().value()[pos].param_seq().value()[pos_].value().int64_value());
    $elseif (param.typecode.isUint64Type)$
    EXPECT_EQ(TK_UINT64, type_objects.complete_type_object.$type$.ann_custom().value()[pos].param_seq().value()[pos_].value()._d());
    EXPECT_EQ($param.value$, type_objects.complete_type_object.$type$.ann_custom().value()[pos].param_seq().value()[pos_].value().uint64_value());
    $elseif (param.typecode.isFloat32Type)$
    EXPECT_EQ(TK_FLOAT32, type_objects.complete_type_object.$type$.ann_custom().value()[pos].param_seq().value()[pos_].value()._d());
    EXPECT_EQ($param.value$, type_objects.complete_type_object.$type$.ann_custom().value()[pos].param_seq().value()[pos_].value().float32_value());
    $elseif (param.typecode.isFloat64Type)$
    EXPECT_EQ(TK_FLOAT64, type_objects.complete_type_object.$type$.ann_custom().value()[pos].param_seq().value()[pos_].value()._d());
    EXPECT_EQ($param.value$, type_objects.complete_type_object.$type$.ann_custom().value()[pos].param_seq().value()[pos_].value().float64_value());
    $elseif (param.typecode.isFloat128Type)$
    EXPECT_EQ(TK_FLOAT128, type_objects.complete_type_object.$type$.ann_custom().value()[pos].param_seq().value()[pos_].value()._d());
    EXPECT_EQ($param.value$, type_objects.complete_type_object.$type$.ann_custom().value()[pos].param_seq().value()[pos_].value().float128_value());
    $elseif (param.typecode.isCharType)$
    EXPECT_EQ(TK_CHAR8, type_objects.complete_type_object.$type$.ann_custom().value()[pos].param_seq().value()[pos_].value()._d());
    EXPECT_EQ($param.value$, type_objects.complete_type_object.$type$.ann_custom().value()[pos].param_seq().value()[pos_].value().char_value());
    $elseif (param.typecode.isWCharType)$
    EXPECT_EQ(TK_CHAR16, type_objects.complete_type_object.$type$.ann_custom().value()[pos].param_seq().value()[pos_].value()._d());
    EXPECT_EQ($param.value$, type_objects.complete_type_object.$type$.ann_custom().value()[pos].param_seq().value()[pos_].value().wchar_value());
    $endif$
    $elseif (param.typecode.isEnumType)$
    EXPECT_EQ(TK_ENUM, type_objects.complete_type_object.$type$.ann_custom().value()[pos].param_seq().value()[pos_].value()._d());
    EXPECT_EQ($param.value$, type_objects.complete_type_object.$type$.ann_custom().value()[pos].param_seq().value()[pos_].value().enumerated_value());
    $elseif (param.typecode.isStringType)$
    EXPECT_EQ(TK_STRING8, type_objects.complete_type_object.$type$.ann_custom().value()[pos].param_seq().value()[pos_].value()._d());
    EXPECT_EQ($param.value$, type_objects.complete_type_object.$type$.ann_custom().value()[pos].param_seq().value()[pos_].value().string8_value());
    $elseif (param.typecode.isWStringType)$
    EXPECT_EQ(TK_STRING16, type_objects.complete_type_object.$type$.ann_custom().value()[pos].param_seq().value()[pos_].value()._d());
    EXPECT_EQ($param.value$, type_objects.complete_type_object.$type$.ann_custom().value()[pos].param_seq().value()[pos_].value().string16_value());
    $endif$
}
>>

check_member_detail_annotations(member, type) ::= <<>>

expected_member_flags(object) ::= <<
MemberFlag $object.name$_expected_flags;
$if(object.annotationDiscard)$
$object.name$_expected_flags |= MemberFlagBits::TRY_CONSTRUCT1
$elseif(object.annotationUseDefault)$
$object.name$_expected_flags |= MemberFlagBits::TRY_CONSTRUCT2;
$elseif(object.annotationTrim)$
$object.name$_expected_flags |= MemberFlagBits::TRY_CONSTRUCT1 | MemberFlagBits::TRY_CONSTRUCT2;
$endif$
$if(object.annotationExternal)$
$object.name$_expected_flags |= MemberFlagBits::IS_EXTERNAL;
$endif$
$if(object.annotationOptional)$
$object.name$_expected_flags |= MemberFlagBits::IS_OPTIONAL;
$endif$
$if(object.annotationMustUnderstand)$
$object.name$_expected_flags |= MemberFlagBits::IS_MUST_UNDERSTAND;
$endif$
$if(object.annotationKey)$
$object.name$_expected_flags |= MemberFlagBits::IS_KEY;
$endif$
$if(object.annotationDefaultLiteral)$
$object.name$_expected_flags |= MemberFlagBits::IS_DEFAULT;
$endif$
>>

expected_type_flags(object) ::= <<
TypeFlag $object.name$_expected_flags;
$if(object.annotationFinal)$
$object.name$_expected_flags |= TypeFlagBits::IS_FINAL;
$elseif(object.annotationAppendable)$
$object.name$_expected_flags |= TypeFlagBits::IS_APPENDABLE;
$elseif(object.annotationMutable)$
$object.name$_expected_flags |= TypeFlagBits::IS_MUTABLE;
$endif$
$if(object.annotationNested)$
$object.name$_expected_flags |= TypeFlagBits::IS_NESTED;
$endif$
$if(object.annotationAutoidHash)$
$object.name$_expected_flags |= TypeFlagBits::IS_AUTOID_HASH;
$endif$
>>


check_alias_type(typedefs) ::= <<
ReturnCode_t ret_code;
TypeIdentifierPair type_ids;
$get_type_identifier(typename=typedefs.scopedname, result="type_ids")$
$check_direct_hash_type_identifier(typeid="type_ids")$
TypeObjectPair type_objects;
$get_type_object(typename=typedefs.scopedname, result="type_ids")$
EXPECT_EQ(TK_ALIAS, type_objects.minimal_type_object._d());
EXPECT_EQ(TK_ALIAS, type_objects.complete_type_object._d());
EXPECT_EQ(0u, type_objects.minimal_type_object.alias_type().alias_flags());
EXPECT_EQ(0u, type_objects.complete_type_object.alias_type().alias_flags());
EXPECT_EQ($typedefs.scopedname$, type_objects.complete_type_object.alias_type().header().detail().type_name());
$check_type_detail_annotations(object=typedefs, type="alias_type().header().detail()")$
EXPECT_EQ(0u, type_objects.minimal_type_object.alias_type().body().common().related_flags());
EXPECT_EQ(0u, type_objects.complete_type_object.alias_type().body().common().related_flags());
TypeIdentifierPair related_type_ids;
$if (typedefs.typedefContentTypeCode.primitive)$
$get_type_identifier(typename=typedefs.typedefContentTypeCode.cppTypename, result="related_type_ids")$
$else$
$get_type_identifier(typename=typedefs.typedefContentTypeCode.scopedname, result="related_type_ids")$
$endif$
EXPECT_TRUE(related_type_ids.type_identifier1() == type_objects.minimal_type_object.alias_type().body().common().related_type() ||
    related_type_ids.type_identifier2() == type_objects.minimal_type_object.alias_type().body().common().related_type());
EXPECT_TRUE(related_type_ids.type_identifier1() == type_objects.complete_type_object.alias_type().body().common().related_type() ||
    related_type_ids.type_identifier2() == type_objects.complete_type_object.alias_type().body().common().related_type());
$check_member_detail_annotations(member=typedefs, type="alias_type().body()")$
>>

check_struct_type(struct) ::= <<
ReturnCode_t ret_code;
TypeIdentifierPair type_ids;
$get_type_identifier(typename=struct.scopedname, result="type_ids")$
$check_direct_hash_type_identifier(typeid="type_ids")$
TypeObjectPair type_objects;
$get_type_object(typename=struct.scopedname, result="type_objects")$
EXPECT_EQ(TK_STRUCTURE, type_objects.minimal_type_object._d());
EXPECT_EQ(TK_STRUCTURE, type_objects.complete_type_object._d());
$expected_type_flags(object=struct)$
EXPECT_EQ($struct.name$_expected_flags, type_objects.minimal_type_object.struct_type().struct_flags());
EXPECT_EQ($struct.name$_expected_flags, type_objects.complete_type_object.struct_type().struct_flags());
$if(struct.inheritance)$
TypeIdentifierPair base_type_ids;
$get_type_identifier(typename=struct.inheritance.scopedname, result="base_type_ids")$
$check_direct_hash_type_identifier(typeid="base_type_ids")$
EXPECT_TRUE(base_type_ids.type_identifier1() == type_objects.minimal_type_object.struct_type().header().base_type() ||
    base_type_ids.type_identifier1() == type_objects.complete_type_object.struct_type().header().base_type());
EXPECT_TRUE(base_type_ids.type_identifier2() == type_objects.minimal_type_object.struct_type().header().base_type() ||
    base_type_ids.type_identifier2() == type_objects.complete_type_object.struct_type().header().base_type());
$else$
TypeIdentifier invalid_type_id;
EXPECT_EQ(invalid_type_id, type_objects.minimal_type_object.struct_type().header().base_type());
EXPECT_EQ(invalid_type_id, type_objects.complete_type_object.struct_type().header().base_type());
$endif$
EXPECT_EQ($struct.scopedname$, type_objects.complete_type_object.struct_type().header().detail().type_name());
$check_type_detail_annotations(object=struct, type="struct_type().header().detail()")$
$struct.members: { member | $check_struct_member(member=member)$}; separator="\n"$
ASSERT_EQ($struct.membersSize$, type_objects.minimal_type_object.struct_type().member_seq().size());
ASSERT_EQ($struct.membersSize$, type_objects.complete_type_object.struct_type().member_seq().size());
$check_struct_member_seq(struct=struct)$
>>

check_struct_member(member) ::= <<
{
    size_t pos = 0;
    bool found = false;
    for (; pos < type_objects.complete_type_object.struct_type().member_seq().size(); ++pos)
    {
        if ($member.name$ == type_objects.complete_type_object.struct_type().member_seq()[pos].detail().name())
        {
            found = true;
            break;
        }
    }
    ASSERT_TRUE(found);
    EXPECT_EQ($member.name$, type_objects.complete_type_object.struct_type().member_seq()[pos].detail().name());
    $check_member_detail_annotations(member=member, type="struct_type().member_seq()[pos].detail()")$
    NameHash member_name_hashed = TypeObjectUtils::name_hash($member.name$);
    EXPECT_EQ(member_name_hashed, type_objects.minimal_type_object.struct_type().member_seq()[pos].detail().name_hash());
    $if(member.annotationId)$
    EXPECT_EQ($member.annotationIdValue$, type_objects.minimal_type_object.struct_type().member_seq()[pos].common().member_id());
    EXPECT_EQ($member.annotationIdValue$, type_objects.complete_type_object.struct_type().member_seq()[pos].common().member_id());
    $elseif(member.annotationHashid && member.annotationHashidValue)$
    EXPECT_EQ($member.annotationHashidValue$, type_objects.minimal_type_object.struct_type().member_seq()[pos].common().member_id());
    EXPECT_EQ($member.annotationHashidValue$, type_objects.complete_type_object.struct_type().member_seq()[pos].common().member_id());
    $elseif(struct.annotationAutoidHash || member.annotationHashid)$
    MemberId member_id = (member_name_hashed[3] << 24 | member_name_hashed[2] << 16 | member_name_hashed[1] << 8 |
        member_name_hashed[0]) & 0x0FFFFFFF;
    EXPECT_EQ(member_id, type_objects.minimal_type_object.struct_type().member_seq()[pos].common().member_id());
    EXPECT_EQ(member_id, type_objects.complete_type_object.struct_type().member_seq()[pos].common().member_id());
    $endif$
    $expected_member_flags(object=member)$
    EXPECT_EQ($member.name$_expected_flags, type_objects.minimal_type_object.struct_type().member_seq()[pos].common().member_flags());
    EXPECT_EQ($member.name$_expected_flags, type_objects.complete_type_object.struct_type().member_seq()[pos].common().member_flags());
    TypeIdentifierPair member_type_ids;
    $if(member.typecode.primitive)$
    $get_type_identifier(typename=member.typecode.cppTypename, result="member_type_ids")$
    $else$
    $get_type_identifier(typename=member.typecode.scopedname, result="member_type_ids")$
    $endif$
    EXPECT_TRUE(member_type_ids.type_identifier1() == type_objects.minimal_type_object.struct_type().header().base_type() ||
        member_type_ids.type_identifier1() == type_objects.complete_type_object.struct_type().header().base_type());
    EXPECT_TRUE(member_type_ids.type_identifier2() == type_objects.minimal_type_object.struct_type().header().base_type() ||
        member_type_ids.type_identifier2() == type_objects.complete_type_object.struct_type().header().base_type());
}
>>

check_struct_member_seq(struct) ::= <<>>

check_union_type(union) ::= <<
ReturnCode_t ret_code;
TypeIdentifierPair type_ids;
$get_type_identifier(typename=union.scopedname, result="type_ids")$
$check_direct_hash_type_identifier(typeid="type_ids")$
TypeObjectPair type_objects;
$get_type_object(typename=union.scopedname, result="type_objects")$
EXPECT_EQ(TK_UNION, type_objects.minimal_type_object._d());
EXPECT_EQ(TK_UNION, type_objects.complete_type_object._d());
$expected_type_flags(object=union)$
EXPECT_EQ($union.name$_expected_flags, type_objects.minimal_type_object.union_type().union_flags());
EXPECT_EQ($union.name$_expected_flags, type_objects.complete_type_object.union_type().union_flags());
EXPECT_EQ($union.scopedname$, type_objects.complete_type_object.union_type().header().detail().type_name());
$check_type_detail_annotations(object=union, type="union_type().header().detail()")$
$expected_member_flags(object=union.discriminatorMember)$
EXPECT_EQ($union.discriminatorMember.name$_expected_flags, type_objects.minimal_type_object.union_type().discriminator().common().member_flags());
EXPECT_EQ($union.discriminatorMember.name$_expected_flags, type_objects.complete_type_object.union_type().discriminator().common().member_flags());
TypeIdentifierPair discriminator_type_ids;
$if(union.discriminator.primitive)$
$get_type_identifier(typename=union.discriminator.cppTypename, result="discriminator_type_ids")$
$else$
$get_type_identifier(typename=union.discriminator.scopedname, result="discriminator_type_ids")$
$endif$
EXPECT_TRUE(discriminator_type_ids.type_identifier1() == type_objects.minimal_type_object.union_type().discriminator().common().type_id() ||
    discriminator_type_ids.type_identifier1() == type_objects.complete_type_object.union_type().discriminator().common().type_id());
EXPECT_TRUE(discriminator_type_ids.type_identifier2() == type_objects.minimal_type_object.union_type().discriminator().common().type_id() ||
    discriminator_type_ids.type_identifier2() == type_objects.complete_type_object.union_type().discriminator().common().type_id());
$check_type_detail_annotations(object=union.discriminator, type="union_type().discriminator()")$
$union.members: { member | $check_union_member(member=member)$}; separator="\n"$
ASSERT_EQ($union.membersSize$, type_objects.minimal_type_object.union_type().member_seq().size());
ASSERT_EQ($union.membersSize$, type_objects.complete_type_object.union_type().member_seq().size());
$check_union_member_seq(union=union)$
>>

check_union_member(member) ::= <<
    //=====check_union_member_type - $relation_name$ - $member.name$=====
    $relation_capname$UnionMember $union.name$_$relation_name$_$member.name$_member = $union.name$_$relation_name$_memberseq.at(memberId);
    CommonUnionMember $union.name$_$relation_name$_common_$member.name$_common = $union.name$_$relation_name$_$member.name$_member.common();

    MemberId $union.name$_$relation_name$_common_$member.name$_memberid = $union.name$_$relation_name$_common_$member.name$_common.member_id();
    ASSERT_EQ(memberId, $union.name$_$relation_name$_common_$member.name$_memberid);

    UnionMemberFlag $union.name$_$relation_name$_common_$member.name$_memberflags = $union.name$_$relation_name$_common_$member.name$_common.member_flags();
    {
    $check_member_flags(ctx=ctx, object=union.member, flags_var_name=["union_member"])$
    ASSERT_TRUE(union_member_expected_flags & $union.name$_$relation_name$_common_$member.name$_memberflags);
    }

    TypeIdentifier $union.name$_$relation_name$_common_$member.name$_member_typeid = $union.name$_$relation_name$_common_$member.name$_common.type_id();
    $get_type_identifier(typename=member.scopedname)$  
    ASSERT_EQ($member.name$_$relation_name$_common_member_factory_type_id->_d(), $union.name$_$relation_name$_common_$member.name$_member_typeid._d());

    UnionCaseLabelSeq $union.name$_$relation_name$_common_$member.name$_member_labelseq = $union.name$_$relation_name$_common_$member.name$_common.label_seq();
    {
    int $union.name$_label_index = 0;
    $member.labels:{ label |
    ASSERT_EQ($label$, $union.name$_$relation_name$_common_$member.name$_member_labelseq.at($union.name$_label_index));
    $union.name$_label_index++;
    };separator="\n"$
    }
    $if(relation)$
    {    
    CompleteMemberDetail $member.name$_$relation_name$_detail = $union.name$_$relation_name$_$member.name$_member.detail();
    $check_optional_detail_annotations(ctx=ctx, object=member)$
    MemberName $member.name$_$relation_name$_common_$member.name$_union_member_name = $member.name$_$relation_name$_detail.name();
    ASSERT_EQ("$member.name$", $member.name$_$relation_name$_common_$member.name$_union_member_name);
    }
    $else$
    {
    MinimalMemberDetail $member.name$_$relation_name$_detail = $union.name$_$relation_name$_$member.name$_member.detail();
    NameHash $member.name$_$relation_name$_union_member_name_hash = $member.name$_$relation_name$_detail.name_hash();
    MD5 $member.name$_$relation_name$_name_hash("$member.name$");
    for(int i = 0;i < 4;++i)
    {
        ASSERT_EQ($member.name$_$relation_name$_name_hash.digest[i], $member.name$_$relation_name$_union_member_name_hash[i]);
    }
    }
    $endif$

    memberId++;
>>

check_union_member_seq(union) ::= <<>>

check_enum_type(enum) ::= <<
ReturnCode_t ret_code;
TypeIdentifierPair type_ids;
$get_type_identifier(typename=enum.scopedname, result="type_ids")$
$check_direct_hash_type_identifier(typeid="type_ids")$
TypeObjectPair type_objects;
$get_type_object(typename=enum.scopedname, result="type_objects")$
EXPECT_EQ(TK_ENUM, type_objects.minimal_type_object._d());
EXPECT_EQ(TK_ENUM, type_objects.complete_type_object._d());
EXPECT_EQ(0u, type_objects.minimal_type_object.enumerated_type().enum_flags());
EXPECT_EQ(0u, type_objects.complete_type_object.enumerated_type().enum_flags());
EXPECT_EQ($enum.bitBound$, type_objects.minimal_type_object.enumerated_type().header().common().bit_bound());
EXPECT_EQ($enum.bitBound$, type_objects.complete_type_object.enumerated_type().header().common().bit_bound());
EXPECT_EQ($enum.scopedname$, type_objects.complete_type_object.enumerated_type().header().detail().type_name());
$check_type_detail_annotations(object=enum, type="enumerated_type().header().detail()")$
int32_t enum_literal_id = 0;
$enum.members: { member | $check_enum_literal(literal=member)$}; separator="\n"$
ASSERT_EQ($enum.membersSize$, type_objects.minimal_type_object.enumerated_type().literal_seq().size());
ASSERT_EQ($enum.membersSize$, type_objects.complete_type_object.enumerated_type().literal_seq().size());
$check_enum_literal_seq(enum=enum)$
>>

check_enum_literal(literal) ::= <<
{
    size_t pos = 0;
    bool found = false;
    for (; pos < type_objects.complete_type_object.enumerated_type().literal_seq().size(); ++pos)
    {
        if ($literal.name$ == type_objects.complete_type_object.enumerated_type().literal_seq()[pos].detail().name())
        {
            found = true;
            break;
        }
    }
    ASSERT_TRUE(found);
    EXPECT_EQ($literal.name$, type_objects.complete_type_object.enumerated_type().literal_seq()[pos].detail().name());
    $check_member_detail_annotations(member=literal, type="enumerated_type().literal_seq()[pos].detail()")$
    EXPECT_EQ(TypeObjectUtils::name_hash($literal.name$), type_objects.minimal_type_object.enumerated_type().literal_seq()[pos].detail().name_hash());
    $if (literal.annotationValue)$
    EXPECT_EQ($literal.annotationValueValue$, type_objects.complete_type_object.enumerated_type().literal_seq()[pos].common().value());
    EXPECT_EQ($literal.annotationValueValue$, type_objects.minimal_type_object.enumerated_type().literal_seq()[pos].common().value());
    enum_literal_id = $literal.annotationValueValue$;
    $else$
    EXPECT_EQ(enum_literal_id, type_objects.complete_type_object.enumerated_type().literal_seq()[pos].common().value());
    EXPECT_EQ(enum_literal_id, type_objects.minimal_type_object.enumerated_type().literal_seq()[pos].common().value());
    $endif$
    $expected_member_flags(literal)$
    EXPECT_EQ($literal.name$_expected_flags, type_objects.minimal_type_object.enumerated_type().literal_seq()[pos].common().flags());
    EXPECT_EQ($literal.name$_expected_flags, type_objects.complete_type_object.enumerated_type().literal_seq()[pos].common().flags());
    enum_literal_id++;
}
>>

check_enum_literal_seq(enum) ::= <<>>

check_bitmask_type(bitmask) ::= <<
ReturnCode ret_code;
TypeIdentifierPair type_ids;
$get_type_identifier(typename=bitmask.scopedname, result="type_ids")$
$check_direct_hash_type_identifier(typeid="type_ids")$
TypeObjectPair type_objects;
$get_type_object(typename=bitmask.scopedname, result="type_objects")$
EXPECT_EQ(TK_BITMASK, type_objects.minimal_type_object._d());
EXPECT_EQ(TK_BITMASK, type_objects.complete_type_object._d());
EXPECT_EQ(0u, type_objects.minimal_type_object.bitmask_type().bitset_flags());
EXPECT_EQ(0u, type_objects.complete_type_object.bitmask_type().bitset_flags());
EXPECT_EQ($bitmask.bitBound$, type_objects.minimal_type_object.bitmask_type().header().common().bit_bound());
EXPECT_EQ($bitmask.bitBound$, type_objects.complete_type_object.bitmask_type().header().common().bit_bound());
EXPECT_EQ($bitmask.scopedname$, type_objects.complete_type_object.bitmask_type().header().detail().type_name());
$check_type_detail_annotations(object=bitmask, type="bitmask_type().header().detail()")$
$bitmask.members: { member | $check_bitmask_flag(bitflag=member)$}; separator="\n"$
ASSERT_EQ($bitmask.membersSize$, type_objects.minimal_type_object.bitmask_type().flag_seq().size());
ASSERT_EQ($bitmask.membersSize$, type_objects.complete_type_object.bitmask_type().flag_seq().size());
$check_bitmask_bitflag_seq(bitmask=bitmask)$
>>

check_bitmask_flag(bitflag) ::= <<
{
    size_t pos = 0;
    bool found = false;
    for (; pos < type_objects.complete_type_object.bitmask_type().flag_seq().size; ++pos)
    {
        if ($bitflag.name$ == type_objects.complete_type_object.bitmask_type().flag_seq()[pos].detail().name())
        {
            found = true;
            break;
        }
    }
    ASSERT_TRUE(found);
    EXPECT_EQ($bitflag.name$, type_objects.complete_type_object.bitmask_type().flag_seq()[pos].detail().name());
    $check_member_detail_annotations(member=bitflag, type="bitmask_type().flag_seq()[pos].detail()")$
    EXPECT_EQ(TypeObjectUtils::name_hash($bitflag.name$), type_objects.minimal_type_object.bitmask_type().flag_seq()[pos].detail().name_hash());
    EXPECT_EQ($bitflag.position$, type_objects.minimal_type_object.bitmask_type().flag_seq()[pos].common().position());
    EXPECT_EQ($bitflag.position$, type_objects.complete_type_object.bitmask_type().flag_seq()[pos].common().position());
    EXPECT_EQ(0u, type_objects.minimal_type_object.bitmask_type().flag_seq()[pos].common().flags());
    EXPECT_EQ(0u, type_objects.complete_type_object.bitmask_type().flag_seq()[pos].common().flags());
}
>>

check_bitmask_bitflag_seq(bitmask) ::= <<>>

check_bitset_type(bitset) ::= <<
ReturnCode_t ret_code;
TypeIdentifierPair type_ids;
$get_type_identifier(typename=bitset.scopedname, result="type_ids")$
$check_direct_hash_type_identifier(typeid="type_ids")$
TypeObjectPair type_objects;
$get_type_object(typename=bitset.scopedname, result="type_objects")$
EXPECT_EQ(TK_BITSET, type_objects.minimal_type_object._d());
EXPECT_EQ(TK_BITSET, type_objects.complete_type_object._d());
EXPECT_EQ(0u, type_objects.minimal_type_object.bitset_type().bitset_flags());
EXPECT_EQ(0u, type_objects.complete_type_object.bitset_type().bitset_flags());
EXPECT_EQ($bitset.scopedname$, type_objects.complete_type_object.bitset_type().header().detail().type_name());
$check_type_detail_annotations(object=bitset, type="bitset_type().header().detail()")$
$bitset.members: { member | $check_bitfield(bitfield=member)$}; separator="\n"$
ASSERT_EQ($bitset.membersSize$, type_objects.minimal_type_object.bitset_type().field_seq().size());
ASSERT_EQ($bitset.membersSize$, type_objects.complete_type_object.bitset_type().field_seq().size());
$check_bitset_member_seq(bitset=bitset)$
>>

check_bitfield(bitfield) ::= <<
{
    size_t pos = 0;
    bool found = false;
    for (; pos < type_objects.complete_type_object.bitset_type().field_seq().size(); ++pos)
    {
        if ($bitfield.basePosition$ == type_objects.complete_type_object.bitset_type().field_seq()[pos].common().position())
        {
            found = true;
            break;
        }
    }
    ASSERT_TRUE(found);
    EXPECT_EQ($bitfield.basePosition$, type_objects.complete_type_object.bitset_type().field_seq()[pos].common().position());
    EXPECT_EQ($bitfield.basePosition$, type_objects.minimal_type_object.bitset_type().field_seq()[pos].common().position());
    EXPECT_EQ(0u, type_objects.complete_type_object.bitset_type().field_seq()[pos].common().flags());
    EXPECT_EQ(0u, type_objects.minimal_type_object.bitset_type().field_seq()[pos].common().flags());
    EXPECT_EQ($bitfield.spec.bitSize$, type_objects.complete_type_object.bitset_type().field_seq()[pos].common().bitcount());
    EXPECT_EQ($bitfield.spec.bitSize$, type_objects.minimal_type_object.bitset_type().field_seq()[pos].common().bitcount());
    EXPECT_EQ($bitfield.spec.typecode.typeIdentifier$, type_objects.complete_type_object.bitset_type().field_seq()[pos].common().holder_type());
    EXPECT_EQ($bitfield.spec.typecode.typeIdentifier$, type_objects.minimal_type_object.bitset_type().field_seq()[pos].common().holder_type());
    $if(bitfield.name)$
    EXPECT_EQ($bitfield.name$, type_objects.complete_type_object.bitset_type().field_seq()[pos].detail().name());
    EXPECT_EQ(TypeObjectUtils::name_hash($bitfield.name$), type_objects.minimal_type_object.bitset_type().field_seq()[pos].name_hash());
    $else$
    EXPECT_EQ("", type_objects.complete_type_object.bitset_type().field_seq()[pos].detail().name());
    EXPECT_EQ("", type_objects.minimal_type_object.bitset_type().field_seq()[pos].name_hash());
    $endif$
    $check_member_detail_annotations(member=bitfield, type="bitset_type().field_seq()[pos].detail()")$
}
>>

check_bitset_member_seq(bitset) ::= <<>>

check_annotation_type(annotation) ::= <<
    //=====check_annotation_type - $relation_name$ - $annotation.name$=====
    $get_type_identifier(typename=annotation.scopedname)$
    ASSERT_EQ(eprosima::fastrtps::types::EK_$if(relation)$COMPLETE$else$MINIMAL$endif$, $annotation.name$_$relation_name$_type_identifier->_d());

    $get_type_object(typename=annotation.scopedname)$
    ASSERT_EQ(eprosima::fastrtps::types::EK_$if(relation)$COMPLETE$else$MINIMAL$endif$, $annotation.name$_$relation_name$_typeobject->_d());

    $relation_capname$TypeObject $annotation.name$_$relation_name$_object = $annotation.name$_$relation_name$_typeobject->$relation_name$();
    ASSERT_EQ(TK_ANNOTATION, $annotation.name$_$relation_name$_object._d());

    $relation_capname$AnnotationType $annotation.name$_$relation_name$_annotation = $annotation.name$_$relation_name$_object.annotation_type();
    //AnnotationTypeFlag annotation_flag;// Unused. No flags apply

    $relation_capname$AnnotationHeader $annotation.name$_$relation_name$_header = $annotation.name$_$relation_name$_annotation.header();
    $if(relation)$
    QualifiedTypeName $annotation.name$_$relation_name$_name = $annotation.name$_$relation_name$_header.annotation_name();
    ASSERT_EQ("$annotation.name$", $annotation.name$_$relation_name$_name);
    $endif$

    $relation_capname$AnnotationParameterSeq $annotation.name$_$relation_name$_memberseq = $annotation.name$_$relation_name$_annotation.member_seq();
    $annotation.members:{ parameter | $check_annotation_parameter_type(ctx=ctx, parameter=parameter, relation=false, relation_name="minimal", relation_capname="Minimal")$ };separator="\n"$
    ASSERT_EQ(memberId, $annotation.name$_minimal_memberseq.size());
>>

check_annotation_parameter_type(ctx, parameter, relation, relation_name, relation_capname) ::= <<
    //=====check_annotation_parameter_type - $relation_name$ - $parameter.name$=====
    $relation_capname$AnnotationParameter $annotation.name$_$relation_name$_$parameter.name$ = $annotation.name$_$relation_name$_memberseq.at(memberId);
    CommonAnnotationParameter $annotation.name$_$relation_name$_common_$parameter.name$_parameter_member = $annotation.name$_$relation_name$_$parameter.name$.common();
    //AnnotationParameterFlag member_flags;// Unused. No flags apply

    TypeIdentifier $annotation.name$_$relation_name$_common_$parameter.name$_parameter_member_typeid = $annotation.name$_$relation_name$_common_$parameter.name$_parameter_member.member_type_id();
    const TypeIdentifier* $annotation.name$_$relation_name$_common_$parameter.name$_factory_typeid = DomainParticipantFactory::get_instance()->type_object_registry()->get_type_identifier("$parameter.typecode.cppTypename$", $relation$);
    ASSERT_EQ($annotation.name$_$relation_name$_common_$parameter.name$_factory_typeid->_d(), $annotation.name$_$relation_name$_common_$parameter.name$_parameter_member_typeid._d());

    $if(relation)$
    MemberName $annotation.name$_$relation_name$_$parameter.name$_name = $annotation.name$_$relation_name$_$parameter.name$.name();
    ASSERT_EQ("$parameter.name$", $annotation.name$_$relation_name$_$parameter.name$_name);
    $else$
    NameHash $annotation.name$_$relation_name$_$parameter.name$_member_name_hash = $annotation.name$_$relation_name$_$parameter.name$.name_hash();
    MD5 $annotation.name$_$relation_name$_$parameter.name$_name_hash("$flag.name$");
    for(int i = 0;i < 4;++i)
    {
        ASSERT_EQ($annotation.name$_$relation_name$_$parameter.name$_name_hash.digest[i], $annotation.name$_$relation_name$_$parameter.name$_member_name_hash[i]);
    }
    $endif$

    AnnotationParameterValue $annotation.name$_$relation_name$_$parameter.name$_default_value = $annotation.name$_$relation_name$_$parameter.name$.default_value();
    $if(parameter.typecode.primitiveType)$
    $if(parameter.typecode.isBooleanType)$
    ASSERT_EQ($parameter.value$, $annotation.name$_$relation_name$_$parameter.name$_default_value.boolean_value());
    $elseif(parameter.typecode.isByteType)$
    ASSERT_EQ($parameter.value$, $annotation.name$_$relation_name$_$parameter.name$_default_value.byte_value());
    $elseif(parameter.typecode.isInt8Type)$
    ASSERT_EQ($parameter.value$, $annotation.name$_$relation_name$_$parameter.name$_default_value.int8_value());
    $elseif(parameter.typecode.isUint8Type)$
    ASSERT_EQ($parameter.value$, $annotation.name$_$relation_name$_$parameter.name$_default_value.uint8_value());
    $elseif(parameter.typecode.isInt16Type)$
    ASSERT_EQ($parameter.value$, $annotation.name$_$relation_name$_$parameter.name$_default_value.int16_value());
    $elseif(parameter.typecode.isUint16Type)$
    ASSERT_EQ($parameter.value$, $annotation.name$_$relation_name$_$parameter.name$_default_value.uint16_value());
    $elseif(parameter.typecode.isInt32Type)$
    ASSERT_EQ($parameter.value$, $annotation.name$_$relation_name$_$parameter.name$_default_value.int32_value());
    $elseif(parameter.typecode.isUint32Type)$
    ASSERT_EQ($parameter.value$, $annotation.name$_$relation_name$_$parameter.name$_default_value.uint32_value());
    $elseif(parameter.typecode.isInt64Type)$
    ASSERT_EQ($parameter.value$, $annotation.name$_$relation_name$_$parameter.name$_default_value.int64_value());
    $elseif(parameter.typecode.isUint64Type)$
    ASSERT_EQ($parameter.value$, $annotation.name$_$relation_name$_$parameter.name$_default_value.uint64_value());
    $elseif(parameter.typecode.isFloat32Type)$
    ASSERT_EQ($parameter.value$, $annotation.name$_$relation_name$_$parameter.name$_default_value.float32_value());
    $elseif(parameter.typecode.isFloat64Type)$
    ASSERT_EQ($parameter.value$, $annotation.name$_$relation_name$_$parameter.name$_default_value.float64_value());
    $elseif(parameter.typecode.isFloat128Type)$
    ASSERT_EQ($parameter.value$, $annotation.name$_$relation_name$_$parameter.name$_default_value.float128_value());
    $elseif(parameter.typecode.isCharType)$
    ASSERT_EQ($parameter.value$, $annotation.name$_$relation_name$_$parameter.name$_default_value.char_value());
    $elseif(parameter.typecode.isWCharType)$
    ASSERT_EQ($parameter.value$, $annotation.name$_$relation_name$_$parameter.name$_default_value.wchar_value());
    $endif$
    $elseif(parameter.typecode.isEnumType)$
    ASSERT_EQ($parameter.value$, $annotation.name$_$relation_name$_$parameter.name$_default_value.enumerated_value());
    $elseif(parameter.typecode.isStringType)$
    ASSERT_EQ("$parameter.value$", $annotation.name$_$relation_name$_$parameter.name$_default_value.string8_value());
    $elseif(parameter.typecode.isWStringType)$
    ASSERT_EQ("$parameter.value$", $annotation.name$_$relation_name$_$parameter.name$_default_value.string16_value());
    $endif$
    memberId++;
>>

check_array_type(ctx, array, relation, relation_name, relation_capname) ::= <<
    //=====check_array_type - $relation_name$ - $array.name$=====
    $get_type_identifier(typename=array.scopedname)$
    ASSERT_EQ(eprosima::fastrtps::types::EK_$if(relation)$COMPLETE$else$MINIMAL$endif$, $array.name$_$relation_name$_type_identifier->_d());

    $get_type_identifier(typename=array.scopedname)$
    ASSERT_EQ(eprosima::fastrtps::types::EK_$if(relation)$COMPLETE$else$MINIMAL$endif$, $array.name$_$relation_name$_typeobject->_d());

    $relation_capname$TypeObject $array.name$_$relation_name$_object = $array.name$_$relation_name$_typeobject->$relation_name$();
    ASSERT_EQ(TK_ARRAY, $array.name$_$relation_name$_object._d());

    $relation_capname$ArrayType $array.name$_$relation_name$_array = $array.name$_$relation_name$_object.array_type();
    //CollectionTypeFlag collection_flag;// Unused. No flags apply
    
    $relation_capname$ArrayHeader $array.name$_$relation_name$_header = $array.name$_$relation_name$_array.header();
    $if(relation)$
    CompleteTypeDetail $array.name$_$relation_name$_detail = $array.name$_$relation_name$_header.detail();
    $check_optional_detail_annotations(ctx=ctx, object=array)$
    QualifiedTypeName $array.name$_$relation_name$_detail_type_name = $array.name$_$relation_name$_detail.type_name();
    ASSERT_EQ("$array.scopedname$", $array.name$_$relation_name$_detail_type_name);
    $endif$

    CommonArrayHeader $array.name$_$relation_name$_header_common = $array.name$_$relation_name$_header.common();
    LBoundSeq $array.name$_$relation_name$_header_common_bound_seq = $array.name$_$relation_name$_header_common.bound_seq();

    int dimension_bound_index = 0;
    $array.typecode.dimensions:{ dimension_bound |
    ASSERT_EQ($dimension_bound$, $array.name$_$relation_name$_header_common_bound_seq.at(dimension_bound_index));
    dimension_bound_index++;
    };separator="\n"$

    $relation_capname$CollectionElement $array.name$_$relation_name$_collection_element = $array.name$_$relation_name$_array.element();
    CommonCollectionElement $array.name$_$relation_name$_common_element = $array.name$_$relation_name$_collection_element.common();

    CollectionElementFlag $array.name$_$relation_name$_common_element_flags = $array.name$_$relation_name$_common_element.element_flags();
    {
    $check_member_flags(ctx=ctx, object=array, flags_var_name=["array"])$
    ASSERT_TRUE(array_expected_flags & $map.name$_$relation_name$_array);
    }
    $get_type_identifier(typename=array.scopedname)$
    ASSERT_EQ($array.name$_$relation_name$_common_element_id->_d(), $array.name$_$relation_name$_common_element.type()._d());

    $if(relation)$
{
    CompleteElementDetail $array.name$_$relation_name$_detail = $array.name$_$relation_name$_collection_element.detail();
    $check_optional_detail_annotations(ctx=ctx, object=array)$
}
    $endif$

    int $array.name$_$relation_name$_totalsize = $member.typecode.dimensions:{ dim | $dim$};separator=" + "$;
    
    if($array.name$_$relation_name$_totalsize <= 100){
        SBoundSeq $array.name$_$relation_name$_s_bound_seq;
        $member.typecode.dimensions:{ dim | $array.name$_$relation_name$_s_bound_seq.push_back($dim$);};separator="\n"$
        ASSERT_EQ($array.name$_$relation_name$_s_bound_seq, $array.name$_$relation_name$_type_identifier.array_sdefn().array_bound_seq());
    }else{
        LBoundSeq $array.name$_$relation_name$_l_bound_seq;
        $member.typecode.dimensions:{ dim | $array.name$_$relation_name$_l_bound_seq.push_back($dim$);};separator="\n"$
        ASSERT_EQ($array.name$_$relation_name$_l_bound_seq, $array.name$_$relation_name$_type_identifier.array_ldefn().array_bound_seq());
    }
>>

check_sequence_type(ctx, sequence, relation, relation_name, relation_capname) ::= <<
    //=====check_sequence_type - $relation_name$ - $sequence.name$=====
    $get_type_identifier(typename=sequence.scopedname)$
    ASSERT_EQ(eprosima::fastrtps::types::EK_$if(relation)$COMPLETE$else$MINIMAL$endif$, $sequence.name$_$relation_name$_type_identifier._d());

    $get_type_identifier(typename=sequence.scopedname)$
    ASSERT_EQ(eprosima::fastrtps::types::EK_$if(relation)$COMPLETE$else$MINIMAL$endif$, $sequence.name$_$relation_name$_typeobject->_d());

    $relation_capname$TypeObject $sequence.name$_$relation_name$_object = $sequence.name$_$relation_name$_typeobject->$relation_name$();
    ASSERT_EQ(TK_SEQUENCE, $sequence.name$_$relation_name$_object._d());

    $relation_capname$SequenceType $sequence.name$_$relation_name$_sequence = $sequence.name$_$relation_name$_object.sequence_type();
    //CollectionTypeFlag collection_flag;// Unused. No flags apply
    
    $relation_capname$CollectionHeader $sequence.name$_$relation_name$_header = $sequence.name$_$relation_name$_sequence.header();
    CommonCollectionHeader $sequence.name$_$relation_name$_commonheader = $sequence.name$_$relation_name$_header.common();
    ASSERT_EQ($array.typecode.maxsize$, $array.name$_$relation_name$_header_common.bound());

    $if(relation)$
    CompleteTypeDetail $sequence.name$_$relation_name$_detail = $sequence.name$_$relation_name$_header.detail();// not present for anonymous
    $check_optional_detail_annotations(ctx=ctx, object=sequence)$
    QualifiedTypeName $sequence.name$_$relation_name$_detail_type_name = $sequence.name$_$relation_name$_detail.type_name();
    ASSERT_EQ("$sequence.scopedname$", $sequence.name$_$relation_name$_detail_type_name);
    $endif$

    $relation_capname$CollectionElement $sequence.name$_$relation_name$_collection_element = $sequence.name$_$relation_name$_sequence.element();
    CommonCollectionElement $sequence.name$_$relation_name$_common_element = $sequence.name$_$relation_name$_collection_element.common();

    CollectionElementFlag $sequence.name$_$relation_name$_common_element_flags = $sequence.name$_$relation_name$_common_element.element_flags();
    {
    $check_member_flags(ctx=ctx, object=sequence, flags_var_name=["sequence"])$
    ASSERT_TRUE(sequence_expected_flags & $sequence.name$_$relation_name$_common_element_flags);
    }

    $get_type_identifier(typename=sequence.scopedname)$
    ASSERT_EQ($sequence.name$_$relation_name$_common_element_id->_d(), $sequence.name$_$relation_name$_type_identifier._d());
       
    $if(relation)$
    {
    CompleteElementDetail $sequence.name$_$relation_name$_detail = $sequence.name$_$relation_name$_collection_element.detail();
    $check_optional_detail_annotations(ctx=ctx, object=sequence)$
    }
    $endif$

    if($sequence.typecode.maxsize$ <= 100){
        ASSERT_EQ($sequence.typecode.maxsize$, $sequence.name$_$relation_name$_type_identifier.seq_sdefn().bound());
    }else{
        ASSERT_EQ($sequence.typecode.maxsize$, $sequence.name$_$relation_name$_type_identifier.seq_ldefn().bound());
    }
>>

check_map_type(ctx, map, relation, relation_name, relation_capname) ::= <<
    //=====check_map_type - $relation_name$ - $map.name$=====
    $get_type_identifier(typename=map.scopedname)$
    ASSERT_EQ(eprosima::fastrtps::types::EK_$if(relation)$COMPLETE$else$MINIMAL$endif$, $map.name$_$relation_name$_type_identifier._d());

    $get_type_identifier(typename=map.scopedname)$
    ASSERT_EQ(eprosima::fastrtps::types::EK_$if(relation)$COMPLETE$else$MINIMAL$endif$, $map.name$_$relation_name$_typeobject->_d());

    $relation_capname$TypeObject $map.name$_$relation_name$_object = $map.name$_$relation_name$_typeobject->$relation_name$();
    ASSERT_EQ(TK_MAP, $map.name$_$relation_name$_object._d());

    $relation_capname$MapType $map.name$_$relation_name$_map = $map.name$_$relation_name$_object.map_type();
    //CollectionTypeFlag collection_flag;// Unused. No flags apply
    
    //$relation_capname$CollectionHeader header;// Empty. Available for future extension

    CommonCollectionHeader $map.name$_$relation_name$_commonheader = $map.name$_$relation_name$_header.common();
    ASSERT_EQ($map.typecode.maxsize$, $map.name$_$relation_name$_commonheader.bound());

    $if(relation)$
    CompleteTypeDetail $map.name$_$relation_name$_detail = $map.name$_$relation_name$_header.detail();// not present for anonymous
    $check_optional_detail_annotations(ctx=ctx, object=map)$
    QualifiedTypeName $map.name$_$relation_name$_detail_type_name = $map.name$_$relation_name$_detail.type_name();
    ASSERT_EQ("$map.scopedname$", $map.name$_$relation_name$_detail_type_name);
    $endif$

    $relation_capname$CollectionElement $map.name$_$relation_name$_collection_key_element = $map.name$_$relation_name$_map.key();
    CommonCollectionElement $map.name$_$relation_name$_key_common_element = $map.name$_$relation_name$_collection_key_element.common();
    CollectionElementFlag $map.name$_$relation_name$_key_common_element_flags = $map.name$_$relation_name$_key_common_element.element_flags();
    {
    $check_member_flags(ctx=ctx, object=map.key, flags_var_name=["key_common_element"])$
    ASSERT_TRUE(key_common_element_expected_flags & $map.name$_$relation_name$_key_common_element_flags);
    }
    $get_type_identifier(typename=map.key.typecode.scopedname)$
    ASSERT_EQ($map.key.typecode.name$_$relation_name$_key_common_element_type_id->_d(), $map.name$_$relation_name$_key_common_element.type()._d());
      
    $if(relation)$
    {
    CompleteElementDetail $map.name$_$relation_name$_detail = $map.name$_$relation_name$_collection_key_element.detail();
    $check_optional_detail_annotations(ctx=ctx, object=map)$
    }
    $endif$

    $relation_capname$CollectionElement $map.name$_$relation_name$_element_collection_element = $map.name$_$relation_name$_map.element();
    CommonCollectionElement $map.name$_$relation_name$_element_common_element = $map.name$_$relation_name$_element_collection_element.common();
    CollectionElementFlag $map.name$_$relation_name$_element_common_element_flags = $map.name$_$relation_name$_element_common_element.element_flags();
    {
    $check_member_flags(ctx=ctx, object=map.element, flags_var_name=["element_common_element"])$
    ASSERT_TRUE(element_common_element_expected_flags & $map.name$_$relation_name$_element_common_element_flags);
    }
    $get_type_identifier(typename=map.element.typecode.scopedname)$
    ASSERT_EQ($map.element.typecode.name$_$relation_name$_element_common_element_type_id->_d(), $map.name$_$relation_name$_element_common_element.type()._d());

    $if(relation)$
    {
    CompleteElementDetail $map.name$_$relation_name$_detail = $map.name$_$relation_name$_element_collection_element.detail();
    $check_optional_detail_annotations(ctx=ctx, object=map)$
    }
    $endif$

    if($map.typecode.maxsize$ <= 100){
        ASSERT_EQ($map.typecode.maxsize$, $map.name$_$relation_name$_type_identifier.seq_sdefn().bound());
    }else{
        ASSERT_EQ($map.typecode.maxsize$, $map.name$_$relation_name$_type_identifier.seq_ldefn().bound());
    }
>>


test_typedef(typedefs) ::= <<
TEST(TypeObjectTests, TestTypedefTypeObject_$typedefs.name$)
{
    $check_alias_type(typedefs=typedefs)$
}
>>

test_structure(struct) ::= <<
TEST(TypeObjectTests, TestStructureTypeObject_$struct.name$)
{
    $check_struct_type(struct=struct)$ 
}
>>

test_union(union) ::= <<
TEST(TypeObjectTests, TestUnionTypeObject_$union.name$)
{
    $check_union_type(union=union)$ 
}
>>

test_enum(enum) ::= <<
TEST(TypeObjectTests, TestEnumTypeObject_$enum.name$)
{
    $check_enum_type(enum=enum)$ 
}
>>

test_bitmask(bitmask) ::= <<
TEST(TypeObjectTests, TestBitmaskTypeObject_$bitmask.name$)
{
    $check_bitmask_type(bitmask=bitmask)$ 
}
>>

test_bitset(bitset) ::= <<
TEST(TypeObjectTests, TestBitsetTypeObject_$bitset.name$)
{
    $check_bitset_type(bitset=bitset)$ 
}
>>

test_annotation(annotation) ::= <<
TEST(TypeObjectTests, TestAnnotationTypeObject_$annotation.name$)
{
    $check_annotation_type(annotation=annotation)$
}
>>

test_sequence(sequence) ::= <<
TEST(TypeObjectTests, TestSequenceTypeObject_$sequence_name(sequence)$)
{
    $check_sequence_type(sequence=sequence)$
}
>>

test_map(map) ::= <<
TEST(TypeObjectTests, TestMapTypeObject_$map_name(map)$)
{
    $check_map_type(map=map)$
}
>>

test_array(array) ::= <<
TEST(TypeObjectTests, TestArrayTypeObject_$array_name(array)$)
{
    $check_array_type(array=array)$
}
>>

test_string(string) ::= <<
TEST(TypeObjectTests, TestStringTypeObject_$string_name(name)$)
{
    $check_string_type(string=string)$
}
>>

test_wstring(wstring) ::= <<
TEST(TypeObjectTests, TestWstringTypeObject_$wstring_name(wstring)$)
{
    $check_wstring_type(wstring=wstring)$
}
>>

fwd_decl(ctx, parent, type) ::= <<>>

typedef_decl(ctx, parent, typedefs, typedefs_type, declarator_type) ::= <<
$declarator_type$
$typedefs_type$
$test_typedef(typedefs=typedefs)$
>>

struct_type(ctx, parent, struct, member_list) ::= <<
$member_list$
$test_structure(struct=struct)$
>>

union_type(ctx, parent, union, switch_type) ::= <<
$switch_type$
$test_union(union=union)$
>>

enum_type(ctx, parent, enum) ::= <<
$test_enum(enum=enum)$
>>

bitmask_type(ctx, parent, bitmask) ::= <<
$test_bitmask(bitmask=bitmask)$
>>

bitset_type(ctx, parent, bitset, extensions) ::= <<
$test_bitset(bitset=bitset)$
>>

annotation(ctx, annotation) ::= <<
$test_annotation(annotation=annotation)$
>>

module(ctx, parent, module, definition_list) ::= <<
$definition_list$
>>

definition_list(definitions) ::= <<
$definitions;separator="\n"$
>>

const_decl(ctx, parent, const, const_type) ::= <<
$const_type$
>>

member_type(ctx, member, type_member, declarators) ::= <<
$type_member$
$declarators$
>>

element_type(ctx, element, type_element, declarator) ::= <<>>

sequence_type(ctx, sequence, type_sequence) ::= <<
$type_sequence$
$test_sequence(sequence=sequence)$
>>

map_type(ctx, map, key_type, value_type) ::= <<
$key_type$
$value_type$
$test_map(map=map)$
>>

string_type(ctx, string) ::= <<
$test_string(string=string)$
>>

wide_string_type(ctx, wstring) ::= <<
$test_wstring(wstring=wstring)$
>>

array_declarator(ctx, array, array_type) ::= <<
$test_array(array=array)$
>>

sequence_name(sequence) ::= <<
anonymous_sequence_$sequence.contentTypeCode.cppTypename$_$if(sequence.unbound)$4294967295$else$$sequence.evaluatedMaxsize$$endif$
>>

map_name(map) ::= <<
anonymous_map_$map.keyTypeCode.cppTypename$_$map.valueTypeCode.cppTypename$_$if(map.isBounded)$$map.evaluatedMaxsize$$else$4294967295$endif$
>>

array_name(array, array_type) ::= <<
anonymous_array_$array_type$$array.evaluatedDimensions : { dimension | _$dimension$}$
>>

string_name(string) ::= <<
anonymous_string_$if(string.isBounded)$$string.evaluatedMaxsize$$else$4294967295$endif$
>>

wstring_name(wstring) ::= <<
anonymous_wstring_$if(wstring.isBounded)$$wstring.evaluatedMaxsize$$else$4294967295$endif$
>>

check_direct_hash_type_identifier(typeid) ::= <<
EXPECT_TRUE(($typeid$.type_identifier1()._d() == EK_MINIMAL && $typeid$.type_identifier2()._d() == EK_COMPLETE) ||
    ($typeid$.type_identifier2()._d() == EK_MINIMAL && $typeid$.type_identifier1()._d() == EK_COMPLETE));
>>
