// Copyright 2023 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

group XTypesTypeObjectHeader;

import "eprosima.stg"

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx, file=[ctx.filename, "TypeObjectSupport.hpp"], description=["Header file containing the API required to register the TypeObject representation of the described types in the IDL file"])$

#ifndef _FAST_DDS_GENERATED_$ctx.headerGuardName$_TYPE_OBJECT_H_
#define _FAST_DDS_GENERATED_$ctx.headerGuardName$_TYPE_OBJECT_H_

#include <mutex>

$ctx.directIncludeDependencies : { include | #include "$include$TypeObjectSupport.hpp"}; separator="\n"$

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

/**
 * @brief Register every TypeObject representation defined in the IDL file in Fast DDS TypeObjectRegistry.
 */
eProsima_user_DllExport void register_$ctx.filename$_type_objects()
{
    static std::once_flag once_flag;
    std::call_once(once_flag, []()
            {
                $ctx.definitions: { def | $register_type(ctx=ctx, object=def)$}; separator="\n"$
            });
}

#ifndef DOXYGEN_SHOULD_SKIP_THIS_PUBLIC

$definitions; separator="\n"$

#endif // DOXYGEN_SHOULD_SKIP_THIS_PUBLIC

#endif // _FAST_DDS_GENERATED_$ctx.headerGuardName$_TYPE_OBJECT_H_

>>

module(ctx, parent, module, definition_list) ::= <<
namespace $module.name$ {
$definition_list$
} // namespace $module.name$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

annotation(ctx, annotation) ::= <<
$if(annotation.enums || annotation.typeDefs)$
namespace $annotation.ROS2Scopedname$ {
    $annotation.enums : { it | $enum_type(ctx=ctx, parent=annotation, enum=it)$}; separator="\n"$
    $annotation.typeDefs : { it | $typedef_decl(ctx=ctx, parent=annotation, typedefs=it)$}; separator="\n"$
} // namespace $annotation.ROS2Scopedname$
$endif$
>>

const_decl(ctx, parent, const, const_type) ::= <<
$const_type$
>>

typedef_decl(ctx, parent, typedefs, typedefs_type, declarator_type) ::= <<
$declarator_type$
$typedefs_type$
$register_type_identifier(typename=typedefs.name)$
>>

fwd_decl(ctx, parent, type) ::= <<>>

struct_type(ctx, parent, struct, member_list) ::= <<
$member_list$
$register_type_identifier(typename=struct.name)$
>>

member_type(ctx, member, type_member, declarators) ::= <<
$type_member$
$declarators$
>>

union_type(ctx, parent, union, extensions, switch_type) ::= <<
$switch_type$
$register_type_identifier(typename=union.name)$
>>

element_type(ctx, element, type_element, declarator) ::= <<
$type_element$
$declarator$
>>

bitset_type(ctx, parent, bitset, extensions) ::= <<
$register_type_identifier(typename=bitset.name)$
>>

enum_type(ctx, parent, enum) ::= <<
$register_type_identifier(typename=enum.name)$
>>

bitmask_type(ctx, parent, bitmask) ::= <<
$register_type_identifier(typename=bitmask.name)$
>>

sequence_type(ctx, sequence, type_sequence) ::= <<
$type_sequence$
$register_type_identifier(typename=sequence_name(sequence))$
>>

map_type(ctx, map, key_type, value_type) ::= <<
$key_type$
$value_type$
$register_type_identifier(typename=map_name(map))$
>>

string_type(ctx, string) ::= <<
$register_type_identifier(typename=string_name(string))$
>>

wide_string_type(ctx, wstring) ::= <<
$register_type_identifier(typename=wstring_name(wstring))$
>>

array_declarator(ctx, array) ::= <<
$register_type_identifier(typename=array_name(array))$
>>

/***** Utils *****/
register_type(ctx, object) ::= <%
$if (!object.isModule)$
$if(!object.isConstDeclaration)$
register_$object.name$_type_identifier();
$endif$
$endif$
%>


register_type_identifier(typename) ::= <<
/**
 * @brief Register $typename$ related TypeIdentifier.
 *        Fully-descriptive TypeIdentifiers are directly registered.
 *        Hash TypeIdentifiers require to fill the TypeObject information and hash it, consequently, the TypeObject is
 *        indirectly registered as well.
 */
void register_$typename$_type_identifier()
>>
