// Copyright 2025 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

group ProtocolHeader;

import "eprosima.stg"
import "com/eprosima/fastcdr/idl/templates/FastCdrCommon.stg"

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx,  file=[ctx.filename, "Server.ipp"], description=["Server implementation for interfaces"])$

$definitions; separator="\n"$
>>

module(ctx, parent, module, definition_list) ::= <<
namespace $module.name$ {

$definition_list$

} // namespace $module.name$

>>

interface(ctx, parent, interface, export_list) ::= <<
//{ interface $interface.name$

namespace detail {

namespace fdds = eprosima::fastdds::dds;
namespace frpc = eprosima::fastdds::dds::rpc;
namespace frtps = eprosima::fastdds::rtps;

$interface.all_operations:{op | $operation_implementation(interface, op)$}; separator="\n"$

}  // namespace detail

//} interface $interface.name$

>>

operation_implementation(interface, op) ::= <<
$if(op.annotationFeed)$
void $interface.name$ServerLogic::$op.name$(
        const ClientContext& info,
$if(op.parameters)$
        $operation_parameters(op.parameters)$,
$endif$
        /*result*/ frpc::RpcServerWriter<$paramRetType(op.rettype)$>& result_writer)
$else$
$if(op.parameters)$
$paramRetType(op.rettype)$ $interface.name$ServerLogic::$op.name$(
        const ClientContext& info,
        $operation_parameters(op.parameters)$)
$else$
$paramRetType(op.rettype)$ $interface.name$ServerLogic::$op.name$(
        const ClientContext& info)
$endif$
$endif$
{
    static_cast<void>(info);
    $op.parameters : {param | static_cast<void>($param.name$);}; anchor, separator="\n"$
    $if(op.annotationFeed)$
    static_cast<void>(result_writer);
    $endif$
    throw frpc::RemoteUnsupportedError("Operation '$op.name$' is not implemented");
}
>>

operation_parameters(params) ::= <<
$params : {param | /*$param.comment$*/ $if(param.output)$$paramTypeByRef(typecode=param.typecode)$$else$$paramTypeByValue(typecode=param.typecode, feed=param.annotationFeed, is_server=true)$$endif$ $param.name$}; anchor, separator=",\n"$
>>
