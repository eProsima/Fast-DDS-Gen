// Copyright 2023 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

group XTypesTypeObjectSource;

import "eprosima.stg"

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx, file=[ctx.filename, "TypeObjectSupport.cxx"], description=["Source file containing the implementation to register the TypeObject representation of the described types in the IDL file"])$

#include "$ctx.filename$TypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/dynamic_types/Types.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

using namespace eprosima::fastdds::dds::xtypes;

void register_$ctx.filename$_type_objects()
{
    static std::once_flag once_flag;
    std::call_once(once_flag, []()
            {
                $ctx.definitions: { def | $register_type(ctx=ctx, object=def)$}; separator=""$
            });
}

$definitions; separator=""$

>>

module(ctx, parent, module, definition_list) ::= <<
namespace $module.name$ {
$definition_list$
} // namespace $module.name$

>>

definition_list(definitions) ::= <%
$definitions; separator=""$
%>

annotation(ctx, annotation) ::= <<
void register_$annotation.CScopedname$_type_identifier()
{
    AnnotationTypeFlag annotation_flag = 0;
    CompleteAnnotationHeader header = TypeObjectUtils::build_complete_annotation_header(
            "$annotation.scopedname$");
    CompleteAnnotationParameterSeq member_seq;
    $if (annotation.members)$
    $annotation.members: { member | $annotation_parameter(param=member)$}; separator="\n"$
    $endif$
    CompleteAnnotationType annotation_type = TypeObjectUtils::build_complete_annotation_type(annotation_flag, header,
            member_seq);
    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
            TypeObjectUtils::build_and_register_annotation_type_object(annotation_type, "$annotation.scopedname$"))
    {
        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
            "$annotation.scopedname$ already registered in TypeObjectRegistry for a different type.");
    }
}

>>

annotation_parameter(param) ::= <<
{
    ReturnCode_t return_code;
    TypeIdentifierPair type_ids;
    AnnotationParameterFlag member_flags = 0;
    $get_type_identifier(type=param.typecode)$
    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
    {
        $if (param.typecode.isAliasType)$
        $register_alias_type(alias=param.typecode)$
        $elseif (param.typecode.isEnumType)$
        $register_enum_type(enum=param.typecode)$
        $elseif (param.typecode.isStringType)$
        $register_string_type(string=param.typecode)$
        $elseif (param.typecode.isWStringType)$
        $register_wstring_type(wstring=param.typecode)$
        $else$
        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "$param.name$ annotation parameter TypeIdentifier unknown to TypeObjectRegistry.");
        return;
        $endif$
    }
    CommonAnnotationParameter common;
    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d())
    {
        common = TypeObjectUtils::build_common_annotation_parameter(member_flags, type_ids.type_identifier1());
    }
    else if (EK_COMPLETE == type_ids.type_identifier2()._d())
    {
        common = TypeObjectUtils::build_common_annotation_parameter(member_flags, type_ids.type_identifier2());
    }
    else
    {
        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "$param.name$ annotation parameter TypeIdentifier inconsistent.");
        return;
    }
    $annotation_parameter_value(param=param)$
    CompleteAnnotationParameter param = TypeObjectUtils::build_complete_annotation_parameter(common,
            "$param.name$", param_value);
    TypeObjectUtils::add_complete_annotation_parameter(member_seq, param);
}
>>

struct_type(ctx, parent, struct, member_list) ::= <<
void register_$struct.CScopedname$_type_identifier()
{
    $register_struct_type(struct)$
}

>>

union_type(ctx, parent, union, extensions, switch_type) ::= <<
void register_$union.CScopedname$_type_identifier()
{
}

>>

/***** Utils *****/
register_type(ctx, object) ::= <<
$if (object.isTypeDeclaration)$
$if ((object.typeCode.isStructType || object.typeCode.isUnionType) && !object.typeCode.forwarded)$
$if (!object.scope.empty)$$object.scope$::$endif$register_$object.CScopedname$_type_identifier();
$endif$
$elseif (object.isAnnotation)$
$if (!object.scope.empty)$$object.scope$::$endif$register_$object.CScopedname$_type_identifier();
$endif$
>>

get_type_identifier(type) ::= <<
$if (type.primitive && !type.isEnumType)$
$get_type_identifier_registry(typename=["_", type.cppTypenameForTypeId])$
$elseif (type.isStringType)$
$get_type_identifier_registry(typename=string_name(string=type))$
$elseif (type.isWStringType)$
$get_type_identifier_registry(typename=wstring_name(wstring=type))$
$elseif (type.isArrayType)$
$get_type_identifier_registry(typename=array_name(array=type))$
$elseif (type.isSequenceType)$
$get_type_identifier_registry(typename=sequence_name(sequence=type))$
$elseif (type.isMapType)$
$get_type_identifier_registry(typename=map_name(map=type))$
$else$
$get_type_identifier_registry(typename=type.scopedname)$
$endif$
>>

get_type_identifier_registry(typename) ::= <<
return_code =
    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
    "$typename$", type_ids);
>>

get_type_object(type) ::= <<
$if (type.primitive)$
$get_type_object_registry(typename=["_", type.cppTypenameForTypeId])$
$elseif (type.isStringType)$
$get_type_object_registry(typename=string_name(string=type))$
$elseif (type.isWStringType)$
$get_type_object_registry(typename=wstring_name(wstring=type))$
$elseif (type.isArrayType)$
$get_type_object_registry(typename=array_name(array=type))$
$elseif (type.isSequenceType)$
$get_type_object_registry(typename=sequence_name(sequence=type))$
$elseif (type.isMapType)$
$get_type_object_registry(typename=map_name(map=type))$
$else$
$get_type_object_registry(typename=type.scopedname)$
$endif$
>>

get_type_object_registry(typename) ::= <<
return_code =
    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_objects(
    "$typename$", type_objects);
>>

applied_annotation_sequence(annotation, typename) ::= <<
{
eprosima::fastcdr::optional<AppliedAnnotationParameterSeq> applied_annotation_parameter_seq;
AppliedAnnotationParameterSeq tmp_applied_annotation_parameter_seq;
$if (annotation.valueList)$
$annotation.valueList : { param |
{
    $annotation_parameter_value(param=param)$
    AppliedAnnotationParameter applied_param = TypeObjectUtils::build_applied_annotation_parameter(
            TypeObjectUtils::name_hash("$param.name$"), param_value);
    TypeObjectUtils::add_applied_annotation_parameter(tmp_applied_annotation_parameter_seq, applied_param);
\}
}; separator="\n"$
$endif$
    {
        AppliedAnnotation applied_annotation;
        $get_type_identifier_registry(typename=annotation.scopedname)$
        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "$typename$: Given Annotation TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
        if (!tmp_applied_annotation_parameter_seq.empty())
        {
            applied_annotation_parameter_seq = tmp_applied_annotation_parameter_seq;
        }
        if (EK_COMPLETE == type_ids.type_identifier1()._d())
        {
            applied_annotation = TypeObjectUtils::build_applied_annotation(type_ids.type_identifier1(), applied_annotation_parameter_seq);
        }
        else if (EK_COMPLETE == type_ids.type_identifier2()._d())
        {
            applied_annotation = TypeObjectUtils::build_applied_annotation(type_ids.type_identifier2(), applied_annotation_parameter_seq);
        }
        else
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "$typename$: Given Annotation TypeIdentifier is inconsistent.");
            return;
        }
        TypeObjectUtils::add_applied_annotation(tmp_ann_custom, applied_annotation);
    \}
}
>>

annotation_parameter_value(param) ::= <<
$if (param.typecode.isEnumType)$
AnnotationParameterValue param_value = TypeObjectUtils::build_annotation_parameter_value_enum($param.value$);
$elseif (param.typecode.isByteType)$
AnnotationParameterValue param_value = TypeObjectUtils::build_annotation_parameter_value_byte($param.value$);
$elseif (param.typecode.isStringType)$
AnnotationParameterValue param_value = TypeObjectUtils::build_annotation_parameter_value("$param.value$");
$elseif (param.typecode.isWStringType)$
AnnotationParameterValue param_value = TypeObjectUtils::build_annotation_parameter_value(L"$param.value$");
$else$
AnnotationParameterValue param_value = TypeObjectUtils::build_annotation_parameter_value(static_cast<$param.typecode.cppTypename$>($param.value$));
$endif$
>>

applied_verbatim_annotation(annotation) ::= <<
PlacementKindValue placement = BEFORE_DECLARATION;
eprosima::fastcdr::fixed_string<32> language = "*";
std::string text;
$annotation.valueList : { verbatim_param |
$if (verbatim_param.isVerbatimPlacement)$
placement = $verbatim_param.enumStringValue$;
$elseif (verbatim_param.isVerbatimLanguage)$
language = "$verbatim_param.value$";
$elseif (verbatim_param.isVerbatimText)$
text = "$verbatim_param.value$";
$endif$
}; separator="\n"$
verbatim = TypeObjectUtils::build_applied_verbatim_annotation(placement, language, text);
type_ann_builtin = TypeObjectUtils::build_applied_builtin_type_annotations(verbatim);
>>

register_struct_type(struct) ::= <<
{
    StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(
    $if (struct.annotationAppendable)$
        eprosima::fastdds::dds::ExtensibilityKind::APPENDABLE,
    $elseif (struct.annotationFinal)$
        eprosima::fastdds::dds::ExtensibilityKind::FINAL,
    $elseif (struct.annotationMutable)$
        eprosima::fastdds::dds::ExtensibilityKind::MUTABLE,
    $endif$
        $struct.annotationNested$, $struct.annotationAutoidHash$);
    $if (struct.inheritance || struct.members || struct.annotationList)$
    ReturnCode_t return_code;
    TypeIdentifierPair type_ids;
    $endif$
    $if (struct.inheritance)$
    $get_type_identifier(type=struct.inheritance)$
    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
    {
        $register_struct_type(struct.inheritance)$
    }
    TypeObjectPair type_objects;
    $get_type_object(type=struct.inheritance)$
    $endif$
    $complete_type_detail(type=struct, type_kind=" Structure")$
    CompleteStructHeader header;
    $if (struct.inheritance)$
    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier1()._d())
    {
        header = TypeObjectUtils::build_complete_struct_header(type_ids.type_identifier1(), detail);
    }
    else if (EK_COMPLETE == type_ids.type_identifier2()._d())
    {
        header = TypeObjectUtils::build_complete_struct_header(type_ids.type_identifier2(), detail);
    }
    else
    {
        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "$struct.scopedname$ Structure: base_type TypeIdentifier registered in TypeObjectRegistry is inconsistent.");
        return;
    }
    $else$
    header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
    $endif$
    CompleteStructMemberSeq member_seq;
    $if (struct.members)$
    $struct.members: { member | $struct_member(member=member, parent=struct)$}; separator="\n"$
    $endif$
    CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
            TypeObjectUtils::build_and_register_struct_type_object(struct_type, "$struct.scopedname$"))
    {
        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
            "$struct.scopedname$ already registered in TypeObjectRegistry for a different type.");
    }
}
>>

struct_member(member, parent) ::= <<
{
    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(
    $if (member.annotationDiscard)$
        eprosima::fastdds::dds::TryConstructKind::DISCARD,
    $elseif (member.annotationUseDefault)$
        eprosima::fastdds::dds::TryConstructKind::USE_DEFAULT,
    $elseif (member.annotationTrim)$
        eprosima::fastdds::dds::TryConstructKind::TRIM,
    $endif$
        $member.annotationOptional$, $member.annotationMustUnderstand$, $member.annotationKey$, $member.annotationExternal$);
    $get_type_identifier(type=member.typecode)$
    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
    {
        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "$member.name$ Structure member TypeIdentifier unknown to TypeObjectRegistry.");
        return;
    }
    CommonStructMember common;
    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
    {
        common = TypeObjectUtils::build_common_struct_member($member.id$, member_flags, type_ids.type_identifier1());
    }
    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
    {
        common = TypeObjectUtils::build_common_struct_member($member.id$, member_flags, type_ids.type_identifier2());
    }
    else
    {
        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "Structure $member.name$ member TypeIdentifier inconsistent.");
        return;
    }
    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
    ann_custom.reset();
    $if (member.annotationList)$
    AppliedAnnotationSeq tmp_ann_custom;
    eprosima::fastcdr::optional<std::string> unit;
    eprosima::fastcdr::optional<AnnotationParameterValue> min;
    eprosima::fastcdr::optional<AnnotationParameterValue> max;
    eprosima::fastcdr::optional<std::string> hash_id;
    $member.annotationList : { annotation |
    $if (annotation.isUnit)$
    unit = $annotation.value$;
    $elseif (annotation.isMin || annotation.isMax || annotation.isRange)$
    EPROSIMA_LOG_WARNING(XTYPES_TYPE_REPRESENTATION,
            "$parent.scopedname$ Structure $member.name$ member: @min, @max, and @range builtin annotations not yet supported");
    $elseif (annotation.isHashId)$
    hash_id = $annotation.value$;
    $elseif (!annotation.isBuiltin)$
    $applied_annotation_sequence(annotation=annotation, typename=[parent.scopedname, " ", member.name, " member"])$
    $endif$
    }; separator="\n"$
    member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
    if (!tmp_ann_custom.empty())
    {
        ann_custom = tmp_ann_custom;
    }
    $endif$
    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail("$member.name$", member_ann_builtin,
            ann_custom);
    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
    TypeObjectUtils::add_complete_struct_member(member_seq, member);
}
>>

register_enum_type(enum) ::= <<
EnumTypeFlag enum_flags = 0;
CommonEnumeratedHeader common = TypeObjectUtils::build_common_enumerated_header($enum.bitBound$);
$complete_type_detail(type=enum, type_kind=" Enum")$
CompleteEnumeratedHeader header = TypeObjectUtils::build_complete_enumerated_header(common, detail);
CompleteEnumeratedLiteralSeq literal_seq;
int32_t value = 0; // TODO(jlbueno): remove
$enum.members: { member | $enum_literal(literal=member, parent=enum)$}; separator="\n"$
CompleteEnumeratedType enumerated_type = TypeObjectUtils::build_complete_enumerated_type(enum_flags, header,
        literal_seq);
if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
        TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type, "$enum.scopedname$"))
{
    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
        "$enum.scopedname$ already registered in TypeObjectRegistry for a different type.");
}
$get_type_identifier_registry(typename=enum.scopedname)$
if (return_code != eprosima::fastdds::dds::RETCODE_OK)
{
    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "$enum.scopedname$: Given Annotation TypeIdentifier unknown to TypeObjectRegistry.");
    return;
}
>>

enum_literal(literal, parent) ::= <<
{
    EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag($literal.annotationDefaultLiteral$);
    // TODO(jlbueno): getIndex
    CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(value, flags);
    value++; // TODO(jlbueno): remove
    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
    ann_custom.reset();
    $if (member.annotationList)$
    AppliedAnnotationSeq tmp_ann_custom;
    eprosima::fastcdr::optional<std::string> unit;
    eprosima::fastcdr::optional<AnnotationParameterValue> min;
    eprosima::fastcdr::optional<AnnotationParameterValue> max;
    eprosima::fastcdr::optional<std::string> hash_id;
    $member.annotationList : { annotation |
    $if (annotation.isUnit || annotation.isMin || annotation.isMax || annotation.isRange || annotation.isHashId)$
    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
            "$parent.scopedname$ Enumerated $member.name$ literal: only @default_literal and @value builtin annotations apply to literals");
    return;
    $elseif (!annotation.isBuiltin)$
    $applied_annotation_sequence(annotation=annotation, typename=[parent.scopedname, " ", member.name, " member"])$
    $endif$
    }; separator="\n"$
    member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
    if (!tmp_ann_custom.empty())
    {
        ann_custom = tmp_ann_custom;
    }
    $endif$
    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail("$member.name$", member_ann_builtin,
            ann_custom);
    CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
    TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
}
>>

register_alias_type(alias) ::= <<>>

register_wstring_type(wstring) ::= <<>>

register_string_type(string) ::= <<>>

complete_type_detail(type, type_kind) ::= <<
eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
$if (type.annotationList)$
AppliedAnnotationSeq tmp_ann_custom;
eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim;
$type.annotationList : { annotation |
$if (annotation.isVerbatim)$
$applied_verbatim_annotation(annotation=annotation)$
$elseif (!annotation.isBuiltin)$
$applied_annotation_sequence(annotation=annotation, typename=[type.scopedname, type_kind])$
$endif$
}; separator="\n"$
if (!tmp_ann_custom.empty())
{
    ann_custom = tmp_ann_custom;
}
$endif$
CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom,
        "$type.scopedname$");
>>
