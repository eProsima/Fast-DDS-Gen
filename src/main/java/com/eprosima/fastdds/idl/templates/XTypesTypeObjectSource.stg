// Copyright 2023 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

group XTypesTypeObjectSource;

import "eprosima.stg"

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx, file=[ctx.filename, "TypeObjectSupport.cxx"], description=["Source file containing the implementation to register the TypeObject representation of the described types in the IDL file"])$

#include "$ctx.filename$TypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/dynamic_types/Types.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

$ctx.directIncludeDependencies : {include | #include "$include$.hpp"}; separator="\n"$

using namespace eprosima::fastdds::dds::xtypes;

void register_$ctx.filename$_type_objects()
{
    static std::once_flag once_flag;
    std::call_once(once_flag, []()
            {
                $ctx.definitions: { def | $register_type(ctx=ctx, object=def)$}; separator=""$
            });
}

$definitions; separator=""$

>>

module(ctx, parent, module, definition_list) ::= <<
namespace $module.name$ {
$definition_list$
} // namespace $module.name$

>>

definition_list(definitions) ::= <%
$definitions; separator=""$
%>

annotation(ctx, annotation) ::= <<
void register_$annotation.CScopedname$_type_identifier()
{
    $register_annotation_type(annotation=annotation)$
}

>>

struct_type(ctx, parent, struct, member_list) ::= <<
void register_$struct.CScopedname$_type_identifier()
{
    $register_struct_type(struct)$
}

>>

union_type(ctx, parent, union, extensions, switch_type) ::= <<
void register_$union.CScopedname$_type_identifier()
{
    $register_union_type(union)$
}

>>

/***** Utils *****/
register_type(ctx, object) ::= <<
$if (object.isTypeDeclaration)$
$if ((object.typeCode.isStructType || object.typeCode.isUnionType) && !object.typeCode.forwarded)$
$if (!object.scope.empty)$$object.scope$::$endif$register_$object.CScopedname$_type_identifier();
$endif$
$elseif (object.isAnnotation)$
$if (!object.scope.empty)$$object.scope$::$endif$register_$object.CScopedname$_type_identifier();
$endif$
>>

get_type_identifier(type) ::= <<
$if (type.isAliasType)$
$get_type_identifier_registry(typename=type.scopedname)$
$elseif (type.isByteType)$
$get_type_identifier_registry(typename="_byte")$
$elseif (type.primitive && !type.isEnumType)$
$get_type_identifier_registry(typename=["_", type.cppTypenameForTypeId])$
$elseif (type.isStringType)$
$get_type_identifier_registry(typename=string_name(string=type))$
$elseif (type.isWStringType)$
$get_type_identifier_registry(typename=wstring_name(wstring=type))$
$elseif (type.isArrayType)$
$get_type_identifier_registry(typename=array_name(array=type))$
$elseif (type.isSequenceType)$
$get_type_identifier_registry(typename=sequence_name(sequence=type))$
$elseif (type.isMapType)$
$get_type_identifier_registry(typename=map_name(map=type))$
$else$
$get_type_identifier_registry(typename=type.scopedname)$
$endif$
>>

get_type_identifier_registry(typename) ::= <<
return_code =
    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
    "$typename$", type_ids);
>>

get_type_object(type) ::= <<
$if (type.isAliasType)$
$get_type_object_registry(typename=type.scopedname)$
$elseif (type.isArrayType)$
$get_type_object_registry(typename=array_name(array=type))$
$elseif (type.isSequenceType)$
$get_type_object_registry(typename=sequence_name(sequence=type))$
$elseif (type.isMapType)$
$get_type_object_registry(typename=map_name(map=type))$
$else$
$get_type_object_registry(typename=type.scopedname)$
$endif$
>>

get_type_object_registry(typename) ::= <<
return_code =
    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_objects(
    "$typename$", type_objects);
>>

applied_annotation_sequence(annotation, typename) ::= <<
{
eprosima::fastcdr::optional<AppliedAnnotationParameterSeq> applied_annotation_parameter_seq;
AppliedAnnotationParameterSeq tmp_applied_annotation_parameter_seq;
$if (annotation.valueList)$
$annotation.valueList : { param |
{
    NameHash paramname_hash = TypeObjectUtils::name_hash("$param.name$");
    $annotation_parameter_value(param=param, type=param.typecode)$
    AppliedAnnotationParameter applied_param = TypeObjectUtils::build_applied_annotation_parameter(paramname_hash,
            param_value);
    TypeObjectUtils::add_applied_annotation_parameter(tmp_applied_annotation_parameter_seq, applied_param);
\}
}; separator="\n"$
$endif$
    {
        AppliedAnnotation applied_annotation;
        $get_type_identifier_registry(typename=annotation.scopedname)$
        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "$typename$: Given Annotation TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
        if (!tmp_applied_annotation_parameter_seq.empty())
        {
            applied_annotation_parameter_seq = tmp_applied_annotation_parameter_seq;
        }
        if (EK_COMPLETE == type_ids.type_identifier1()._d())
        {
            applied_annotation = TypeObjectUtils::build_applied_annotation(type_ids.type_identifier1(), applied_annotation_parameter_seq);
        }
        else if (EK_COMPLETE == type_ids.type_identifier2()._d())
        {
            applied_annotation = TypeObjectUtils::build_applied_annotation(type_ids.type_identifier2(), applied_annotation_parameter_seq);
        }
        else
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "$typename$: Given Annotation TypeIdentifier is inconsistent.");
            return;
        }
        TypeObjectUtils::add_applied_annotation(tmp_ann_custom, applied_annotation);
    \}
}
>>

annotation_parameter_value(param, type) ::= <<
$if (type.isAliasType)$
$annotation_parameter_value(param=param, type=param.typecode.typedefContentTypeCode)$
$elseif (type.isEnumType)$
AnnotationParameterValue param_value = TypeObjectUtils::build_annotation_parameter_value_enum($param.value$);
$elseif (type.isByteType)$
AnnotationParameterValue param_value = TypeObjectUtils::build_annotation_parameter_value_byte($param.value$);
$elseif (param.typecode.isStringType)$
AnnotationParameterValue param_value = TypeObjectUtils::build_annotation_parameter_value(eprosima::fastcdr::fixed_string<128>("$param.value$"));
$else$
AnnotationParameterValue param_value = TypeObjectUtils::build_annotation_parameter_value(static_cast<$type.cppTypename$>($param.value$));
$endif$
>>

applied_verbatim_annotation(annotation) ::= <<
PlacementKindValue placement = BEFORE_DECLARATION;
eprosima::fastcdr::fixed_string<32> language = "*";
std::string text;
$annotation.valueList : { verbatim_param |
$if (verbatim_param.isVerbatimPlacement)$
placement = $verbatim_param.enumStringValue$;
$elseif (verbatim_param.isVerbatimLanguage)$
language = "$verbatim_param.value$";
$elseif (verbatim_param.isVerbatimText)$
text = "$verbatim_param.value$";
$endif$
}; separator="\n"$
verbatim = TypeObjectUtils::build_applied_verbatim_annotation(placement, language, text);
type_ann_builtin = TypeObjectUtils::build_applied_builtin_type_annotations(verbatim);
>>

register_alias_type(alias) ::= <<
$! TODO(jlbueno): annotated collections aliases are considered non-anonymous collections.
                  pending implementation of annotated collection support !$
AliasTypeFlag alias_flags = 0;
$complete_type_detail(type=alias, type_kind=" Alias")$
CompleteAliasHeader header = TypeObjectUtils::build_complete_alias_header(detail);
AliasMemberFlag related_flags = 0;
$get_type_identifier(type=alias.typedefContentTypeCode)$
$check_register_type_identifier(type=alias.typedefContentTypeCode, message=[alias.scopedname, " related"])$
CommonAliasBody common;
$check_first_returned_type_identifier_pair()$
{
    common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier1());
}
$check_second_returned_type_identifier_pair()$
{
    common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier2());
}
else
{
    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
            "$alias.scopedname$ related TypeIdentifier inconsistent.");
    return;
}
eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
ann_custom.reset();
$if (alias.annotationList)$
eprosima::fastcdr::optional<std::string> unit;
eprosima::fastcdr::optional<AnnotationParameterValue> min;
eprosima::fastcdr::optional<AnnotationParameterValue> max;
eprosima::fastcdr::optional<std::string> hash_id;
$alias.annotationList : { annotation |
$if (annotation.isUnit)$
unit = $annotation.value$;
$elseif (annotation.isMin || annotation.isMax || annotation.isRange)$
EPROSIMA_LOG_WARNING(XTYPES_TYPE_REPRESENTATION,
        "$alias.scopedname$ Alias: @min, @max, and @range builtin annotations not yet supported");
$elseif (annotation.isHashId)$
EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
        "$alias.scopedname$ Alias: @hashid builtin annotation does not apply to aliases");
return;
$endif$
}; separator="\n"$
member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
$endif$
CompleteAliasBody body = TypeObjectUtils::build_complete_alias_body(common, member_ann_builtin, ann_custom);
CompleteAliasType alias_type = TypeObjectUtils::build_complete_alias_type(alias_flags, header, body);
if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
        TypeObjectUtils::build_and_register_alias_type_object(alias_type, type_name.to_string()))
{
    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
        "$alias.scopedname$ already registered in TypeObjectRegistry for a different type.");
}
$get_type_identifier_registry(typename=alias.scopedname)$
if (return_code != eprosima::fastdds::dds::RETCODE_OK)
{
    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "$alias.scopedname$: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
    return;
}
>>

register_annotation_type(annotation) ::= <<
AnnotationTypeFlag annotation_flag = 0;
QualifiedTypeName annotation_name = "$annotation.scopedname$";
CompleteAnnotationHeader header = TypeObjectUtils::build_complete_annotation_header(annotation_name);
CompleteAnnotationParameterSeq member_seq;
$if (annotation.members)$
$annotation.members: { member | $annotation_parameter(param=member)$}; separator="\n"$
$endif$
CompleteAnnotationType annotation_type = TypeObjectUtils::build_complete_annotation_type(annotation_flag, header,
        member_seq);
if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
        TypeObjectUtils::build_and_register_annotation_type_object(annotation_type, annotation_name))
{
    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
        "$annotation.scopedname$ already registered in TypeObjectRegistry for a different type.");
}
>>

annotation_parameter(param) ::= <<
{
    ReturnCode_t return_code;
    TypeIdentifierPair type_ids;
    AnnotationParameterFlag member_flags = 0;
    $get_type_identifier(type=param.typecode)$
    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
    {
        $if (param.typecode.isAliasType)$
        $register_alias_type(alias=param.typecode)$
        $elseif (param.typecode.isEnumType)$
        $register_enum_type(enum=param.typecode)$
        $elseif (param.typecode.isStringType)$
        $register_string_type(string=param.typecode)$
        $elseif (param.typecode.isWStringType)$
        $register_wstring_type(wstring=param.typecode)$
        $else$
        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "$param.name$ annotation parameter TypeIdentifier unknown to TypeObjectRegistry.");
        return;
        $endif$
    }
    CommonAnnotationParameter common;
    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d())
    {
        common = TypeObjectUtils::build_common_annotation_parameter(member_flags, type_ids.type_identifier1());
    }
    else if (EK_COMPLETE == type_ids.type_identifier2()._d())
    {
        common = TypeObjectUtils::build_common_annotation_parameter(member_flags, type_ids.type_identifier2());
    }
    else
    {
        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "$param.name$ annotation parameter TypeIdentifier inconsistent.");
        return;
    }
    MemberName name = "$param.name$";
    $annotation_parameter_value(param=param, type=param.typecode)$
    CompleteAnnotationParameter param = TypeObjectUtils::build_complete_annotation_parameter(common, name, param_value);
    TypeObjectUtils::add_complete_annotation_parameter(member_seq, param);
}
>>

register_struct_type(struct) ::= <<
{
    StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag($extensibility(object=struct)$
            $struct.annotationNested$, $struct.annotationAutoidHash$);
    $if (struct.inheritance || struct.members || struct.annotationList)$
    ReturnCode_t return_code;
    TypeIdentifierPair type_ids;
    $! If there are only builtin annotations, these variables are not used !$
    static_cast<void>(return_code);
    static_cast<void>(type_ids);
    $endif$
    $if (struct.inheritance)$
    $get_type_identifier(type=struct.inheritance)$
    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
    {
        $register_struct_type(struct.inheritance)$
    }
    TypeObjectPair type_objects;
    $get_type_object(type=struct.inheritance)$
    $endif$
    $complete_type_detail(type=struct, type_kind=" Structure")$
    CompleteStructHeader header;
    $if (struct.inheritance)$
    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier1()._d())
    {
        header = TypeObjectUtils::build_complete_struct_header(type_ids.type_identifier1(), detail);
    }
    else if (EK_COMPLETE == type_ids.type_identifier2()._d())
    {
        header = TypeObjectUtils::build_complete_struct_header(type_ids.type_identifier2(), detail);
    }
    else
    {
        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "$struct.scopedname$ Structure: base_type TypeIdentifier registered in TypeObjectRegistry is inconsistent.");
        return;
    }
    $else$
    header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
    $endif$
    CompleteStructMemberSeq member_seq;
    $if (struct.members)$
    $struct.members: { member | $struct_member(member=member, parent=struct)$}; separator="\n"$
    $endif$
    CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
            TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
    {
        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "$struct.scopedname$ already registered in TypeObjectRegistry for a different type.");
    }
    $get_type_identifier_registry(typename=struct.scopedname)$
    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
    {
        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "$struct.scopedname$: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
        return;
    }
}
>>

struct_member(member, parent) ::= <<
{
    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag($try_construct(object=member)$
            $member.annotationOptional$, $member.annotationMustUnderstand$, $member.annotationKey$, $member.annotationExternal$);
    $get_type_identifier(type=member.typecode)$
    $check_register_type_identifier(type=member.typecode, message=[member.name, " Structure member"])$
    CommonStructMember common;
    MemberId member_id = $member.id$;
    $check_first_returned_type_identifier_pair()$
    {
        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
    }
    $check_second_returned_type_identifier_pair()$
    {
        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
    }
    else
    {
        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "Structure $member.name$ member TypeIdentifier inconsistent.");
        return;
    }
    $complete_member_detail(member=member, parent=parent, type_kind="Structure")$
    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
    TypeObjectUtils::add_complete_struct_member(member_seq, member);
}
>>

register_union_type(union) ::= <<
{
    ReturnCode_t return_code;
    TypeIdentifierPair type_ids;
    UnionTypeFlag union_flags = TypeObjectUtils::build_union_type_flag($extensibility(object=union)$
            $union.annotationNested$, $union.annotationAutoidHash$);
    $complete_type_detail(type=union, type_kind=" Union")$
    CompleteUnionHeader header = TypeObjectUtils::build_complete_union_header(detail);
    UnionDiscriminatorFlag member_flags = TypeObjectUtils::build_union_discriminator_flag($try_construct(object=union.discriminator)$
            $union.discriminator.annotationKey$);
    $get_type_identifier(type=union.discriminator.typecode)$
    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
    {
        $if (union.discriminator.typecode.isAliasType)$
        $register_alias_type(alias=union.discriminator.typecode)$
        $elseif (union.discriminator.typecode.isEnumType)$
        $register_enum_type(enum=union.discriminator.typecode)$
        $else$
        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "Union discriminator TypeIdentifier unknown to TypeObjectRegistry.");
        return;
        $endif$
    }
    CommonDiscriminatorMember common;
    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d())
    {
        common = TypeObjectUtils::build_common_discriminator_member(member_flags, type_ids.type_identifier1());
    }
    else if (EK_COMPLETE == type_ids.type_identifier2()._d())
    {
        common = TypeObjectUtils::build_common_discriminator_member(member_flags, type_ids.type_identifier2());
    }
    else
    {
        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "$union.scopedname$ discriminator TypeIdentifier inconsistent.");
        return;
    }
    type_ann_builtin.reset();
    ann_custom.reset();
    $type_annotations(type=union.discriminator, type_kind=" Union Discriminator")$
    CompleteDiscriminatorMember discriminator = TypeObjectUtils::build_complete_discriminator_member(common,
            type_ann_builtin, ann_custom);
    CompleteUnionMemberSeq member_seq;
    $union.members : { member | $union_member(member=member, parent=union)$}; separator="\n"$
    CompleteUnionType union_type = TypeObjectUtils::build_complete_union_type(union_flags, header, discriminator,
            member_seq);
    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
            TypeObjectUtils::build_and_register_union_type_object(union_type, type_name.to_string()))
    {
        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "$union.scopedname$ already registered in TypeObjectRegistry for a different type.");
    }
    $get_type_identifier_registry(typename=union.scopedname)$
    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
    {
        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "$union.scopedname$: Given Union TypeIdentifier unknown to TypeObjectRegistry.");
        return;
    }
}
>>

union_member(member, parent) ::= <<
{
    UnionMemberFlag member_flags = TypeObjectUtils::build_union_member_flag($try_construct(object=member)$
            $member.default$, $member.annotationExternal$);
    $get_type_identifier(type=member.typecode)$
    $check_register_type_identifier(type=member.typecode, message=[member.name, " Union member"])$
    UnionCaseLabelSeq label_seq;
    $if (member.labels)$
    $member.labels : { label | TypeObjectUtils::add_union_case_label(label_seq, $label$);}; separator="\n"$
    $endif$
    CommonUnionMember common;
    MemberId member_id = $member.id$;
    $check_first_returned_type_identifier_pair()$
    {
        common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier1(),
                label_seq);
    }
    $check_second_returned_type_identifier_pair()$
    {
        common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier2(),
                label_seq);
    }
    else
    {
        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "Union $member.name$ member TypeIdentifier inconsistent.");
        return;
    }
    $complete_member_detail(member=member, parent=parent, type_kind="Union")$
    CompleteUnionMember member = TypeObjectUtils::build_complete_union_member(common, detail);
    TypeObjectUtils::add_complete_union_member(member_seq, member);
}
>>

register_bitset_type(bitset) ::= <<
BitsetTypeFlag bitset_flags = 0;
$complete_type_detail(type=bitset, type_kind= " Bitset")$
CompleteBitsetHeader header = TypeObjectUtils::build_complete_bitset_header(detail);
CompleteBitfieldSeq field_seq;
$bitset.bitfields: { bitfield | $bitfield_member(bitfield=bitfield, parent=bitset)$}; separator="\n"$
CompleteBitsetType bitset_type = TypeObjectUtils::build_complete_bitset_type(bitset_flags, header, field_seq);
if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
        TypeObjectUtils::build_and_register_bitset_type_object(bitset_type, type_name.to_string()))
{
    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
        "$bitset.scopedname$ already registered in TypeObjectRegistry for a different type.");
}
$get_type_identifier_registry(typename=bitset.scopedname)$
if (return_code != eprosima::fastdds::dds::RETCODE_OK)
{
    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "$bitset.scopedname$: Given Bitset TypeIdentifier unknown to TypeObjectRegistry.");
    return;
}
>>

bitfield_member(bitfield, parent) ::= <<
{
    uint16_t position = $bitfield.basePosition$;
    BitsetMemberFlag flags = 0;
    uint8_t bitcount = $bitfield.spec.bitSize$;
    TypeKind holder_type = $bitfield.spec.typecode.typeIdentifier$;
    CommonBitfield common = TypeObjectUtils::build_common_bitfield(position, flags, bitcount, holder_type);
    $empty_ann_builtin_complete_member_detail(member=bitfield, parent=parent, message=[parent.scopedname, " Bitset ", bitfield.name, " bitfield: no builtin annotation applies to bitfield declaration"])$
    CompleteBitfield bitfield = TypeObjectUtils::build_complete_bitfield(common, detail);
    TypeObjectUtils::add_complete_bitfield(field_seq, bitfield);
}
>>

register_sequence_type(sequence) ::= <<
$! TODO(jlbueno): annotated collections generate TypeObject instead of TypeIdentifier
                  pending implementation of annotated collection support !$
$get_type_identifier(type=sequence.contentTypeCode)$
$check_register_type_identifier(type=sequence.contentTypeCode, message="Sequence element")$
EquivalenceKind equiv_kind = EK_COMPLETE;
if (TK_NONE == type_ids.type_identifier2()._d())
{
    equiv_kind = EK_BOTH;
}
CollectionElementFlag element_flags = TypeObjectUtils::build_collection_element_flag(eprosima::fastdds::dds::TryConstructKind::DISCARD, false);
PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
std::string type_id_kind("$sequence.typeIdentifier$");
if (type_id_kind == "TI_PLAIN_SEQUENCE_SMALL")
{
    SBound bound = $if (!sequence.isBounded)$0$else$static_cast<SBound>($sequence.evaluatedMaxsize$)$endif$;
    PlainSequenceSElemDefn seq_sdefn;
    $check_first_returned_type_identifier_pair()$
    {
        seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header, bound,
                eprosima::fastcdr::external<TypeIdentifier>(&type_ids.type_identifier1()));
    }
    $check_second_returned_type_identifier_pair()$
    {
        seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header, bound,
                eprosima::fastcdr::external<TypeIdentifier>(&type_ids.type_identifier2()));
    }
    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "$sequence_name(sequence)$"))
    {
        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
            "$sequence_name(sequence)$ already registered in TypeObjectRegistry for a different type.");
    }
}
else
{
    LBound bound = $sequence.evaluatedMaxsize$;
    PlainSequenceLElemDefn seq_ldefn;
    $check_first_returned_type_identifier_pair()$
    {
        seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header, bound,
                eprosima::fastcdr::external<TypeIdentifier>(&type_ids.type_identifier1()));
    }
    $check_second_returned_type_identifier_pair()$
    {
        seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header, bound,
                eprosima::fastcdr::external<TypeIdentifier>(&type_ids.type_identifier2()));
    }
    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "$sequence_name(sequence)$"))
    {
        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
            "$sequence_name(sequence)$ already registered in TypeObjectRegistry for a different type.");
    }
}
$get_type_identifier_registry(typename=sequence_name(sequence))$
if (return_code != eprosima::fastdds::dds::RETCODE_OK)
{
    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "$sequence_name(sequence)$: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
    return;
}
>>

register_array_type(array) ::= <<
$! TODO(jlbueno): annotated collections generate TypeObject instead of TypeIdentifier
                  pending implementation of annotated collection support !$
>>

register_map_type(map) ::= <<
$! TODO(jlbueno): annotated collections generate TypeObject instead of TypeIdentifier
                  pending implementation of annotated collection support !$
>>

register_enum_type(enum) ::= <<
EnumTypeFlag enum_flags = 0;
BitBound bit_bound = $enum.bitBound$;
CommonEnumeratedHeader common = TypeObjectUtils::build_common_enumerated_header(bit_bound);
$complete_type_detail(type=enum, type_kind=" Enum")$
CompleteEnumeratedHeader header = TypeObjectUtils::build_complete_enumerated_header(common, detail);
CompleteEnumeratedLiteralSeq literal_seq;
int32_t value = 0; // TODO(jlbueno): remove
$enum.members: { member | $enum_literal(literal=member, parent=enum)$}; separator="\n"$
CompleteEnumeratedType enumerated_type = TypeObjectUtils::build_complete_enumerated_type(enum_flags, header,
        literal_seq);
if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
        TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type, type_name.to_string()))
{
    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
        "$enum.scopedname$ already registered in TypeObjectRegistry for a different type.");
}
$get_type_identifier_registry(typename=enum.scopedname)$
if (return_code != eprosima::fastdds::dds::RETCODE_OK)
{
    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "$enum.scopedname$: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
    return;
}
>>

enum_literal(literal, parent) ::= <<
{
    EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag($literal.annotationDefaultLiteral$);
    // TODO(jlbueno): getIndex
    CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(value, flags);
    value++; // TODO(jlbueno): remove
    $empty_ann_builtin_complete_member_detail(member=literal, parent=parent, message=[parent.scopedname, " Enumerated ", literal.name, " literal: only @default_literal and @value builtin annotations apply to literals"])$
    CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
    TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
}
>>

register_bitmask_type(bitmask) ::= <<
BitmaskTypeFlag bitmask_flags = 0;
BitBound bit_bound = $bitmask.bitBound$;
CommonEnumeratedHeader common = TypeObjectUtils::build_common_enumerated_header(bit_bound, true);
$complete_type_detail(type=bitmask, type_kind=" Bitmask")$
CompleteEnumeratedHeader header = TypeObjectUtils::build_complete_enumerated_header(common, detail, true);
CompleteBitflagSeq flag_seq;
$bitmask.bitmasks: { bitflag | $bitflag_member(bitflag=bitflag, parent=parent)$}; separator="\n"$
CompleteBitmaskType bitmask_type = TypeObjectUtils::build_complete_bitmask_type(bitmask_flags, header, flag_seq);
if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
        TypeObjectUtils::build_and_register_bitmask_type_object(bitmask_type, type_name.to_string()))
{
    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
        "$bitmask.scopedname$ already registered in TypeObjectRegistry for a different type.");
}
$get_type_identifier_registry(typename=bitmask.scopedname)$
if (return_code != eprosima::fastdds::dds::RETCODE_OK)
{
    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "$bitmask.scopedname$: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
    return;
}
>>

bitflag_member(bitflag, parent) ::= <<
{
    uint16_t position = $bitflag.position$;
    BitflagFlag flags = 0;
    CommonBitflag common = TypeObjectUtils::build_common_bitflag(position, flags);
    $empty_ann_builtin_complete_member_detail(member=bitflag, parent=parent, message=[parent.scopedname, " Bitmask ", bitflag.name, " bitflag: only @position builtin annotation apply to bitmask bitflags"])$
    CompleteBitflag bitflag = TypeObjectUtils::build_complete_bitflag(common, detail);
    TypeObjectUtils::add_complete_bitflag(flag_seq, bitflag);
}
>>

register_wstring_type(wstring) ::= <<
std::string type_id_kind("$wstring.typeIdentifier$");
if (type_id_kind == "TI_STRING16_SMALL")
{
    SBound bound = $if (!wstring.isBounded)$0$else$static_cast<SBound>($wstring.evaluatedMaxsize$)$endif$;
    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
            "$wstring_name(wstring)$", true))
    {
        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
            "$wstring_name(wstring)$ already registered in TypeObjectRegistry for a different type.");
    }
}
else if (type_id_kind == "TI_STRING16_LARGE")
{
    LBound bound = $wstring.evaluatedMaxsize$;
    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
            "$wstring_name(wstring)$", true))
    {
        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
            "$wstring_name(wstring)$ already registered in TypeObjectRegistry for a different type.");
    }
}
else
{
    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "$wstring_name(wstring)$: Unknown WString kind.");
    return;
}
$get_type_identifier_registry(typename=wstring_name(wstring))$
if (return_code != eprosima::fastdds::dds::RETCODE_OK)
{
    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "$wstring_name(wstring)$: Given WString TypeIdentifier unknown to TypeObjectRegistry.");
    return;
}
>>

register_string_type(string) ::= <<
std::string type_id_kind("$string.typeIdentifier$");
if (type_id_kind == "TI_STRING8_SMALL")
{
    SBound bound = $if (!string.isBounded)$0$else$static_cast<SBound>($string.evaluatedMaxsize$)$endif$;
    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
            "$string_name(string)$"))
    {
        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
            "$string_name(string)$ already registered in TypeObjectRegistry for a different type.");
    }
}
else if (type_id_kind == "TI_STRING8_LARGE")
{
    LBound bound = $string.evaluatedMaxsize$;
    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
            "$string_name(string)$"))
    {
        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
            "$string_name(string)$ already registered in TypeObjectRegistry for a different type.");
    }
}
else
{
    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "$string_name(string)$: Unknown String kind.");
    return;
}
$get_type_identifier_registry(typename=string_name(string))$
if (return_code != eprosima::fastdds::dds::RETCODE_OK)
{
    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "$string_name(string)$: Given String TypeIdentifier unknown to TypeObjectRegistry.");
    return;
}
>>

complete_type_detail(type, type_kind) ::= <<
QualifiedTypeName type_name = "$type.scopedname$";
eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
$type_annotations(type=type, type_kind=type_kind)$
CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
>>

complete_member_detail(member, parent, type_kind) ::= <<
MemberName name = "$member.name$";
eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
ann_custom.reset();
$if (member.annotationList)$
AppliedAnnotationSeq tmp_ann_custom;
eprosima::fastcdr::optional<std::string> unit;
eprosima::fastcdr::optional<AnnotationParameterValue> min;
eprosima::fastcdr::optional<AnnotationParameterValue> max;
eprosima::fastcdr::optional<std::string> hash_id;
$member.annotationList : { annotation |
$if (annotation.isUnit)$
unit = $annotation.value$;
$elseif (annotation.isMin || annotation.isMax || annotation.isRange)$
EPROSIMA_LOG_WARNING(XTYPES_TYPE_REPRESENTATION,
        "$parent.scopedname$ $type_kind$ $member.name$ member: @min, @max, and @range builtin annotations not yet supported");
$elseif (annotation.isHashId)$
hash_id = $annotation.value$;
$elseif (!annotation.isBuiltin)$
$applied_annotation_sequence(annotation=annotation, typename=[parent.scopedname, " ", member.name, " member"])$
$endif$
}; separator="\n"$
member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
if (!tmp_ann_custom.empty())
{
    ann_custom = tmp_ann_custom;
}
$endif$
CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
>>

empty_ann_builtin_complete_member_detail(member, parent, message) ::= <<
eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
ann_custom.reset();
$if (member.annotationList)$
AppliedAnnotationSeq tmp_ann_custom;
eprosima::fastcdr::optional<std::string> unit;
eprosima::fastcdr::optional<AnnotationParameterValue> min;
eprosima::fastcdr::optional<AnnotationParameterValue> max;
eprosima::fastcdr::optional<std::string> hash_id;
$member.annotationList : { annotation |
$if (annotation.isUnit || annotation.isMin || annotation.isMax || annotation.isRange || annotation.isHashId)$
EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
        "$parent.scopedname$ Enumerated $member.name$ literal: only @default_literal and @value builtin annotations apply to literals");
return;
$elseif (!annotation.isBuiltin)$
$applied_annotation_sequence(annotation=annotation, typename=[parent.scopedname, " ", member.name, " member"])$
$endif$
}; separator="\n"$
member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
if (!tmp_ann_custom.empty())
{
    ann_custom = tmp_ann_custom;
}
$endif$
MemberName name = "$member.name$";
CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
>>

type_annotations(type, type_kind) ::= <<
$if (type.annotationList)$
AppliedAnnotationSeq tmp_ann_custom;
eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim;
$type.annotationList : { annotation |
$if (annotation.isVerbatim)$
$applied_verbatim_annotation(annotation=annotation)$
$elseif (!annotation.isBuiltin)$
$applied_annotation_sequence(annotation=annotation, typename=[type.scopedname, type_kind])$
$endif$
}; separator="\n"$
if (!tmp_ann_custom.empty())
{
    ann_custom = tmp_ann_custom;
}
$endif$
>>

check_first_returned_type_identifier_pair() ::= <<
if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
>>

check_second_returned_type_identifier_pair() ::= <<
else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
>>

check_register_type_identifier(type, message) ::= <<
if (return_code != eprosima::fastdds::dds::RETCODE_OK)
{
    $if (type.isAliasType)$
    $register_alias_type(alias=type)$
    $elseif (type.isStructType)$
    $register_struct_type(struct=type)$
    $elseif (type.isUnionType)$
    $register_union_type(union=type)$
    $elseif (type.isBitsetType)$
    $register_bitset_type(bitset=type)$
    $elseif (type.isSequenceType)$
    $register_sequence_type(sequence=type)$
    $elseif (type.isArrayType)$
    $register_array_type(array=type)$
    $elseif (type.isMapType)$
    $register_map_type(map=type)$
    $elseif (type.isEnumType)$
    $register_enum_type(enum=type)$
    $elseif (type.isBitmaskType)$
    $register_bitmask_type(bitmask=type)$
    $elseif (type.isStringType)$
    $register_string_type(string=type)$
    $elseif (type.isWStringType)$
    $register_wstring_type(wstring=type)$
    $else$
    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
            "$message$ TypeIdentifier unknown to TypeObjectRegistry.");
    return;
    $endif$
}
>>

extensibility(object) ::= <%
$if (object.annotationAppendable)$
    eprosima::fastdds::dds::ExtensibilityKind::APPENDABLE,
$elseif (object.annotationFinal)$
    eprosima::fastdds::dds::ExtensibilityKind::FINAL,
$elseif (object.annotationMutable)$
    eprosima::fastdds::dds::ExtensibilityKind::MUTABLE,
$endif$
%>

try_construct(object) ::= <%
$if (object.annotationDiscard)$
    eprosima::fastdds::dds::TryConstructKind::DISCARD,
$elseif (object.annotationUseDefault)$
    eprosima::fastdds::dds::TryConstructKind::USE_DEFAULT,
$elseif (object.annotationTrim)$
    eprosima::fastdds::dds::TryConstructKind::TRIM,
$endif$
%>
