// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

group TypesHeader;

import "com/eprosima/fastdds/idl/templates/eprosima.stg"
import "FastCdrCommon.stg"

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx, file=[ctx.filename, ".h"], description=["This header file contains the declaration of the described types in the IDL file."])$

#ifndef _FAST_DDS_GENERATED_$ctx.headerGuardName$_H_
#define _FAST_DDS_GENERATED_$ctx.headerGuardName$_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/optional.hpp>

$if(ctx.printexception)$
#include <$ctx.product$/exceptions/UserException.h>
$endif$

$ctx.directIncludeDependencies : {include | #include "$include$.h"}; separator="\n"$


#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined($ctx.fileNameUpper$_SOURCE)
#define $ctx.fileNameUpper$_DllAPI __declspec( dllexport )
#else
#define $ctx.fileNameUpper$_DllAPI __declspec( dllimport )
#endif // $ctx.fileNameUpper$_SOURCE
#else
#define $ctx.fileNameUpper$_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define $ctx.fileNameUpper$_DllAPI
#endif // _WIN32

$if(ctx.cdr)$
namespace eprosima {
namespace fastcdr {
class Cdr;
$if(ctx.cdr)$
class CdrSizeCalculator;
$endif$
} // namespace fastcdr
} // namespace eprosima

$endif$

$if(ctx.fastcdr)$
namespace eprosima {
namespace fastcdr {
class FastCdr;
} // namespace fastcdr
} // namespace eprosima

$endif$

$if(ctx.generateTypesC)$
$ctx.typeCodesToDefine : { type |
$sequences_definition(type.value)$
}; separator="\n"$
$endif$


$definitions; separator="\n"$

#endif // _FAST_DDS_GENERATED_$ctx.headerGuardName$_H_
$"\n"$
>>

module(ctx, parent, module, definition_list) ::= <<
namespace $module.name$ {

$definition_list$

} // namespace $module.name$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

annotation(ctx, annotation) ::= <<
namespace $annotation.name$ {
    $annotation.enums : { enum | $enum_type(ctx=ctx, parent=annotation, enum=enum)$}; separator="\n"$

    $annotation.typeDefs : { typedef | $typedef_decl(ctx=ctx, parent=annotation, typedefs=typedef)$}; separator="\n"$

    $annotation.constDecls : { const | $const_decl(ctx=ctx, parent=annotation, const=const)$}; separator="\n"$

} // namespace $annotation.name$
>>

interface(ctx, parent, interface, export_list) ::= <<
/*!
 * @brief This class represents the interface $interface.name$ defined by the user in the IDL file.
 * @ingroup $ctx.trimfilename$
 */
class $ctx.fileNameUpper$_DllAPI $interface.name$ $if(interface.bases)$: $interface.bases : {base |public $base.scopedname$}; separator=", "$$endif$
{
public:

    $export_list$
};
>>

export_list(exports) ::= <<
$exports; separator="\n"$
>>

exception(ctx, parent, exception) ::= <<>>

operation(ctx, parent, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, parent, const) ::= <<$if(ctx.inScopedFile)$$if(const.parent)$$if(const.parent.isInterface)$static $endif$$endif$const $const.typeCode.cppTypename$ $const.name$$if(!const.parent)$ = $const.value$$elseif(!const.parent.isInterface)$ = $const.value$$elseif(!const.typeCode.isType_5)$$if(!const.typeCode.isType_6)$ = $const.value$$endif$$endif$;$endif$>>

typedef_decl(ctx, parent, typedefs) ::= <<
$typedefs :
{ typedef |
$if(ctx.generateTypesC)$
$if(typedef.typedefContentTypeCode.isSequenceType)$
$sequences_definition_impl(typecode=typedef.typedefContentTypeCode, typename=typedef.name)$
$else$
typedef $typedef.typedefContentTypeCode.cppTypename$ $typedef.name$;
$endif$
$else$
typedef $typedef.typedefContentTypeCode.cppTypename$ $typedef.name$;
$endif$
}; separator="\n"$
>>

struct_type(ctx, parent, struct, extensions) ::= <<
/*!
 * @brief This class represents the structure $struct.name$ defined by the user in the IDL file.
 * @ingroup $ctx.trimfilename$
 */
class $struct.name$$if(struct.inheritances)$ : public $struct.inheritances : { inheritance | $public_struct_inheritances(inheritance)$}; separator=", "$ $endif$
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport $struct.name$();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~$struct.name$();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object $struct.scopedname$ that will be copied.
     */
    eProsima_user_DllExport $struct.name$(
            const $struct.name$& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object $struct.scopedname$ that will be copied.
     */
    eProsima_user_DllExport $struct.name$(
            $struct.name$&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object $struct.scopedname$ that will be copied.
     */
    eProsima_user_DllExport $struct.name$& operator =(
            const $struct.name$& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object $struct.scopedname$ that will be copied.
     */
    eProsima_user_DllExport $struct.name$& operator =(
            $struct.name$&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x $struct.scopedname$ object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const $struct.name$& x) const;

    /*!
     * @brief Comparison operator.
     * @param x $struct.scopedname$ object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const $struct.name$& x) const;

    $struct.members:{ member | $public_member_declaration(member)$}; separator="\n"$
    $serialization_functions(struct)$
    $extensions : { extension | $extension$}; separator="\n"$
private:

    $struct.members:{ member | $private_member_declaration(member=member)$}; separator="\n"$

};
>>

union_type(ctx, parent, union, extensions) ::= <<
/*!
 * @brief This class represents the union $union.name$ defined by the user in the IDL file.
 * @ingroup $ctx.trimfilename$
 */
class $union.name$
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport $union.name$();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~$union.name$();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object $union.scopedname$ that will be copied.
     */
    eProsima_user_DllExport $union.name$(
            const $union.name$& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object $union.scopedname$ that will be copied.
     */
    eProsima_user_DllExport $union.name$(
            $union.name$&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object $union.scopedname$ that will be copied.
     */
    eProsima_user_DllExport $union.name$& operator =(
            const $union.name$& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object $union.scopedname$ that will be copied.
     */
    eProsima_user_DllExport $union.name$& operator =(
            $union.name$&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x $union.scopedname$ object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const $union.name$& x) const;

    /*!
     * @brief Comparison operator.
     * @param x $union.scopedname$ object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const $union.name$& x) const;

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
     */
    eProsima_user_DllExport void _d(
            $union.discriminator.cppTypename$ __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    eProsima_user_DllExport $union.discriminator.cppTypename$ _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    eProsima_user_DllExport $union.discriminator.cppTypename$& _d();

    $union.members:{ member | $public_unionmember_declaration(member)$}; separator="\n"$
    $serialization_functions(union)$
    $extensions : {extension | $extension$}; separator="\n"$
private:

    $union.discriminator.cppTypename$ m__d;

    $union.members:{ member | $private_member_declaration(member=member)$}; separator="\n"$
};
>>

bitset_type(ctx, parent, bitset, extensions) ::= <<
/*!
 * @brief This class represents the structure $bitset.name$ defined by the user in the IDL file.
 * @ingroup $ctx.trimfilename$
 */
class $bitset.name$$if(bitset.parents)$ : public $bitset.parents : { bitset | $public_bitset_inheritances(bitset)$}; separator=", "$ $endif$
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport $bitset.name$();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~$bitset.name$();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object $bitset.scopedname$ that will be copied.
     */
    eProsima_user_DllExport $bitset.name$(
            const $bitset.name$& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object $bitset.scopedname$ that will be copied.
     */
    eProsima_user_DllExport $bitset.name$(
            $bitset.name$&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object $bitset.scopedname$ that will be copied.
     */
    eProsima_user_DllExport $bitset.name$& operator =(
            const $bitset.name$& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object $bitset.scopedname$ that will be copied.
     */
    eProsima_user_DllExport $bitset.name$& operator =(
            $bitset.name$&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x $bitset.scopedname$ object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const $bitset.name$& x) const;

    /*!
     * @brief Comparison operator.
     * @param x $bitset.scopedname$ object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const $bitset.name$& x) const;

    $bitset.bitfields:{ bitset | $public_bitfield_declaration(bitset)$}; separator="\n"$

    eProsima_user_DllExport std::bitset<$bitset.fullBitSize$> bitset() const;

    eProsima_user_DllExport void bitset(
            const std::bitset<$bitset.fullBitSize$>&);

    $serialization_functions(bitset)$

    $extensions : { extension | $extension$}; separator="\n"$

private:

    std::bitset<$bitset.bitSize$> m_bitset;
};
>>

enum_type(ctx, parent, enum) ::= <<
/*!
 * @brief This class represents the enumeration $enum.name$ defined by the user in the IDL file.
 * @ingroup $ctx.trimfilename$
 */
enum $enum.name$ : uint32_t
{
    $enum.members:{ member | $member.name$}; separator=",\n"$
};
>>

bitmask_type(ctx, parent, bitmask) ::= <<
/*!
 * @brief This enumeration represents the $bitmask.name$ bitflags defined by the user in the IDL file.
 * @ingroup $ctx.trimfilename$
 */
enum $bitmask.name$Bits$bitmask.boundType$
{
    $bitmask.members:{ member | $member.name$ = 0x01ull << $member.position$}; separator=",\n"$
};
typedef $bitmask.castingType$ $bitmask.name$;
>>

fwd_decl(ctx, parent, type) ::= <<
class $type.name$;

>>

/***** Utils *****/

public_struct_inheritances(parent) ::= <<$parent.scopedname$>>

public_bitset_inheritances(parent) ::= <<$parent.scopedname$>>

public_member_declaration(member) ::= <<
$if(member.annotationOptional)$
$public_member_common_declaration(member=member)$
$elseif(member.typecode.primitive)$
$public_member_primitive_declaration(member=member)$
$elseif(ctx.generateTypesC)$
$if(member.typecode.isStringType)$
$public_member_cstring_declaration(member=member)$
$else$
$public_member_common_declaration(member=member)$
$endif$
$else$
$public_member_common_declaration(member=member)$
$endif$
>>

public_member_primitive_declaration(member) ::= <<
/*!
 * @brief This function sets a value in member $member.name$
 * @param _$member.name$ New value for member $member.name$
 */
eProsima_user_DllExport void $member.name$(
        $member_type_declaration(member)$ _$member.name$);

/*!
 * @brief This function returns the value of member $member.name$
 * @return Value of member $member.name$
 */
eProsima_user_DllExport $member_type_declaration(member)$ $member.name$() const;

/*!
 * @brief This function returns a reference to member $member.name$
 * @return Reference to member $member.name$
 */
eProsima_user_DllExport $member_type_declaration(member)$& $member.name$();
>>

public_member_cstring_declaration(member) ::= <<
/*!
 * @brief This function sets a value in member $member.name$
 * @param _$member.name$ New value for member $member.name$
 */
eProsima_user_DllExport void $member.name$(
        const $member_type_declaration(member)$ _$member.name$);

/*!
 * @brief This function returns the value of member $member.name$
 * @return Value of member $member.name$
 */
eProsima_user_DllExport const $member_type_declaration(member)$ $member.name$() const;
>>

public_member_common_declaration(member) ::= <<
/*!
 * @brief This function copies the value in member $member.name$
 * @param _$member.name$ New value to be copied in member $member.name$
 */
eProsima_user_DllExport void $member.name$(
        const $member_type_declaration(member)$& _$member.name$);

/*!
 * @brief This function moves the value in member $member.name$
 * @param _$member.name$ New value to be moved in member $member.name$
 */
eProsima_user_DllExport void $member.name$(
        $member_type_declaration(member)$&& _$member.name$);

/*!
 * @brief This function returns a constant reference to member $member.name$
 * @return Constant reference to member $member.name$
 */
eProsima_user_DllExport const $member_type_declaration(member)$& $member.name$() const;

/*!
 * @brief This function returns a reference to member $member.name$
 * @return Reference to member $member.name$
 */
eProsima_user_DllExport $member_type_declaration(member)$& $member.name$();
>>

public_bitfield_declaration(member) ::= <<
$if(member.name)$
/*!
 * @brief This function sets a value in member $member.name$
 * @param _$member.name$ New value for member $member.name$
 */
eProsima_user_DllExport void $member.name$(
        $member.spec.cppTypename$ _$member.name$);

/*!
 * @brief This function returns the value of member $member.name$
 * @return Value of member $member.name$
 */
eProsima_user_DllExport $member.spec.cppTypename$ $member.name$() const;
$endif$
>>

private_member_declaration(member) ::= <<
$object_cpptypename(object=member)$ m_$member.name$$member_default_init(member)$;
>>

public_unionmember_declaration(member) ::= <<
$if(member.typecode.primitive)$
$public_unionmember_primitive_declaration(member=member)$
$elseif(ctx.generateTypesC)$
$if(member.typecode.isStringType)$
$public_unionmember_cstring_declaration(member=member)$
$else$
$public_unionmember_common_declaration(member=member)$
$endif$
$else$
$public_unionmember_common_declaration(member=member)$
$endif$
>>

public_unionmember_primitive_declaration(member) ::= <<
/*!
 * @brief This function sets a value in member $member.name$
 * @param _$member.name$ New value for member $member.name$
 */
eProsima_user_DllExport void $member.name$(
        $member.typecode.cppTypename$ _$member.name$);

/*!
 * @brief This function returns the value of member $member.name$
 * @return Value of member $member.name$
 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
 */
eProsima_user_DllExport $member.typecode.cppTypename$ $member.name$() const;

/*!
 * @brief This function returns a reference to member $member.name$
 * @return Reference to member $member.name$
 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
 */
eProsima_user_DllExport $member.typecode.cppTypename$& $member.name$();
>>

public_unionmember_cstring_declaration(member) ::= <<
/*!
 * @brief This function sets a value in member $member.name$
 * @param _$member.name$ New value for member $member.name$
 */
eProsima_user_DllExport void $member.name$(
        const $member.typecode.cppTypename$ _$member.name$);

/*!
 * @brief This function returns the value of member $member.name$
 * @return Value of member $member.name$
 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
 */
eProsima_user_DllExport const $member.typecode.cppTypename$ $member.name$() const;
>>

public_unionmember_common_declaration(member) ::= <<
/*!
 * @brief This function copies the value in member $member.name$
 * @param _$member.name$ New value to be copied in member $member.name$
 */
eProsima_user_DllExport void $member.name$(
        const $member.typecode.cppTypename$& _$member.name$);

/*!
 * @brief This function moves the value in member $member.name$
 * @param _$member.name$ New value to be moved in member $member.name$
 */
eProsima_user_DllExport void $member.name$(
        $member.typecode.cppTypename$&& _$member.name$);

/*!
 * @brief This function returns a constant reference to member $member.name$
 * @return Constant reference to member $member.name$
 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
 */
eProsima_user_DllExport const $member.typecode.cppTypename$& $member.name$() const;

/*!
 * @brief This function returns a reference to member $member.name$
 * @return Reference to member $member.name$
 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
 */
eProsima_user_DllExport $member.typecode.cppTypename$& $member.name$();
>>

member_default_init(member) ::= <%
$if(!member.typecode.forwarded)$
$if(member.annotationDefault)$
 {$member.annotationDefaultValue$}
$elseif(!member.annotationOptional)$
$if(member.typecode.initialValue)$
 {$member.typecode.initialValue$}
$endif$
$endif$
$endif$
%>

serialization_functions(type) ::= <<
$if(ctx.fastcdr)$
/*!
 * @brief This function serializes an object using FastCDR serialization.
 * @param cdr FastCDR serialization object.
 */
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::FastCdr& cdr) const;

/*!
 * @brief This function deserializes an object using FastCDR serialization.
 * @param cdr FastCDR serialization object.
 */
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::FastCdr& cdr);

$endif$
>>

sequences_definition(typecode) ::= <<
$if(typecode.contentTypeCode.isStructType)$
$typecode.contentTypeCode.namespaces : { ns | namespace $ns$ \{ }; separator="\n"$
class $typecode.contentTypeCode.name$;
$reverse(typecode.contentTypeCode.namespaces) : { ns | \} // $ns$}; separator="\n"$
$endif$
$if(typecode.contentTypeCode.isUnionType)$
$typecode.contentTypeCode.namespaces : { ns | namespace $ns$ \{ }; separator="\n"$
class $typecode.contentTypeCode.name$;
$reverse(typecode.contentTypeCode.namespaces) : { ns | \} // $ns$}; separator="\n"$
$endif$

$sequences_definition_impl(typecode=typecode, typename=typecode.cppTypename)$
>>

sequences_definition_impl(typecode, typename) ::= <<

class eProsima_user_DllExport $typename$
{
public:
    $typename$();

    $typename$(
            uint32_t maximum);

    $typename$(
            uint32_t length,
            $typecode.contentTypeCode.cppTypename$* data,
            bool release = false);

    $typename$(
            const $typename$& $typename$_);

    $typename$& operator =(
            const $typename$& $typename$_);

    ~$typename$();

    $typecode.contentTypeCode.cppTypename$$if(ctx.generateTypesC)$$if(typecode.contentTypeCode.isStringType)$$else$&$endif$$else$&$endif$ operator[](
            uint32_t index);

    const $typecode.contentTypeCode.cppTypename$$if(ctx.generateTypesC)$$if(typecode.contentTypeCode.isStringType)$$else$&$endif$$else$&$endif$ operator[](
            uint32_t index) const;

    void size(
            uint32_t size);

    uint32_t size() const;

    void length(
            uint32_t size);

    uint32_t length() const;

    uint32_t maximum() const;

    void value(
            $typecode.contentTypeCode.cppTypename$* value);

    $typecode.contentTypeCode.cppTypename$* value(
            bool orphan = false);

    const $typecode.contentTypeCode.cppTypename$$if(ctx.generateTypesC)$$if(typecode.contentTypeCode.isStringType)$ const$else$$endif$$else$$endif$* value() const;

    void release(
            bool release);

    bool release() const;

    bool& release();

    void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    void deserialize(
            eprosima::fastcdr::Cdr& cdr);

private:

    uint32_t maximum_ = $typecode.maxsize$;

    mutable uint32_t length_ = 0;

    mutable $typecode.contentTypeCode.cppTypename$* value_ = nullptr;

    bool release_ = true;

    void free_memory();
};
>>
