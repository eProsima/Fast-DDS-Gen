// Copyright 2021 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

group TypesSwigInterface;

main(ctx, definitions) ::= <<
$fileHeader(file=[ctx.filename, ".i"], description=["This header file contains the SWIG interface of the described types in the IDL file."])$

%module $ctx.filename$

// SWIG helper modules
%include "typemaps.i"
%include "std_string.i"
%include "std_vector.i"
%include "std_array.i"
%include "std_map.i"

// Assignemt operators are ignored, as there is no such thing in Python.
// Trying to export them issues a warning
%ignore *::operator=;

$internal_types()$

$fast_macro_declarations()$

$ctx.directIncludeDependencies : {include | %include "$include$.i"}; separator="\n"$

%{
#include "$ctx.filename$.h"
%}

$definitions; separator="\n"$

// Include the class interfaces
%include "$ctx.filename$.h"

// Include the corresponding TopicDataType
%include "$ctx.filename$PubSubTypes.i"

>>

fast_macro_declarations() ::= <<
// Macro declarations
// Any macro used on the Fast DDS header files will give an error if it is not redefined here
#define RTPS_DllAPI
#define eProsima_user_DllExport
>>

internal_types() ::= <<
// Definition of internal types

typedef char int8_t;
typedef short int16_t;
typedef int int32_t;
typedef long int64_t;

typedef unsigned char uint8_t;
typedef unsigned short uint16_t;
typedef unsigned int uint32_t;
typedef unsigned long uint64_t;

>>

struct_type(ctx, parent, struct, extensions) ::= <<
////////////////////////////////////////////////////////
// Binding for class $struct.name$
////////////////////////////////////////////////////////

// Ignore overloaded methods that have no application on Python
// Otherwise they will issue a warning
%ignore $struct.name$::$struct.name$($struct.name$&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Avoid a warning ignoring all but one
$struct.members : {$member_getters(struct_name=struct.name, member=it)$}; separator="\n"$

>>

member_getters(struct_name, member) ::= <<
%ignore $struct_name$::$member.name$($member.typecode.cppTypename$&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
$if(member.typecode.isSequenceType)$
%ignore $struct_name$::$member.name$() const;
%template($member.typecode.contentTypeCode.cppTypename$_vector) std::vector<$member.typecode.contentTypeCode.cppTypename$>;
$elseif(member.typecode.isMapType)$
%ignore $struct_name$::$member.name$() const;
%template($member.typecode.keyTypeCode.cppTypename$_$member.typecode.valueTypeCode.cppTypename$_map) std::map<$member.typecode.keyTypeCode.cppTypename$,$member.typecode.valueTypeCode.cppTypename$>;
$elseif(member.typecode.isType_f)$
%ignore $struct_name$::$member.name$() const;
%template($member.typecode.contentTypeCode.cppTypename$_$member.typecode.dimensions$_array) std::array<$member.typecode.contentTypeCode.cppTypename$,$member.typecode.dimensions$>;
$else$
%ignore $struct_name$::$member.name$();
%rename("%s") $struct_name$::$member.name$() const;

$endif$

>>

union_type(ctx, parent, union, extensions) ::= <<
////////////////////////////////////////////////////////
// Binding for class $union.name$
////////////////////////////////////////////////////////

// Ignore overloaded methods that have no application on Python
// Otherwise they will issue a warning
%ignore $union.name$::$union.name$($union.name$&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Avoid a warning ignoring all but one
%ignore $union.name$::_d() const;
$union.members : {$member_getters(struct_name=union.name, member=it)$}; separator="\n"$

>>

bitset_type(ctx, parent, bitset, extensions) ::= <<
////////////////////////////////////////////////////////
// Binding for class $bitset.name$
////////////////////////////////////////////////////////

// Ignore overloaded methods that have no application on Python
// Otherwise they will issue a warning
%ignore $bitset.name$::$bitset.name$($bitset.name$&&);

>>

// Enums are ported as constants in the target language
enum_type(ctx, parent, enum) ::= <<
>>

// bitmasks are implemented as enums. Therefore, are ported as constants in the target language
bitmask_type(ctx, parent, bitmask) ::= <<
>>

annotation(ctx, annotation) ::= <<
>>

interface(ctx, parent, interface, export_list) ::= <<
>>

exception(ctx, parent, exception) ::= <<
>>
