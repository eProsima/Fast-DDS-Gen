// Copyright 2021 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

group TypesSwigInterface;

import "com/eprosima/fastdds/idl/templates/eprosima.stg"

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx, file=[ctx.filename, ".i"], description=["This header file contains the SWIG interface of the described types in the IDL file."])$

%module(moduleimport="if __import__('os').name == 'nt': import win32api; win32api.LoadLibrary('$ctx.filename$.dll')\nif __package__ or '.' in __name__:\n    from . import _$ctx.filename$Wrapper\nelse:\n    import _$ctx.filename$Wrapper") $ctx.filename$

// If using windows in debug, it would try to use python_d, which would not be found.
%begin %{
#ifdef _MSC_VER
#define SWIG_PYTHON_INTERPRETER_NO_DEBUG
#endif
#include <exception>
%}

// SWIG helper modules
%include "stdint.i"
%include "std_array.i"
%include "std_map.i"
%include "std_string.i"
%include "std_vector.i"
%include "typemaps.i"

// Assignemt operators are ignored, as there is no such thing in Python.
// Trying to export them issues a warning
%ignore *::operator=;

$fast_macro_declarations()$

$ctx.directIncludeDependencies : {include | %include "$include$.i"}; separator="\n"$

%{
#include "$ctx.filename$.hpp"

#include <fastdds/dds/core/LoanableSequence.hpp>
%}

%include <fastcdr/config.h>
%import(module="fastdds") "fastcdr/xcdr/optional.hpp"
%import(module="fastdds") "fastdds/dds/core/LoanableCollection.hpp"
%import(module="fastdds") "fastdds/dds/core/LoanableTypedCollection.hpp"
%import(module="fastdds") "fastdds/dds/core/LoanableSequence.hpp"

%define %traits_penumn(Type...)
  %fragment(SWIG_Traits_frag(Type),"header",
        fragment="StdTraits") {
namespace swig {
  template <> struct traits< Type > {
    typedef value_category category;
    static const char* type_name() { return  #Type; }
  };
}
}
%enddef

$definitions; separator="\n"$

// Include the class interfaces
%include "$ctx.filename$.hpp"

// Include the corresponding TopicDataType
%include "$ctx.filename$PubSubTypes.i"
$"\n"$
>>

fast_macro_declarations() ::= <<
// Macro declarations
// Any macro used on the Fast DDS header files will give an error if it is not redefined here
#define FASTDDS_EXPORTED_API
#define eProsima_user_DllExport
>>

struct_type(ctx, parent, struct, extensions, member_list) ::= <<
$member_list$
////////////////////////////////////////////////////////
// Binding for class $struct.scopedname$
////////////////////////////////////////////////////////

// Ignore overloaded methods that have no application on Python
// Otherwise they will issue a warning
%ignore $struct.scopedname$::$struct.name$($struct.scopedname$&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Avoid a warning ignoring all but one
$struct.members : { member | $member_getters(struct_name=struct.scopedname, member=member)$}; separator="\n"$

%template(_$struct.name$Seq) eprosima::fastdds::dds::LoanableTypedCollection<$struct.scopedname$, std::false_type>;
%template($struct.name$Seq) eprosima::fastdds::dds::LoanableSequence<$struct.scopedname$, std::false_type>;
%extend eprosima::fastdds::dds::LoanableSequence<$struct.scopedname$, std::false_type>
{
    size_t __len__() const
    {
        return self->length();
    }

    const $struct.scopedname$& __getitem__(size_t i) const
    {
        return (*self)[i];
    }
}

>>

template_sequence_name(typecode) ::= <%
$if(typecode.isSequenceType)$
$template_sequence_name(typecode.contentTypeCode)$_vector
$else$
$typecode.noScopedCppTypename$_vector
$endif$
%>

template_sequence(typecode) ::= <<
$if(typecode.contentTypeCode.isSequenceType)$
$template_sequence(typecode.contentTypeCode)$
$elseif(typecode.contentTypeCode.primitive)$
$if(!typecode.contentTypeCode.isType_7)$
%extend std::vector<$typecode.contentTypeCode.cppTypename$>
{
    const $typecode.contentTypeCode.cppTypename$* get_buffer() const
    {
        return self->data();
    }
}
$endif$
$endif$

%template($template_sequence_name(typecode.contentTypeCode)$) std::vector<$if(typecode.contentTypeCode.isEnumType)$enum $endif$$typecode.contentTypeCode.cppTypename$>;
>>

member_getters(struct_name, member) ::= <<
$if(member.annotationOptional)$
%ignore eprosima::fastcdr::optional::value;
%ignore eprosima::fastcdr::optional::reset;
%template($member.typecode.noScopedCppTypename$Opt) eprosima::fastcdr::optional<$member.typecode.cppTypename$>;
%extend eprosima::fastcdr::optional<$member.typecode.cppTypename$> {
  $member.typecode.cppTypename$ get_value() const {
      return \$self->value();
  }

  void set_value(const $member.typecode.cppTypename$& value) {
      *\$self = value;
  }
}
%ignore $struct_name$::$member.name$(eprosima::fastcdr::optional<$member.typecode.cppTypename$>&&);
$else$
%ignore $struct_name$::$member.name$($member.typecode.cppTypename$&&);
$endif$


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
$if(member.typecode.isSequenceType)$
%ignore $struct_name$::$member.name$() const;
$template_sequence(member.typecode)$
$elseif(member.typecode.isMapType)$
%ignore $struct_name$::$member.name$() const;
%template($member.typecode.keyTypeCode.name$_$member.typecode.valueTypeCode.cppTypename$_map) std::map<$if(member.typecode.keyTypeCode.isEnumType)$enum $endif$$member.typecode.keyTypeCode.cppTypename$,$if(member.typecode.valueTypeCode.isEnumType)$enum $endif$$member.typecode.valueTypeCode.cppTypename$>;
$elseif(member.typecode.isType_f)$
%ignore $struct_name$::$member.name$() const;
%template($member.typecode.contentTypeCode.noScopedCppTypename$_$member.typecode.evaluatedDimensions$_array) std::array<$if(member.typecode.contentTypeCode.isEnumType)$enum $endif$$member.typecode.contentTypeCode.cppTypename$,$member.typecode.evaluatedDimensions$>;
$if(member.typecode.contentTypeCode.primitive)$
%extend std::array<$if(member.typecode.contentTypeCode.isEnumType)$enum $endif$$member.typecode.contentTypeCode.cppTypename$, $member.typecode.evaluatedDimensions$>
{
    const $if(member.typecode.contentTypeCode.isEnumType)$enum $endif$$member.typecode.contentTypeCode.cppTypename$* get_buffer() const
    {
        return self->data();
    }
}
$endif$
$else$
%ignore $struct_name$::$member.name$();
%rename("%s") $struct_name$::$member.name$() const;

$endif$

>>

union_type(ctx, parent, union, extensions, switch_type) ::= <<
$switch_type$
////////////////////////////////////////////////////////
// Binding for class $union.name$
////////////////////////////////////////////////////////

// Ignore overloaded methods that have no application on Python
// Otherwise they will issue a warning
%ignore $union.name$::$union.name$($union.name$&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Avoid a warning ignoring all but one
%ignore $union.name$::_d() const;
$union.members : { member | $member_getters(struct_name=union.name, member=member)$}; separator="\n"$

>>

bitset_type(ctx, parent, bitset, extensions) ::= <<
////////////////////////////////////////////////////////
// Binding for class $bitset.name$
////////////////////////////////////////////////////////

// Ignore overloaded methods that have no application on Python
// Otherwise they will issue a warning
%ignore $bitset.name$::$bitset.name$($bitset.name$&&);

>>

// Enums are ported as constants in the target language
enum_type(ctx, parent, enum) ::= <<
%traits_penumn(enum $enum.cppTypename$);
>>
