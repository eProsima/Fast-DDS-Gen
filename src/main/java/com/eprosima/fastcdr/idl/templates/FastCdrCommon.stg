// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

group FastCdrCommon;

object_serialization(ctx, object) ::= <<
scdr << eprosima::fastcdr::MemberId($object.id$) << $object.name$();
>>

bitfield_serialization(ctx, object) ::= <<$if(member.name)$
scdr << static_cast<$member.spec.cppTypename$>($member.name$());$endif$
>>

object_deserialization(ctx, object) ::= <<
dcdr \>> $object.name$();
>>

bitfield_deserialization(ctx, object) ::= <<$if(member.name)$$member.spec.cppTypename$ aux_$member.name$;
dcdr \>> aux_$member.name$;
$member.name$(aux_$member.name$);$endif$
>>

const_decl(ctx, parent, const) ::= <<>>

object_cpptypename(object) ::= <<
$if(object.annotationOptional)$eprosima::fastcdr::optional<$endif$$object.typecode.cppTypename$$if(object.typecode.forwarded)$*$endif$$if(object.annotationOptional)$>$endif$
>>

member_type_declaration(member) ::= <<
$if(member.annotationOptional)$eprosima::fastcdr::optional<$endif$$member.typecode.cppTypename$$if(member.annotationOptional)$>$endif$
>>

member_destructor(ctx, member) ::= <<$if(member.typecode.forwarded)$delete m_$member.name$;$elseif(ctx.generateTypesC)$$if(member.typecode.isStringType)$free(m_$member.name$);
m_$member.name$ = nullptr;$elseif(member.typecode.isType_f)$$if(member.typecode.contentTypeCode.isStringType)$$member_array_cstring_destructor(ctx=ctx, name=memberName(member.name), loopvar=ctx.newLoopVarName, dims=member.typecode.dimensions)$$endif$$endif$$endif$>>

member_array_cstring_destructor(ctx, name, loopvar, dims) ::= <<$if(rest(dims))$for (size_t $loopvar$ = 0; $loopvar$ < $name$.size(); ++$loopvar$)
{
    $member_array_cstring_destructor(ctx=ctx, name=indexName(name=name,loopvar=loopvar),  loopvar=ctx.nextLoopVarName, dims=rest(dims))$
}$else$for (char* str : $name$)
{
    free(str);
}$endif$>>
