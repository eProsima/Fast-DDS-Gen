// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// internal plugins

apply plugin: 'java'
apply plugin: 'eclipse' // Eclipse integration

description = """"""
def version_str = "1.0.3"

repositories {
    mavenCentral()
}

dependencies {
    compile files('thirdparty/idl-parser/build/libs/idlparser-1.0.0.jar')
    testCompile group: 'junit', name: 'junit', version: '4.+'
    compile 'junit:junit:4.+'
}

task submodulesUpdate(type: Exec) {
    description 'Updates (and inits) git submodules'
    commandLine 'git', 'submodule', 'update', '--init'
}

task buildIDLParser(type: GradleBuild) {
    buildFile = 'thirdparty/idl-parser/idl.gradle'
    tasks = ['clean', 'build']
}
buildIDLParser.dependsOn submodulesUpdate

task copyResources {
    // Copy platforms file
    File outputDir = file(new File("${project.buildDir}", "resources/main"))
    outputDir.exists() || outputDir.mkdirs()
    File versionFile = new File("${project.buildDir}/resources/main/version")
    outputs.file versionFile
    doLast {
        // Create version file
        Properties pversion = new Properties()
        project.hasProperty('customversion')
            ? pversion.setProperty('version', project.customversion.toString())
            : pversion.setProperty('version', version_str)
        versionFile.withWriter {
            pversion.store(it, null)
        }
    }

}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }

        resources {
            srcDir 'src/main/java'
            include '**/*.stg'
        }
    }

    test {
        java {
            srcDir 'src/test/java'
        }
    }
}

jar {
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    baseName = 'fastrtpsgen'
    manifest {
        attributes("Created-By": "eProsima", "Main-Class": "com.eprosima.fastrtps.fastrtpsgen")
    }
}

compileJava.dependsOn buildIDLParser,copyResources
compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.compilerArgs.add('-Xlint:deprecation')
    options.compilerArgs.add('-Xlint:unchecked')
}

test {
    useJUnit()
}
